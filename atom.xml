<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Go7hic</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.yongyuan.com/"/>
  <updated>2016-08-07T15:52:54.000Z</updated>
  <id>http://blog.yongyuan.com/</id>
  
  <author>
    <name>Go7hic</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>动手写一个简单的 Virtual Dom（3）</title>
    <link href="http://blog.yongyuan.com/post/%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%20Virtual%20Dom%EF%BC%883%EF%BC%89.html"/>
    <id>http://blog.yongyuan.com/post/动手写一个简单的 Virtual Dom（3）.html</id>
    <published>2016-08-06T03:21:04.000Z</published>
    <updated>2016-08-07T15:52:54.000Z</updated>
    
    <content type="html">&lt;p&gt;前一篇文章介绍了 Virtual Dom 的属性设置等，现在再讲一下  Virtual Dom 怎么绑定事件。&lt;br&gt;平常我们给 DOM 绑定事件的写法可能是这样：&lt;code&gt;querySelector(&amp;#39;xx&amp;#39;).addEventListener(..)&lt;/code&gt;&lt;br&gt;但是在 React 里面我们不这样写，我们直接在 DOM 上通过属性来绑定：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; alert(‘hi!’)&amp;#125;&amp;gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面我们有一个专门监听事件的属性，并且都以 ‘on’ 开头，下面我们写一个函数来判断该属性是不是绑定事件的：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isEventProp&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;regexp&quot;&gt;/^on/&lt;/span&gt;.test(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面我们还需要一个方法来从属性里面把 事件属性名给提出来：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;extractEventName&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name.slice(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;).toLowerCase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在还有个问题就是我们这个监听事件的属性其实和其他的正常属性是不一样的，所以我们需要在 isCustomProp 里面&lt;br&gt;处理这个属性：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isCustomProp&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; isEventProp(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来就是真正的给 Dom 监听事件的属性添加监听函数了：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addEventListeners&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;$target, props&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(props).forEach(name =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isEventProp(name)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      $target.addEventListener(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        extractEventName(name),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        props[name]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后把上面这个放到 &lt;code&gt;createElement&lt;/code&gt; 里面去：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;node&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; node === ‘string’) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createTextNode(node);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; $el = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(node.type);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  setProps($el, node.props);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  addEventListeners($el, node.props);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  node.children&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .map(createElement)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .forEach($el.appendChild.bind($el));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $el;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到这里监听事件的功能基本上就好了，但是还有一个小问题，就是重复添加事件的问题，虽然这个需求很少，但是还是不可避免的会有，&lt;br&gt;所以我们可以添加一个强制更新的属性 ‘forceUpdate’，然后修改之前的那个 change 函数：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;changed&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;node1, node2&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; node1 !== &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; node2 ||&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; node1 === ‘string’ &amp;amp;&amp;amp; node1 !== node2 ||&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         node1.type !== node2.type ||&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         node.props.forceUpdate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当 ‘forceUpdate’ 为 true 时，这个 Dom 节点会完全重新重新创建并且把事件监听加上，这里就还需要修改下之前的 isCustomProp 函数：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isCustomProp&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; isEventProp(name) || name === ‘forceUpdate’;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面是完整的 DEMO：&lt;a href=&quot;https://jsfiddle.net/gothic/as87qdyc/3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://jsfiddle.net/gothic/as87qdyc/3/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;前一篇文章介绍了 Virtual Dom 的属性设置等，现在再讲一下  Virtual Dom 怎么绑定事件。&lt;br&gt;平常我们给 DOM 绑定事件的写法可能是这样：&lt;code&gt;querySelector(&amp;#39;xx&amp;#39;).addEventListener(..)&lt;
    
    </summary>
    
    
      <category term="React" scheme="http://blog.yongyuan.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>动手写一个简单的 Virtual Dom（2）</title>
    <link href="http://blog.yongyuan.com/post/%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%20Virtual%20Dom%EF%BC%882%EF%BC%89.html"/>
    <id>http://blog.yongyuan.com/post/动手写一个简单的 Virtual Dom（2）.html</id>
    <published>2016-08-04T03:21:04.000Z</published>
    <updated>2016-08-04T17:03:16.000Z</updated>
    
    <content type="html">&lt;p&gt;上一篇文章其实就是介绍了怎么创建虚拟 DOM，真的只是创建 DOM 元素而已，因为没有设置属性的功能，事件绑定的功能也没有。&lt;br&gt;现在慢慢的一个个来实现吧。&lt;/p&gt;
&lt;h2 id=&quot;设置属性&quot;&gt;&lt;a href=&quot;#设置属性&quot; class=&quot;headerlink&quot; title=&quot;设置属性&quot;&gt;&lt;/a&gt;设置属性&lt;/h2&gt;&lt;p&gt;设置属性很简单的，还记得前面我们怎么表达 DOM 的吗? 我们把属性用纯 JS 对象存起来，比如：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;”list”&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;”list-style:&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;none&lt;/span&gt;;”&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用 JS 对象来表达这个 DOM，就会是下面这个样子：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  type: ‘ul’, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  props: &amp;#123; className: ‘list’, style: ’list-style: none;’ &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  children: []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面对象的每个字段就是属性名称，字段的值就是属性的值了。我们只要把这个对象映射到 DOM节点上去就可以啦。&lt;br&gt;可以利用 &lt;code&gt;setAttribute()&lt;/code&gt; 方法来写一个设置属性的函数：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setProp&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;$target, name, value&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $target.setAttribute(name, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们既然知道在 JS 里设置一个属性，那么可以通过遍历把对象里的每个字段设置成属性：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setProps&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;$target, props&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(props).forEach(name =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setProp($target, name, props[name]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来我们要用到上篇文章提到的 &lt;code&gt;createElement()&lt;/code&gt; 函数。在创建 DOM 后引用 &lt;code&gt;setProps()&lt;/code&gt; 函数&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;node&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; node === ‘string’) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createTextNode(node)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; $el = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(node.type)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  setProps($el, node.props)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  node.children&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .map(createElement)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .forEach($el.appendChild.bind($el))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $el&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到这里还没完，还有几个需要注意的小地方。首先 class 在 JS 关键字，需要用 ‘className’ 代替：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;nav&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;”navbar&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;light&lt;/span&gt;”&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是因为 DOM 里面是没有 &lt;code&gt;className&lt;/code&gt; 这个属性的，所以需要我们自己利用 &lt;code&gt;setProp()&lt;/code&gt; 函数去设置。&lt;/p&gt;
&lt;p&gt;还有一个注意的地方就是，我们经常在 DOM 里面要用到一些布尔属性，比如：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;”checkbox”&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;checked&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;false&amp;#125;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;前面写了一个设置元素标签属性的 &lt;code&gt;setProp&lt;/code&gt; 函数，现在需要再写一个设置元素标签属性布尔值的函数：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setBooleanProp&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;$target, name, value&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $target.setAttribute(name, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $target[name] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $target[name] = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还有一个需要注意的就是我们有的时候可能会自己定义一个属性在 DOM 元素上，像这种情况我们需要检查如果是自定义的不存在的属性，我们&lt;br&gt;返回 false：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isCustomProp&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们把 &lt;code&gt;setBooleanProp&lt;/code&gt;，&lt;code&gt;isCustomProp&lt;/code&gt;添加到 &lt;code&gt;setProp&lt;/code&gt; 实现一个完整的设置属性的功能函数&lt;/p&gt;
&lt;figure class=&quot;highlight fortran&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;/span&gt; setProp($&lt;span class=&quot;keyword&quot;&gt;target&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isCustomProp(&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt; === ‘className’) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $&lt;span class=&quot;keyword&quot;&gt;target&lt;/span&gt;.setAttribute(‘&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;’, &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (typeof &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt; === ‘boolean’) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setBooleanProp($&lt;span class=&quot;keyword&quot;&gt;target&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $&lt;span class=&quot;keyword&quot;&gt;target&lt;/span&gt;.setAttribute(&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上一篇讲创建 DOM 的时候有写到进行 DOM diff，其实现在这个属性也要进行 props diff。当然 diff&lt;br&gt;无非几种情况，删除属性，添加属性，更新属性这几种。&lt;/p&gt;
&lt;p&gt;下面是删除属性的具体的函数：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;removeBooleanProp&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;$target, name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $target.removeAttribute(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $target[name] = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;removeProp&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;$target, name, value&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isCustomProp(name)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (name === ‘className’) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $target.removeAttribute(‘&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;’)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; value === ‘boolean’) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    removeBooleanProp($target, name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $target.removeAttribute(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们还需要一个 updateProp 的函数来比较DOM标签上新旧属性的区别并且更新最后的 DOM。细想一下应该主要就是&lt;br&gt;下面几种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加属性，指的是本来 DOM 标签上一个属性都没有，添加了一个属性&lt;/li&gt;
&lt;li&gt;把属性删除了，和上面想反&lt;/li&gt;
&lt;li&gt;删除属性值，可能一个属性里面本来有多个值，现在删了一个，比如本来 DOM class 属性有两个值的，现在删了一个&lt;/li&gt;
&lt;li&gt;添加属性值，和上面相反&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于一个属性的更新可以这么写：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateProp&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;$target, name, newVal, oldVal&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!newVal) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    removeProp($target, name, oldVal);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!oldVal || newVal !== oldVal) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setProp($target, name, newVal);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对于所有的属性则可以和前面设置属性一样通过遍历来实现：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateProps&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;$target, newProps, oldProps = &amp;#123;&amp;#125;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; props = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, newProps, oldProps);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(props).forEach(name =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    updateProp($target, name, newProps[name], oldProps[name]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;好了，属性也更新了，最后就是更新DOM元素了，在第一篇文章里我们写了一个 updateElement函数，现在我们来更新一下这个函数：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateElement&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;$parent, newNode, oldNode, index = 0&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!oldNode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $parent.appendChild(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      createElement(newNode)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!newNode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $parent.removeChild(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      $parent.childNodes[index]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (changed(newNode, oldNode)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $parent.replaceChild(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      createElement(newNode),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      $parent.childNodes[index]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (newNode.type) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 新添加的代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    updateProps(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      $parent.childNodes[index],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      newNode.props,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      oldNode.props&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ); &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; newLength = newNode.children.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; oldLength = oldNode.children.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; newLength || i &amp;lt; oldLength; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      updateElement(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $parent.childNodes[index],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        newNode.children[i],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        oldNode.children[i],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后我把上面的代码整理一下在 jsfiddle 上： &lt;a href=&quot;https://jsfiddle.net/gothic/a1c4qky5/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://jsfiddle.net/gothic/a1c4qky5/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇文章其实就是介绍了怎么创建虚拟 DOM，真的只是创建 DOM 元素而已，因为没有设置属性的功能，事件绑定的功能也没有。&lt;br&gt;现在慢慢的一个个来实现吧。&lt;/p&gt;
&lt;h2 id=&quot;设置属性&quot;&gt;&lt;a href=&quot;#设置属性&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
    
      <category term="React" scheme="http://blog.yongyuan.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>【译】React 基础理论概念</title>
    <link href="http://blog.yongyuan.com/post/%E3%80%90%E8%AF%91%E3%80%91React%20%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E6%A6%82%E5%BF%B5.html"/>
    <id>http://blog.yongyuan.com/post/【译】React 基础理论概念.html</id>
    <published>2016-06-20T03:21:04.000Z</published>
    <updated>2016-06-21T16:19:58.000Z</updated>
    
    <content type="html">&lt;p&gt;这份文档我试图解释我心中的 react 模式，试图去推导我们这么设计的一些原则。可能有些地方会有争议而且例子的设计可能也有问题，不过这仅仅是个开始，如果你有更好的想法可以发 Pull Request&lt;/p&gt;
&lt;p&gt;React 的实现充满实用的解决方案，渐进的步骤，算法优化，遗留代码，调试工具，你需要使它变得真正有用。&lt;/p&gt;
&lt;h2 id=&quot;Transformation&quot;&gt;&lt;a href=&quot;#Transformation&quot; class=&quot;headerlink&quot; title=&quot;Transformation&quot;&gt;&lt;/a&gt;Transformation&lt;/h2&gt;&lt;p&gt;React的核心前提即是改变了jQuery这种以DOM操作为核心到以数据流驱动为核心，View是不同的数据的投射。并且对于数据的处理函数应该是纯函数，即相同的输入有相同的输出而不会产生其他副作用：&lt;/p&gt;
&lt;figure class=&quot;highlight ada&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NameBox&lt;/span&gt;(name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;&amp;#123;&lt;/span&gt; fontWeight: &lt;span class=&quot;symbol&quot;&gt;&#39;bold&lt;/span&gt;&#39;, labelContent: name &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;&#39;Sebastian&lt;/span&gt; Markbåge&#39; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; fontWeight: &lt;span class=&quot;symbol&quot;&gt;&#39;bold&lt;/span&gt;&#39;, labelContent: &lt;span class=&quot;symbol&quot;&gt;&#39;Sebastian&lt;/span&gt; Markbåge&#39; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样可以极大地方便对于View构造函数的重用与单元测试等。&lt;/p&gt;
&lt;h2 id=&quot;Abstraction-抽象&quot;&gt;&lt;a href=&quot;#Abstraction-抽象&quot; class=&quot;headerlink&quot; title=&quot;Abstraction(抽象)&quot;&gt;&lt;/a&gt;Abstraction(抽象)&lt;/h2&gt;&lt;p&gt;对于一个复杂的UI，肯定不能全都塞到一个函数里处理，这就是React另一个重要的思想，将UI抽象拆分为多个可重用的部分，并且各个部分要对上层隐藏实现细节，便如下面这样的进行函数调用：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;FancyUserBox&lt;/span&gt;(user) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;borderStyle&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;1px solid blue&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;childContent&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&#39;Name: &#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      NameBox(user.firstName + &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; + user.lastName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &lt;span class=&quot;attribute&quot;&gt;firstName&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Sebastian&#39;&lt;/span&gt;, lastName: &lt;span class=&quot;string&quot;&gt;&#39;Markbåge&#39;&lt;/span&gt; &amp;#125; &lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;borderStyle&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;1px solid blue&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  childContent: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;Name: &#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; fontWeight: &lt;span class=&quot;string&quot;&gt;&#39;bold&#39;&lt;/span&gt;, labelContent: &lt;span class=&quot;string&quot;&gt;&#39;Sebastian Markbåge&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Composition-组合&quot;&gt;&lt;a href=&quot;#Composition-组合&quot; class=&quot;headerlink&quot; title=&quot;Composition(组合)&quot;&gt;&lt;/a&gt;Composition(组合)&lt;/h2&gt;&lt;p&gt;为了达到真正意义上的重用目标，并不仅仅就是把那个叶子组件组合进一个新的容器，我们也需要在容器中构建出能够组合其他抽象组件的抽象组件。这里我认为的组合要点在于如何把两个或者更多的抽象组件合并成一个新的：&lt;/p&gt;
&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ada&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FancyBox&lt;/span&gt;(children) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    borderStyle: &#39;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;px solid blue&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    children: children&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UserBox&lt;/span&gt;(user) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;FancyBox([&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;&#39;Name&lt;/span&gt;: &#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NameBox(user.firstName + &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; + user.lastName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;State&quot;&gt;&lt;a href=&quot;#State&quot; class=&quot;headerlink&quot; title=&quot;State&quot;&gt;&lt;/a&gt;State&lt;/h2&gt;&lt;p&gt;一个UI并不仅仅是服务端或者业务逻辑的重现，实际上有很多特定的状态会被投射到UI上。譬如，如果你正在输入一个文本框，这个并不会复制到其他的Tab或者你的手机浏览器中。另外，滚动位置也是一个典型的你并不想投射到其他地方的状态。我们希望我们的数据模型会更加地固定，因此，我们从顶部组件开始将更新函数一级一级地注入到实际的显示的那个模块上。&lt;/p&gt;
&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FancyNameBox&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(user, likes, onClick)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; FancyBox([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;Name: &#39;&lt;/span&gt;, NameBox(user.firstName + &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; + user.lastName),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;Likes: &#39;&lt;/span&gt;, LikeBox(likes),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LikeButton(onClick)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Implementation Details&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; likes = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addOneMoreLike&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  likes++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rerender();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Init&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FancyNameBox(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; firstName: &lt;span class=&quot;string&quot;&gt;&#39;Sebastian&#39;&lt;/span&gt;, lastName: &lt;span class=&quot;string&quot;&gt;&#39;Markbåge&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  likes,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  addOneMoreLike&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意，这里的例子还是用了带副作用的函数来更新状态，不过我本意是想采用纯函数，即每次返回最新的状态来完成这个工作。我会在下面的例子里阐述这个观点。&lt;/p&gt;
&lt;h2 id=&quot;Memoization&quot;&gt;&lt;a href=&quot;#Memoization&quot; class=&quot;headerlink&quot; title=&quot;Memoization&quot;&gt;&lt;/a&gt;Memoization&lt;/h2&gt;&lt;p&gt;纯函数的一个好处就是其结果是可以缓存的，这就避免了重复调用带来的性能浪费。我们可以创建一个自带缓存的函数来记录最后调用的参数与返回值，这样我们可以自动地在相同参数的情况下直接返回：&lt;/p&gt;
&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;memoize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(fn)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cachedArg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cachedResult;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(arg)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cachedArg === arg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cachedResult;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cachedArg = arg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cachedResult = fn(arg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cachedResult;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; MemoizedNameBox = memoize(NameBox);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NameAndAgeBox&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(user, currentTime)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; FancyBox([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;Name: &#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MemoizedNameBox(user.firstName + &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; + user.lastName),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;Age in milliseconds: &#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    currentTime - user.dateOfBirth&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Lists&quot;&gt;&lt;a href=&quot;#Lists&quot; class=&quot;headerlink&quot; title=&quot;Lists&quot;&gt;&lt;/a&gt;Lists&lt;/h2&gt;&lt;p&gt;大部分的UI组件都是会包含着列表，每一行会显示不同的值。我们需要维护一个Map来记录列表中每个项目的状态信息：&lt;/p&gt;
&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UserList&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(users, likesPerUser, updateUserLikes)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; users.map(user =&amp;gt; FancyNameBox(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    user,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    likesPerUser.get(user.id),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    () =&amp;gt; updateUserLikes(user.id, likesPerUser.get(user.id) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; likesPerUser = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Map();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateUserLikes&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(id, likeCount)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  likesPerUser.set(id, likeCount);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rerender();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UserList(data.users, likesPerUser, updateUserLikes);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意，在这个函数里我们传入了多个值，这样就不能缓存结果了。&lt;/p&gt;
&lt;h2 id=&quot;Continuations&quot;&gt;&lt;a href=&quot;#Continuations&quot; class=&quot;headerlink&quot; title=&quot;Continuations&quot;&gt;&lt;/a&gt;Continuations&lt;/h2&gt;&lt;p&gt;B狗的事情发生了，因为存在着很多的列表，我们也需要维护很多的模板，不同的列表显示的数据有交集有差异，譬如用户列表和你关注的用户列表，它们可能就是操作按钮上的不同。我们可以将部分模板和业务逻辑解耦合以下，譬如使用柯里化这种构造高阶函数的手段。这种手段本身并不能减少业务逻辑或者最终模板的复杂度，不过能够将一部分代码移出业务逻辑：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FancyUserList&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(users)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; FancyBox(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UserList.bind(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, users)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; box = FancyUserList(data.users);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; resolvedChildren = box.children(likesPerUser, updateUserLikes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; resolvedBox = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...box,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  children: resolvedChildren&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;State-Map&quot;&gt;&lt;a href=&quot;#State-Map&quot; class=&quot;headerlink&quot; title=&quot;State Map&quot;&gt;&lt;/a&gt;State Map&lt;/h2&gt;&lt;p&gt;早前我们就知道著名的23种设计模式里会避免重复的实现一些通用模式，我们也可以将一些状态管理的逻辑函数移到统一的初级函数里，这样就方便重复使用了：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FancyBoxWithState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  children,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  stateMap,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  updateState&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; FancyBox(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    children.map(child =&amp;gt; child.continuation(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      stateMap.get(child.key),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      updateState&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UserList&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(users)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; users.map(user =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    continuation: FancyNameBox.bind(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, user),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    key: user.id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FancyUserList&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(users)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; FancyBoxWithState.bind(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UserList(users)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; continuation = FancyUserList(data.users);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;continuation(likesPerUser, updateUserLikes);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Memoization-Map&quot;&gt;&lt;a href=&quot;#Memoization-Map&quot; class=&quot;headerlink&quot; title=&quot;Memoization Map&quot;&gt;&lt;/a&gt;Memoization Map&lt;/h2&gt;&lt;p&gt;上面提到过，当存在多个输入参数的情况下要再想进行缓存就会麻烦一点，我们要使用一些复杂的缓存策略来平衡内存使用与频次。幸运的是很多地方View还是比较固定的，整个树上的相同位置的值一般都是相同的，因此可以用树结构来进行缓存。&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;memoize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(fn)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(arg, memoizationCache)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (memoizationCache.arg === arg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; memoizationCache.result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; result = fn(arg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    memoizationCache.arg = arg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    memoizationCache.result = result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FancyBoxWithState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  children,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  stateMap,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  updateState,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  memoizationCache&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; FancyBox(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    children.map(child =&amp;gt; child.continuation(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      stateMap.get(child.key),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      updateState,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      memoizationCache.get(child.key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; MemoizedFancyNameBox = memoize(FancyNameBox);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Algebraic-Effects&quot;&gt;&lt;a href=&quot;#Algebraic-Effects&quot; class=&quot;headerlink&quot; title=&quot;Algebraic Effects&quot;&gt;&lt;/a&gt;Algebraic Effects&lt;/h2&gt;&lt;p&gt;如果我们在一个嵌套多层的UI体系里每次都把一些参数一级一级的传递下去，那约莫是非常麻烦的。因此我们需要创造一些捷径来在两个不直接相连的抽象组件之间传递数据，而不需要通过中间层。在React里面叫他Context。（官方文档里Context还是属于测试阶段）。有时候这个数据依赖的关系并不严格按照抽象树的逻辑，譬如在一个布局算法里你需要知道你的子元素的大小你才能够完整地决定他们的位置。我在这里使用 Algebraic Effects 作为 proposed for ECMAScript。&lt;/p&gt;
&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;qml&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ThemeBorderColorRequest&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FancyBox&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;children&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;color&lt;/span&gt; = raise &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ThemeBorderColorRequest();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;borderWidth&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;1px&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;borderColor&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;color&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;children&lt;/span&gt;: children&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BlueTheme&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;children&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    children();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; effect ThemeBorderColorRequest -&amp;gt; [, continuation] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    continuation(&lt;span class=&quot;string&quot;&gt;&#39;blue&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; BlueTheme(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FancyUserList.bind(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, data.users)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这份文档我试图解释我心中的 react 模式，试图去推导我们这么设计的一些原则。可能有些地方会有争议而且例子的设计可能也有问题，不过这仅仅是个开始，如果你有更好的想法可以发 Pull Request&lt;/p&gt;
&lt;p&gt;React 的实现充满实用的解决方案，渐进的步骤，算法优化，
    
    </summary>
    
    
      <category term="React" scheme="http://blog.yongyuan.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>动手写一个简单的 Virtual Dom（1）</title>
    <link href="http://blog.yongyuan.com/post/%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%20Virtual%20Dom%EF%BC%881%EF%BC%89.html"/>
    <id>http://blog.yongyuan.com/post/动手写一个简单的 Virtual Dom（1）.html</id>
    <published>2016-06-04T03:21:04.000Z</published>
    <updated>2016-08-04T17:03:04.000Z</updated>
    
    <content type="html">&lt;p&gt;Virtual Dom 又叫虚拟 DOM，随着 React 一起火起来的一个概念。虚拟 DOM 做到极致能够极大的提升性能，据说 Vue2 的 Virtual DOM 实现性能提升了很高。不过这些我们暂时不管，我们只要知道大致原理就可以自己来试着实现一个类似的乞丐版 Virtual Dom。&lt;/p&gt;
&lt;p&gt;我们知道虚拟 DOM 最后也是要映射成真实DOM 的，所以我们可以用 JS 对象来表示真实的 DOM 树。比如：&lt;/p&gt;
&lt;p&gt;比如有个这样的 DOM 树结构&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;”list”&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;item 1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;item 2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用 JS 对象我们可以这样来描述&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; type: ‘ul’, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  props: &amp;#123; ‘class’: ‘list’ &amp;#125;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  children: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; type: ‘li’, props: &amp;#123;&amp;#125;, children: [‘item 1’] &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; type: ‘li’, props: &amp;#123;&amp;#125;, children: [‘item 2’] &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;考虑到我们不可能每个 DOM 标签都写一串这么长的对象来描述，我们可以封装一个简单的函数：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;h&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;type, props, …children&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123; type, props, children &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中 type 表示元素标签，props 表示标签的属性，children 表示子元素，现在我们用上面的函数再表示一遍：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;h(‘ul’, &amp;#123; ‘class’: ‘list’ &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  h(‘li’, &amp;#123;&amp;#125;, ‘item 1’),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  h(‘li’, &amp;#123;&amp;#125;, ‘item 2’),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们还差一个方法来把上面的 JS 对象映射成真实的 DOM。我们可以写一个简单的实现方法：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;node&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; node === &lt;span class=&quot;string&quot;&gt;&#39;string&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createTextNode(node)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; $el = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(node.type)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  node.children.map(createElement).forEach($el.appendChild.bind($el))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $el&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到这里基本的创建真实 DOM 功能就实现了，但是如果这就完了不是有点坑爹啊。哈哈，的确，Virtual Dom 的精华之处应该在其 diff 和 patch 上面，所谓 diff 应该就是 计算 [ 新的虚拟DOM ] 和 [ 旧虚拟DOM ] 的差异，然后开始 patch（根据计算的 差异, 更新真实DOM）。我想要优化 Virtual Dom 实现应该也是在这两方面优化吧。&lt;/p&gt;
&lt;p&gt;所以接下来我们可以来实现个简单的 diff 功能。在写代码之前我们可以先想一下一个 Dom 结构前后之间会有哪几种变化呢？&lt;br&gt;我列了几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加 DOM 元素 ，appendChild&lt;/li&gt;
&lt;li&gt;删除 Dom元素，removeChild&lt;/li&gt;
&lt;li&gt;替换 Dom 元素标签，标签和内容都变了，replaceChild&lt;/li&gt;
&lt;li&gt;元素标签变了，但是内容没变&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好了，我们就先看着这几个 diff 的实现吧，我们可以创建一个函数 updateElement ，用前面的那个 ul DOM结构为例子。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateElement&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;$parent, newNode, oldNode, index = 0&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!oldNode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 直接插入新的标签&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $parent.appendChild(createElement(newNode));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!newNode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 把原来的标签删除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $parent.removeChild($parent.childNodes[index]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (changed(newNode, oldNode)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 替换 Dom 元素标签&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $parent.replaceChild(createElement(newNode), $parent.childNodes[index]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (newNode.type) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; newLength = newNode.children.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; oldLength = oldNode.children.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; newLength || i &amp;lt; oldLength; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      updateElement($parent.childNodes[index], newNode.children[i], oldNode.children[i], i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再解释一下上面的代码，其中 $parent 是DOM的最外层标签，newNode和oldNode是新老的虚拟DOM，其中 index 表示的是子元素 li 的位置。&lt;/p&gt;
&lt;p&gt;到这就差不多了，毕竟是乞丐版。下面是一个完整的例子：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jsfiddle.net/gothic/ogc3mme4/3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://jsfiddle.net/gothic/ogc3mme4/3/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Virtual Dom 又叫虚拟 DOM，随着 React 一起火起来的一个概念。虚拟 DOM 做到极致能够极大的提升性能，据说 Vue2 的 Virtual DOM 实现性能提升了很高。不过这些我们暂时不管，我们只要知道大致原理就可以自己来试着实现一个类似的乞丐版 Vir
    
    </summary>
    
    
      <category term="React" scheme="http://blog.yongyuan.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>ES6 in React/React-Native</title>
    <link href="http://blog.yongyuan.com/post/ES6%20in%20React:React-Native.html"/>
    <id>http://blog.yongyuan.com/post/ES6 in React:React-Native.html</id>
    <published>2016-05-08T16:00:00.000Z</published>
    <updated>2016-05-24T01:52:57.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;module&quot;&gt;&lt;a href=&quot;#module&quot; class=&quot;headerlink&quot; title=&quot;module&quot;&gt;&lt;/a&gt;module&lt;/h2&gt;&lt;p&gt;加载模块&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//es5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; React = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;react-native&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Image,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Text,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PropTypes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; = React  &lt;span class=&quot;comment&quot;&gt;//引用不同的React Native组件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//es6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Image, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Text,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PropTypes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-native&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Reacr-Native 0.25+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; Image, Text, PropTypes &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-native&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;导出模块&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//es5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; MyComponent = React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = MyComponent;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//es6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Class&quot;&gt;&lt;a href=&quot;#Class&quot; class=&quot;headerlink&quot; title=&quot;Class&quot;&gt;&lt;/a&gt;Class&lt;/h2&gt;&lt;h4 id=&quot;React-createClass&quot;&gt;&lt;a href=&quot;#React-createClass&quot; class=&quot;headerlink&quot; title=&quot;React.createClass&quot;&gt;&lt;/a&gt;React.createClass&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// es5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Photo = React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  handleDoubleTap: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123; … &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; … &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// es6+ &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Photo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  handleDoubleTap(e) &amp;#123; … &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123; … &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;componentWillMount&quot;&gt;&lt;a href=&quot;#componentWillMount&quot; class=&quot;headerlink&quot; title=&quot;componentWillMount&quot;&gt;&lt;/a&gt;componentWillMount&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// es5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; EmbedModal = React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  componentWillMount: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; … &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// es6+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;EmbedModal&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(props) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(props);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Operations usually carried out in componentWillMount go here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Property-initializers&quot;&gt;&lt;a href=&quot;#Property-initializers&quot; class=&quot;headerlink&quot; title=&quot;Property initializers&quot;&gt;&lt;/a&gt;Property initializers&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// es5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Video = React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  getDefaultProps: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      autoPlay: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      maxLoops: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  getInitialState: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      loopsRemaining: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.maxLoops,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  propTypes: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    autoPlay: React.PropTypes.bool.isRequired,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    maxLoops: React.PropTypes.number.isRequired,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    posterFrameSrc: React.PropTypes.string.isRequired,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    videoSrc: React.PropTypes.string.isRequired,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// es6=&amp;gt;react-native&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Video&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; defaultProps = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    autoPlay: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    maxLoops: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; propTypes = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    autoPlay: React.PropTypes.bool.isRequired,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    maxLoops: React.PropTypes.number.isRequired,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    posterFrameSrc: React.PropTypes.string.isRequired,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    videoSrc: React.PropTypes.string.isRequired,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为 &lt;code&gt;static&lt;/code&gt; 在ie 10 以及之前的版本兼容问题， Airbnb 的 react 写法是下面这样的，不过react-native不用考虑这个问题。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// es6 =&amp;gt; react&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; defaultProps = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  autoPlay: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  maxLoops: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; propTypes = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  autoPlay: React.PropTypes.bool.isRequired,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  maxLoops: React.PropTypes.number.isRequired,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  posterFrameSrc: React.PropTypes.string.isRequired,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  videoSrc: React.PropTypes.string.isRequired,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Video&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Video.propTypes = propTypes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Video.defaultProps = defaultProps&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;箭头函数&quot;&gt;&lt;a href=&quot;#箭头函数&quot; class=&quot;headerlink&quot; title=&quot;箭头函数&quot;&gt;&lt;/a&gt;箭头函数&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// es5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; PostInfo = React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  handleOptionsButtonClick: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Here, &#39;this&#39; refers to the component instance.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123;showOptionsModal: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// es6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PostInfo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  handleOptionsButtonClick = (e) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123;showOptionsModal: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;字符串模板&quot;&gt;&lt;a href=&quot;#字符串模板&quot; class=&quot;headerlink&quot; title=&quot;字符串模板&quot;&gt;&lt;/a&gt;字符串模板&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// es5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Form = React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  onChange: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;inputName, e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; stateToSet = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    stateToSet[inputName + &lt;span class=&quot;string&quot;&gt;&#39;Value&#39;&lt;/span&gt;] = e.target.value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(stateToSet);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// es6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Form&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  onChange(inputName, e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [&lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;inputName&amp;#125;&lt;/span&gt;Value`&lt;/span&gt;]: e.target.value,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;initialState&quot;&gt;&lt;a href=&quot;#initialState&quot; class=&quot;headerlink&quot; title=&quot;initialState&quot;&gt;&lt;/a&gt;initialState&lt;/h2&gt;&lt;p&gt;初始化 state 的时候，以往是这么写的：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// es5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Video = React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  getInitialState: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          loopsRemaining: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.maxLoops,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//es6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Video&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  state = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loopsRemaining: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.maxLoops,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;es6 里还一种写法：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//es6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Video&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(props)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(props);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      loopsRemaining: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.maxLoops,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;解构和传播属性&quot;&gt;&lt;a href=&quot;#解构和传播属性&quot; class=&quot;headerlink&quot; title=&quot;解构和传播属性&quot;&gt;&lt;/a&gt;解构和传播属性&lt;/h2&gt;&lt;p&gt;结合使用es6+的解构和属性传播，我们给子组件传递一批属性更为方便了。这个例子 把className 以外的所有属性传递给 div 标签：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// es6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AutoloadingPostsGrid&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      className,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ...others,  &lt;span class=&quot;comment&quot;&gt;// contains all properties of this.props except for className&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;className&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;PostsGrid&lt;/span&gt; &amp;#123;&lt;span class=&quot;attr&quot;&gt;...others&lt;/span&gt;&amp;#125; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;this.handleLoadMoreClick&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;Load more&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面这种写法，则是传递所有属性的同时，用覆盖新的 className 值：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div &amp;#123;...this.props&amp;#125; className=&lt;span class=&quot;string&quot;&gt;&quot;override&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    …&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个例子则相反，如果属性中没有包含 className，则提供默认的值，而如果属性中已经包含了，则使用属性中的值&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div className=&lt;span class=&quot;string&quot;&gt;&quot;base&quot;&lt;/span&gt; &amp;#123;...this.props&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    …&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://babeljs.io/blog/2015/06/07/react-on-es6-plus&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://babeljs.io/blog/2015/06/07/react-on-es6-plus&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;module&quot;&gt;&lt;a href=&quot;#module&quot; class=&quot;headerlink&quot; title=&quot;module&quot;&gt;&lt;/a&gt;module&lt;/h2&gt;&lt;p&gt;加载模块&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://blog.yongyuan.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>单页面应用瞎扯</title>
    <link href="http://blog.yongyuan.com/post/%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E7%9E%8E%E6%89%AF.html"/>
    <id>http://blog.yongyuan.com/post/单页面应用瞎扯.html</id>
    <published>2016-04-01T03:21:04.000Z</published>
    <updated>2016-05-24T01:52:57.000Z</updated>
    
    <content type="html">&lt;p&gt;单页面应用发展到现在已经是个相对成熟的技术方案了，这份工作之前一直做的单页面的 web 应用，大大小小的项目也独立做过几个，有用公司自己基于业务开发的单页面框架，也有 angular，vue 这种双向数据绑定的框架，很遗憾没有在真正的项目里面用过 react，主是当时技术选型的时候对 react 不是很熟悉不是很有把握在短时间内快速把项目上线。不过我今天并不是想说这几个框架，而是谈谈对单页面应用的一些看法。&lt;/p&gt;
&lt;p&gt;单页面应用顾名思义离不开单页面（Single page）和应用（Application）这两个词。Application 这个词是应用程序（application program）的较短形式。应用程序是为客户设计的直接执行特定功能的程序，在某些情况中，是为其它应用程序设计的。现在随着互联网的发展，网速，硬件的发达，web 端的页面功能越来越复杂，交互越来越丰富。现在常说的单页面应用一般是指在浏览器（web 容器）中运行的应用，它们在使用期间不会重新加载页面。像所有的应用一样，它旨在帮助用户完成任务，比如“编写文档”或者“管理Web服务器”。可以认为单页应用是一种从 Web 服务器加载的富客户端。所以又有一种说法叫做 webApp&lt;/p&gt;
&lt;p&gt;上面说了这么多，主要是为了表达，当我们说单页面应用的时候首先他得是一个应用，这个应用可简单可复杂。当然如果你只是需要在 web 上展示几个纯静态页面的内容就没必要做成应用了。那为什是单页面应用呢？我们都知道一般的应用程序都是通过一个入口进入，然后在里面随意操作。单页面应用毫无疑问也是这样的通过一个页面入口进入，然后在里面各种操作交互，让你感觉一直在这个页面里面，没有离开过这个应用，这种体验是不是很棒，当然，他比传统的那种网站还有更多的好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.它提供了更加吸引人的用户体验，毫无疑问单页面应用的交互体验会比那种传统的网站体验好很多&lt;/li&gt;
&lt;li&gt;2.减小服务器压力，因为单页面应用切换功能模块的时候只是需要渲染当前需要加载数据的部分，不需要像传统网站那样切换页面然后加载渲染整个页面，有时候网速或服务器一慢可能就整个屏幕白屏了。这里单页面不仅体验好而且相对服务器压力也更小。&lt;/li&gt;
&lt;li&gt;3.更好的前后端分离，前后端职责更明确。现在单页面应用一般都是前端渲染模板，后端只需要提供 RESTful api 就可以 ，再也不用让前端套模板，再也不想让后端写 js 了&lt;/li&gt;
&lt;li&gt;4.后端代码通用。之前公司有个「五合一」的策略，就是五个 单页面应用项目共用一套 RESTful api，不过后面只有四合一，因为一个项目独立出去了。&lt;/li&gt;
&lt;li&gt;5.让前端夺回话语权。很早之前前端只是个切图的，但是现在呢？尤其是单页面应用的流行，让前端和后端同等重要，让前端在开发团队的地位越来越高。&lt;/li&gt;
&lt;li&gt;6.可移植性。单页面应用很容易的就可以移植到手机端和桌面端&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然优点非常多，但是缺点也不是没有，比如很多人关心的 seo 问题并没有很成熟的方案，有的单页应用首页请求过多数据过大可能导致首次加载有点慢，保存书签有点不方便。这些都有对应的解决办法的，比如 seo 的问题网上现在方案很多，而且谷歌现在可以抓取js 写的页面了，优化首屏加载时间的方案也非常多，相信真正有需要的人都解决了这些问题，只有那些并不是非常需要的人在那里抱怨又懒得去做这些事。至于其他的一些性能问题，和单页面没多大关系，只和你写的的代码和你用的框架有关。比如在很多单页面框架里面基本都有个事件管理模块，要是你每次页面事件注册完后不去注销掉，最后肯定会导致浏览器卡死啊。&lt;/p&gt;
&lt;p&gt;既然单页面应用这么好？为啥人家 facebook ，淘宝不用？再说这个之前，我们得承认人家 Gmail,Github,YouTube，印象笔记，网易云音乐等等很多高流量富交互的网站都是采用单页面应用技术，而且体验都还不错不是吗。所以我觉得非常大的一个问题就是重构带来的成本，他们那时候还得考虑 ie6 呢，而且单页面交互和传统的页面交互不同，从网站设计交互就得重头改起，想想就觉得可怕，更不要说涉及到前后端代码的重新设计，不过据说淘宝已经有些功能模块已经改成单页面，而且也不直接兼容 ie6 这种浏览器了。如果要重新建个淘宝和 facebook 这样的网站我觉得用单页面技术完全能吼住的,只不过对前端技术的要求高一点而已。&lt;/p&gt;
&lt;p&gt;不过现在又开始出现一种同构 js 应用，你只需要写一次代码，就可以在服务端渲染静态页面，还可以在客户端完成复杂的交互。理论是是解决了单页面应用的那些缺点，但是最后发展结果怎样，我也不知道，因为现在看到用这个技术的应用并不多，国内好像没听过有哪家公司这么搞！下次再讲那些适用于单页面的框架吧…&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;单页面应用发展到现在已经是个相对成熟的技术方案了，这份工作之前一直做的单页面的 web 应用，大大小小的项目也独立做过几个，有用公司自己基于业务开发的单页面框架，也有 angular，vue 这种双向数据绑定的框架，很遗憾没有在真正的项目里面用过 react，主是当时技术选
    
    </summary>
    
    
      <category term="Node" scheme="http://blog.yongyuan.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node 的艺术</title>
    <link href="http://blog.yongyuan.com/post/Node%20%E7%9A%84%E8%89%BA%E6%9C%AF.html"/>
    <id>http://blog.yongyuan.com/post/Node 的艺术.html</id>
    <published>2016-03-13T03:21:04.000Z</published>
    <updated>2016-05-24T01:52:57.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Node-js入门&quot;&gt;&lt;a href=&quot;#Node-js入门&quot; class=&quot;headerlink&quot; title=&quot;Node.js入门&quot;&gt;&lt;/a&gt;Node.js入门&lt;/h2&gt;&lt;p&gt;本文档假定读者已经懂了以下的两样东西：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;懂得至少一种编程语言。例如：JavaScript，Ruby，Python，Perl或其他编程语言。如果你还不是程序员，你不懂编程语言，你可以阅读&lt;a href=&quot;http://jsforcats.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript for Cats&lt;/a&gt;。:cat2:&lt;/li&gt;
&lt;li&gt;git和github。这是一个开源的协作工具，Node社区的用户使用git共享模块。你需要懂得基本操作就能了。这里有三篇很好的入门教程：&lt;a href=&quot;https://github.com/jlord/git-it-electron#readme&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;http://zachbruggeman.me/github-for-cats/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2&lt;/a&gt;, &lt;a href=&quot;http://opensourcerer.diy.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This short book is a work in progress + I don’t have a job right now (if I did I wouldn’t have the time to write this). If you like it then please consider donating via &lt;a href=&quot;https://www.gittip.com/maxogden/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gittip&lt;/a&gt; so that I can write more!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译者: 上面这段我没有翻译，因为我希望保持原文。上面作者提到，目前他还没找到工作。如果你喜欢这个文档，希望你可以通过&lt;a href=&quot;https://www.gittip.com/maxogden/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gittip&lt;/a&gt;乐捐给作者。这样作者才能够写更多。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#了解Node&quot;&gt;了解Node&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#核心模块&quot;&gt;核心模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#回调函数&quot;&gt;回调函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#事件&quot;&gt;事件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#流&quot;&gt;流&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#模块&quot;&gt;模块&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#用npm在客户端开发&quot;&gt;用npm在客户端开发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#析薪杝矣&quot;&gt;析薪杝矣&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;了解Node&quot;&gt;&lt;a href=&quot;#了解Node&quot; class=&quot;headerlink&quot; title=&quot;了解Node&quot;&gt;&lt;/a&gt;了解Node&lt;/h2&gt;&lt;p&gt;Node.js是一个开源项目，目的是让你通过编写JavaScript的程序进行网络、文件系统或其他I/O源的沟通。就这些！它只是一个简单而稳定的I/O平台，你可以在这个平台上架构模块。&lt;/p&gt;
&lt;p&gt;有没有I/O出的例子？ 我这里有一张图，上面是我用Node.js制作的程序，你可以看到上面有很多I/O源：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/maxogden/art-of-node/raw/master/server-diagram.png&quot; alt=&quot;server diagram&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果你无法明白上图显示的所有东西，这是没问题的。重点是你看到一个Node的运作（在中间六边形那个），它就像经纪人，管理全部I/O的端口（橙色和紫色的线条代表I/O）。&lt;/p&gt;
&lt;p&gt;一般上我们编写的程序可以分为以下两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;很难编写，但是效率超高（就像用C从零开始编写一个Web服务器）&lt;/li&gt;
&lt;li&gt;很简单编写，但是不够效率/强大（就像有人上传5GB的文件去你服务器，但是服务器当机了）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Node试图做到平衡在这两者之间：在大多数用列做到高效运行，而且容易明白和开发。&lt;/p&gt;
&lt;p&gt;Node不是以下两样东西：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不是Web框架 （不像Rails或Django，尽管它可以被用来做这样的事情）&lt;/li&gt;
&lt;li&gt;不是编程语言（Node是使用JavaScript编程，它没有自己的编程语言）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相反，Node是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计上简单，而且容易明白和使用的平台&lt;/li&gt;
&lt;li&gt;适合那些需要快速和处理很多I/O链接的程序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在基层，Node可以作为一种工具，并编写出以下两类程序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要使用到Web协议（如：HTTP、TCP、UDP、DNS和SSL）的网络程序&lt;/li&gt;
&lt;li&gt;需要对文件系统或者本地进程/内存进行读入和读出操作的程序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;什么是“I/O程序”？ 这里有一些常见的I/O源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;资料库 （如：MySQL、PostgreSQL、MongoDB、Redis、CouchDB）&lt;/li&gt;
&lt;li&gt;APIs（如：Twitter、Facebook、Apple Push Notifications）&lt;/li&gt;
&lt;li&gt;HTTP/WebSocket的链接（从用户的Web应用程序）&lt;/li&gt;
&lt;li&gt;文件档（图像尺寸伸缩软件、视频编辑软件、网络收音机）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Node能够&lt;a href=&quot;http://en.wikipedia.org/wiki/Asynchronous_I/O&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;异步处理&lt;/a&gt;多个不同种类的I/O源。比如说，假设你来到快餐店，你向店员要了一个芝士汉堡，他们会马上为你下单和准备汉堡。然后，他们会要求你在旁边等汉堡完成。在你等待这段时间，他们可以接受其他订单和帮其他人准备汉堡。试想下，如果你站在柜台前面，一直等到你的芝士汉堡完成，那么你就阻碍了后面的人下订单，厨师也不能帮其他人准备汉堡！我们称这个为&lt;strong&gt;阻塞I/O&lt;/strong&gt;，因为一次只能处理一个I/O操作（厨师一次只能准备一个汉堡）。Node，不是这样的，它是&lt;strong&gt;非阻塞&lt;/strong&gt;性质，就是说它能一次准备很多汉堡。&lt;/p&gt;
&lt;p&gt;多谢Node非阻塞的性质，让我们可以实现以下这么有趣事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;控制&lt;a href=&quot;http://nodecopter.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Quadcopters飞行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;编写IRC谈天机器人&lt;/li&gt;
&lt;li&gt;制作一个&lt;a href=&quot;http://www.youtube.com/watch?v=jf-cEB3U2UQ&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;双脚走路的机器人&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;核心模块&quot;&gt;&lt;a href=&quot;#核心模块&quot; class=&quot;headerlink&quot; title=&quot;核心模块&quot;&gt;&lt;/a&gt;核心模块&lt;/h2&gt;&lt;p&gt;首先，你需要在电脑上安装Node。Node安装很简单，只需浏览&lt;a href=&quot;http://nodejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nodejs.org&lt;/a&gt;和点击&lt;code&gt;Install&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Node拥有一组核心模块（通常被称为&lt;code&gt;Node核心&lt;/code&gt;）提供公共 API 让你编程时候调用。我们可以调用&lt;code&gt;fs&lt;/code&gt;模块来操作文件系统。当我们要进行网络操作时候，我们会调用网络模块，例如：&lt;code&gt;net&lt;/code&gt;（TCP），&lt;code&gt;http&lt;/code&gt;，&lt;code&gt;dgram&lt;/code&gt;（UDP）。&lt;/p&gt;
&lt;p&gt;除了&lt;code&gt;fs&lt;/code&gt;和网络模块之外，Node核心还有很多其他的核心模块。如&lt;code&gt;dns&lt;/code&gt;模块用来异步解析DNS查询。&lt;code&gt;os&lt;/code&gt;模块可以用来收集操作系统的资讯，如tempdir的路径。&lt;code&gt;buffer&lt;/code&gt;模块可以处理二进制数据。还有些模块可以处理URL和路径，如：&lt;code&gt;url&lt;/code&gt;，&lt;code&gt;querystring&lt;/code&gt;和&lt;code&gt;path&lt;/code&gt;等等。大部分的核心模块都支持Node的主要使用目标：快速编写能够进行文件或网络操作的程序。&lt;/p&gt;
&lt;p&gt;Node通过回调，事件，数据流和模块来控制I/O。如果你学会了这四样东西如何工作，那么你就能够灵活使用任何核心模块，而且你还会懂得模块的基本接口。&lt;/p&gt;
&lt;h2 id=&quot;回调函数&quot;&gt;&lt;a href=&quot;#回调函数&quot; class=&quot;headerlink&quot; title=&quot;回调函数&quot;&gt;&lt;/a&gt;回调函数&lt;/h2&gt;&lt;p&gt;如果想真的弄明白怎么使用Node，回调函数是你需要了解的东西中最重要的，没有之一。回调函数倒不是有了Node后才有的，只不过这功能是JavaScript中尤其好用的一个。&lt;/p&gt;
&lt;p&gt;回调函数是指非同步执行的，或者是在将来某个时间才会被执行的函数。同步代码运行的顺序是从上至下，而非同步的程序却是在不同的时间运行不同的函数，这些事件都基于某些某同步函数的顺序和运行速度，包括HTTP请求和从文件系统里读取内容等等。&lt;/p&gt;
&lt;p&gt;这种同步和非同步之间的差异可能会让人比较困惑，因为看一个函数是不是非同步，很大程度上取决于具体的情况。下面是一个很简单的同步函数的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myNumber = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addOne&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; myNumber++ &amp;#125; &lt;span class=&quot;comment&quot;&gt;// 定义函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;addOne() &lt;span class=&quot;comment&quot;&gt;// run the function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(myNumber) &lt;span class=&quot;comment&quot;&gt;// 结果显示2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码定义了一个函数，然后调用了它，之间没有任何停留。当该函数被调用时，它立即把那个数字加上1，所以我们可以预见到，调用过该函数后，那个数字的值会变成2。&lt;/p&gt;
&lt;p&gt;现在假设我们把数字存在一个叫&lt;code&gt;number.text&lt;/code&gt;的文件里：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// require是Node提供的一个特别函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myNumber = &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 数字被存在文件里，因此我们并不知道它的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addOne&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fs.readFile(&lt;span class=&quot;string&quot;&gt;&#39;./number.txt&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doneReading&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, fileContents&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myNumber = &lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(fileContents)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myNumber++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;addOne()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(myNumber) &lt;span class=&quot;comment&quot;&gt;// 结果显示undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为什么这些显示出来的值是&lt;code&gt;undefined&lt;/code&gt;？因为在上面的代码中，我们用了&lt;code&gt;fs.readFile&lt;/code&gt;这个方法，而它恰好是个非同步方法。一般来说，需要和硬盘沟通或是从通信网络获得数据的，都是非同步的。只是需要从内存里或CPU里读些东西的话，就是同步的。这是因为I/O（输入输出）是非常非常非常慢的。如果要大概形容一下，从硬盘里读取大概比从内存里读取慢了10万倍。&lt;/p&gt;
&lt;p&gt;当这个程序运行的时候，所有的函数都马上被定义，但它们不是马上都被执行的。这是非同步编程的一个基础概念。当&lt;code&gt;addOne&lt;/code&gt;被调用的时候，Node执行&lt;code&gt;readFile&lt;/code&gt;这个方法，但不等到&lt;code&gt;readFile&lt;/code&gt;结束，它就继续进行下一个不需要等待就能执行的函数了。如果没有可以执行的东西了，Node要么会停下来，等待文件读取或是网络通讯结束，要么就结束运行，返回到命令行。&lt;/p&gt;
&lt;p&gt;当&lt;code&gt;readFile&lt;/code&gt;终于把文件读完的时候（需要的时间从几毫秒到几秒到几分钟不等，要看硬盘有多快），Node会执行&lt;code&gt;doneReading&lt;/code&gt;这个函数，并把报的错（如果读文件的时候有报错的话）和文件的内容传给它。&lt;/p&gt;
&lt;p&gt;在上面的程序中，之所以会显示&lt;code&gt;undefine&lt;/code&gt;，是因为我们的代码并没有在任何地方注明了要在文件读取完成后再&lt;code&gt;console.log&lt;/code&gt;出数字。&lt;/p&gt;
&lt;p&gt;如果你有一些想要反复执行的代码，你应该做的第一件事就是把这些代码放在一个函数里。然后，在你需要执行那些代码的时候，调用这个函数就好了。你给函数起的名字最好能让人一看就知道这个函数是做什么的。&lt;/p&gt;
&lt;p&gt;回调函数，不过是在将来某个时间被执行的函数。要理解回调函数，很关键的一点是它被使用的时机。你使用回调函数的前提是，你不知道&lt;strong&gt;什么时候&lt;/strong&gt;某个非同步进程会结束，但知道这个进程会在&lt;strong&gt;哪里&lt;/strong&gt;结束————就在那个非同步函数的最后一行！你在什么地方声明这些函数并不重要，重要的是这些函数之间的逻辑顺序。把代码分装进各个函数之后，如果一个函数的执行取决于另一个函数何时结束，就该使用回调函数了。&lt;/p&gt;
&lt;p&gt;上面代码中的&lt;code&gt;fs.readFile&lt;/code&gt;方法是Node自带的，这个方法是非同步的，而且要花费很长时间。想想看它要做多少事情：它要进入操作系统，进入文件系统，文件系统可是在硬盘上的，硬盘可能转得飞快，也可能根本就不转。然后它要用激光读出数据，并把数据传回你的JavaScript程序。当你给了它一个回调函数后，它就可以在成功从文件系统中取得数据以后，调用那个回调函数。它会把数据放在一个变量里，交给你给的回调函数，我们给这个变量起的名字叫做&lt;code&gt;fileContents&lt;/code&gt;，因为变量中包含的是读取到的文件内容。&lt;/p&gt;
&lt;p&gt;想想看这个教程刚开始时的那个餐厅的例子。在很多餐厅，在你点的菜上来之前，服务生会放一个数字牌在你桌上。这个和回调函数很类似。回调函数的作用就是告诉服务器在你的芝士汉堡好了后要做些什么。&lt;/p&gt;
&lt;p&gt;现在，让我们把&lt;code&gt;console.log&lt;/code&gt;放进一个函数里作回调函数使用吧。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myNumber = &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addOne&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;callback&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fs.readFile(&lt;span class=&quot;string&quot;&gt;&#39;./number.txt&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doneReading&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, fileContents&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myNumber = &lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(fileContents)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myNumber++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    callback()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;logMyNumber&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(myNumber)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;addOne(logMyNumber)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在&lt;code&gt;logMyNumber&lt;/code&gt;这个函数可以被传给&lt;code&gt;addOne&lt;/code&gt;作为回调函数了。在&lt;code&gt;readFile&lt;/code&gt;完成后，&lt;code&gt;callback&lt;/code&gt;这个变量会被执行（也就是&lt;code&gt;callback()&lt;/code&gt;)。只有函数才能被执行，所以如果你提供一个不是函数的东西，程序会出错。&lt;/p&gt;
&lt;p&gt;在JavaScript里，当函数被调用，其包含的代码会立刻被执行。在这个例子里，&lt;code&gt;console.log&lt;/code&gt;会被执行，因为&lt;code&gt;callback&lt;/code&gt;其实就是&lt;code&gt;logMyNumber&lt;/code&gt;。要记得，你&lt;em&gt;定义&lt;/em&gt;了一个函数，不代表它会执行！你一定得&lt;em&gt;调用&lt;/em&gt;它才行。&lt;/p&gt;
&lt;p&gt;如果要更细地分析一下这个例子，下面是按时间顺序排列的所有发生的事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1: 代码被分析，这时，如果有任何语法错误，程序会停止并报错。&lt;/li&gt;
&lt;li&gt;2: &lt;code&gt;addOne&lt;/code&gt;被调用，以&lt;code&gt;logMyName&lt;/code&gt;作为它的回调函数，也就是我们想在&lt;code&gt;addOne&lt;/code&gt;结束后执行的函数。接下来，非同步的&lt;code&gt;fs.readFile&lt;/code&gt;马上开始运行。这个部分要花上点时间。&lt;/li&gt;
&lt;li&gt;3: Node暂时没事做的，于是它就闲下来等待着&lt;code&gt;readFile&lt;/code&gt;结束。&lt;/li&gt;
&lt;li&gt;4: &lt;code&gt;readFile&lt;/code&gt;结束了，&lt;code&gt;doneReading&lt;/code&gt;这个函数被调用，它把数字加上1然后马上调用回调函数————也就是我们传给&lt;code&gt;addOne&lt;/code&gt;的&lt;code&gt;logMyNumber&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也许关于回调函数最难理解的部分是，为什么函数可以被存在变量里被传来传去，而且还有着变来变去的名字。要让你的代码更容易被看懂，给你的函数起简单明了的名字是很重要的一部分。总的来说，在使用Node时，如果你看见一个变量叫做&lt;code&gt;callback&lt;/code&gt;或是它的缩写&lt;code&gt;cb&lt;/code&gt;，你差不多可以确定它就是一个函数。&lt;/p&gt;
&lt;p&gt;你可能听过一个术语叫“事件驱动式编程”，或者叫“事件循环”。&lt;code&gt;readFile&lt;/code&gt;这类的函数就利用了“事件循环”。Node首先开始运行&lt;code&gt;readFile&lt;/code&gt;，并等待着&lt;code&gt;readFile&lt;/code&gt;发回一个事件。在Node等待的这段时间，它可以继续运行其他的东西。在Node里有一个列表，里面记下了所有开始运行却还没有发回结束信号的事，Node就一遍遍循环检查这个列表，看看有没有事情完成了。它们运行完之后，就会被Node处理掉，也就是说，需要运行的回调函数会被运行。&lt;/p&gt;
&lt;p&gt;下面是上面例子的伪代码写法：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addOne&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;thenRunThisFunction&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  waitAMinuteAsync(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;waitedAMinute&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    thenRunThisFunction()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;addOne(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;thisGetsRunAfterAddOneFinishes&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;假设你有三个非同步函数：&lt;code&gt;a&lt;/code&gt;、&lt;code&gt;b&lt;/code&gt;，和&lt;code&gt;c&lt;/code&gt;。它们要花上一分钟来运行，运行完了之后会调用一个回调函数（函数以第一个参数的形式被传进函数）。如果你想让Node先运行a，a运行完后运行b，b运行完后再运行c，那么程序是下面这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  b(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当这段代码被运行时，&lt;code&gt;a&lt;/code&gt;马上就会被运行，一分钟后&lt;code&gt;a&lt;/code&gt;结束运行，&lt;code&gt;b&lt;/code&gt;开始执行，再一分钟后，&lt;code&gt;b&lt;/code&gt;结束运行，&lt;code&gt;c&lt;/code&gt;开始运行。最后，也就是三分钟后，Node会停止运行，因为所有事都运行完了。上面的代码可能看起来没那么漂亮，但重点是，如果有些代码需要在某些非同步的事情运行完了之后再运行，你需要做的是把那些代码放进一个函数，当作回调函数传给非同步函数，以表示回调函数中的代码要依赖非同步的部分运行结束才能运行。&lt;/p&gt;
&lt;p&gt;Node要求你用非线性的思维思考。看看下面这两件事：&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;process&lt;/span&gt; that &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你只是不假思索地把这两件事改成伪代码，你会这么写：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; file = readFile()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;processFile&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(file)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种线性的代码不是Node的风格。（线性是指一步接一步、按照顺序地）。如果上面的代码被运行了。那么&lt;code&gt;readFile&lt;/code&gt;和&lt;code&gt;processFile&lt;/code&gt;会同时被调用。这根本说不通，因为&lt;code&gt;reafFile&lt;/code&gt;要花上一阵子时间才能运行结束。正确的做法是，表达清楚&lt;code&gt;processFile&lt;/code&gt;是要依赖&lt;code&gt;readFile&lt;/code&gt;结束才能运行的。这就是回调函数的作用了！因为JavaScript的特点，有好几种方法可以表达这种依赖性：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fs.readFile(&lt;span class=&quot;string&quot;&gt;&#39;movie.mp4&#39;&lt;/span&gt;, finishedReading)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;finishedReading&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;error, movieData&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// do something with the movieData&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不过你这样写也可以，照样会成功运行：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;finishedReading&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;error, movieData&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// do something with the movieData&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fs.readFile(&lt;span class=&quot;string&quot;&gt;&#39;movie.mp4&#39;&lt;/span&gt;, finishedReading)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;甚至像下面这样：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fs.readFile(&lt;span class=&quot;string&quot;&gt;&#39;movie.mp4&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;finishedReading&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;error, movieData&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// do something with the movieData&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;事件&quot;&gt;&lt;a href=&quot;#事件&quot; class=&quot;headerlink&quot; title=&quot;事件&quot;&gt;&lt;/a&gt;事件&lt;/h2&gt;&lt;p&gt;在Node中如果你加载了&lt;a href=&quot;http://nodejs.org/api/events.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;events&lt;/a&gt;模块， 就可以用被称作&lt;code&gt;event emitter&lt;/code&gt;（事件分发器）的功能。 Node在它的API中使用这一功能分发事件。&lt;/p&gt;
&lt;p&gt;在编程中运用&lt;code&gt;事件&lt;/code&gt;是一种常见的方法。它还有一个我们更为熟知的名字&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;观察者模式&lt;/a&gt;，或者&lt;code&gt;发布／监听&lt;/code&gt;模式。在回调函数的模式中，调用回调函数的命令与等待回调函数的命令间的关系是一一对应的，而在事件模式中这两种命令的关系可以是多对多的。&lt;/p&gt;
&lt;p&gt;理解事件最简单的方式，就是把它当成一个你监听的东西。如果说在回调函数里面我们的逻辑是&lt;code&gt;先做X，再做Y&lt;/code&gt;，那么在事件中我们的逻辑是&lt;code&gt;当X发生时，做Y&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;以下是一些常见的用事件取代回调函数的例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要向所有听众广播的聊天室&lt;/li&gt;
&lt;li&gt;需要及时了解玩家上线、下线、运动、设计、跳跃等动作的游戏服务器&lt;/li&gt;
&lt;li&gt;需要能让开发者执行&lt;code&gt;.on(&amp;#39;jump&amp;#39;, function() {})&lt;/code&gt;这种命令的游戏引擎&lt;/li&gt;
&lt;li&gt;能够执行&lt;code&gt;.on(&amp;#39;incomingRequest&amp;#39;)&lt;/code&gt; 或 &lt;code&gt;.on(&amp;#39;serverError&amp;#39;)&lt;/code&gt;这一API的低端web服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果我们想只用回调函数写一个连接聊天服务器的模块的话，代码会长这样：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; chatClient = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;my-chat-client&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onConnect&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// have the UI show we are connected&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onConnectionError&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;error&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// show error to the user&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onDisconnect&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// tell user that they have been disconnected&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onMessage&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;message&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// show the chat room message in the UI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chatClient.connect(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;http://mychatserver.com&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  onConnect,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  onConnectionError,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  onDisconnect,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  onMessage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;正如你所见，用回调函数写会变得十分笨拙。你需要把所有的功能函数按特定的顺序传给&lt;code&gt;.connect&lt;/code&gt;来执行。但是将上面所写的功能用事件来实现，就会变成这样：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; chatClient = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;my-chat-client&#39;&lt;/span&gt;).connect()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chatClient.on(&lt;span class=&quot;string&quot;&gt;&#39;connect&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// have the UI show we are connected&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chatClient.on(&lt;span class=&quot;string&quot;&gt;&#39;connectionError&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// show error to the user&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chatClient.on(&lt;span class=&quot;string&quot;&gt;&#39;disconnect&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// tell user that they have been disconnected&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chatClient.on(&lt;span class=&quot;string&quot;&gt;&#39;message&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// show the chat room message in the UI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种写法和回调函数很像，但是运用了高大上的&lt;code&gt;.on&lt;/code&gt;功能，它会让一个回调函数‘监听’一个事件。 这意味着你可以在&lt;code&gt;chatClient&lt;/code&gt;中选择任意一个想要监听的事件。 你甚至可以为多个回调函数监听同一个事件：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; chatClient = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;my-chat-client&#39;&lt;/span&gt;).connect()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chatClient.on(&lt;span class=&quot;string&quot;&gt;&#39;message&#39;&lt;/span&gt;, logMessage)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chatClient.on(&lt;span class=&quot;string&quot;&gt;&#39;message&#39;&lt;/span&gt;, storeMessage)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;logMessage&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;message&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(message)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;storeMessage&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;message&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  myDatabase.save(message)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;流&quot;&gt;&lt;a href=&quot;#流&quot; class=&quot;headerlink&quot; title=&quot;流&quot;&gt;&lt;/a&gt;流&lt;/h2&gt;&lt;p&gt;在早期的node项目中，文件系统和网络API有各自处理I/O流的方式。比如，在文件系统中，文件有一个‘文件描述器’的东西，因此&lt;code&gt;fs&lt;/code&gt;模块需要调用额外的逻辑来跟踪这个东西。然而在网络模块中根本没有’xx描述器‘这样的概念。尽管在语义上有像这样较小的区别，在最底层这两种模块（文件系统、网络模块）在重复着同样的数据读写操作。Node的维护们很快意识到这样的重复很容易迷惑开发者，于是他们造了这么个叫&lt;code&gt;流&lt;/code&gt;（Stream）的东西，使网络与文件系统的代码可以同样工作。&lt;/p&gt;
&lt;p&gt;Node的理念就是以更简单的方式来处理文件系统和网络，所有理所应当的应该有一个通用的模式，可以在不同的场景中运用。好消息是，类似的大多数模式（尽管数量很少）现在已经被认为node在未来不会去更改。&lt;/p&gt;
&lt;p&gt;已经有两个很棒的资源可以用来学习node的流对象。一个叫‘stream-adventure’（参考‘&lt;a href=&quot;#了解Node&quot;&gt;了解Node&lt;/a&gt;’部分),另一个叫‘Stream Handbook’。&lt;/p&gt;
&lt;h3 id=&quot;Stream-Handbook&quot;&gt;&lt;a href=&quot;#Stream-Handbook&quot; class=&quot;headerlink&quot; title=&quot;Stream Handbook&quot;&gt;&lt;/a&gt;Stream Handbook&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/substack/stream-handbook#introduction&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stream-handbook&lt;/a&gt; 是一个与本项目相似的，包含所有你需要、想要了解的有关流对象的内容的教程。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/substack/stream-handbook&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://github.com/maxogden/art-of-node/raw/master/stream-handbook.png&quot; alt=&quot;stream-handbook&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;模块&quot;&gt;&lt;a href=&quot;#模块&quot; class=&quot;headerlink&quot; title=&quot;模块&quot;&gt;&lt;/a&gt;模块&lt;/h2&gt;&lt;p&gt;Node的核心是由许多模块（modules）组成，像底层的&lt;a href=&quot;#事件&quot;&gt;事件&lt;/a&gt;和&lt;a href=&quot;#流&quot;&gt;流&lt;/a&gt;，高一些层次的&lt;code&gt;http&lt;/code&gt;和&lt;code&gt;crypto&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;Node有意被设计成这样，使它的核心模块轻量化，并注重于提供跨平台的处理普通I/O协议和类型的最基本工具。&lt;/p&gt;
&lt;p&gt;除此之外，你可以在&lt;a href=&quot;https://npmjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;npm&lt;/a&gt;上找到其它需要了解的东西。任何人都可以创建一个新的模块，添加一些功能，并发布到&lt;code&gt;npm&lt;/code&gt;上。到目前为止，npm上已经有196,950个模块可供下载。&lt;/p&gt;
&lt;h3 id=&quot;如何找到心怡的模块&quot;&gt;&lt;a href=&quot;#如何找到心怡的模块&quot; class=&quot;headerlink&quot; title=&quot;如何找到心怡的模块&quot;&gt;&lt;/a&gt;如何找到心怡的模块&lt;/h3&gt;&lt;p&gt;想象一下你在试图把一个PDF文件转换成一个TXT文本。最好的方式就是执行这样一个搜索命令&lt;code&gt;npm search pdf&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/maxogden/art-of-node/raw/master/npm-search.png&quot; alt=&quot;pdfsearch&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里有数以千计的结果！ npm十分热门，所以通常你都可以找到许多可能的解决方案。 如果你把以上的搜索结果浓缩一下（比如过滤掉PDF生成模块），你会得到这样的一些结果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/galkahana/HummusJS/wiki/Features&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hummus&lt;/a&gt; - c++ pdf manipulator&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/steelThread/mimeograph&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mimeograph&lt;/a&gt; - api on a conglomeration of tools (poppler, tesseract, imagemagick etc)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://npmjs.org/package/pdftotextjs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pdftotextjs&lt;/a&gt; - wrapper around &lt;a href=&quot;https://en.wikipedia.org/wiki/Pdftotext&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pdftotext&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://npmjs.org/package/pdf-text-extract&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pdf-text-extract&lt;/a&gt; - another wrapper around pdftotext&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://npmjs.org/package/pdf-extract&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pdf-extract&lt;/a&gt; - wrapper around pdftotext, pdftk, tesseract, ghostscript&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://npmjs.org/package/pdfutils&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pdfutils&lt;/a&gt; - poppler wrapper&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://npmjs.org/package/scissors&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;scissors&lt;/a&gt; - pdftk, ghostscript wrapper w/ high level api&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://npmjs.org/package/textract&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;textract&lt;/a&gt; - pdftotext wrapper&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fagbokforlaget/pdfiijs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pdfiijs&lt;/a&gt; - pdf to inverted index using textiijs and poppler&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/modesty/pdf2json/blob/master/readme.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pdf2json&lt;/a&gt; - pure js pdf to json&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这之中许多模块都有重复的功能，并且使用了不同的API。很多模块可能会依赖外部的库，你需要先安装这些库（比如 &lt;code&gt;apt-get install poppler&lt;/code&gt;）才能使用这些模块。&lt;/p&gt;
&lt;p&gt;以下是对上述这些模块的一些说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pdf2json&lt;/code&gt;是唯一一个用纯JavaScript写的模块，所以他没有依赖并且很容易安装。特别是在一些低功耗的设备上，像树莓派，或者像Windoes这样没有跨平台库支持的操作系统。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mimeograph&lt;/code&gt;, &lt;code&gt;hummus&lt;/code&gt; 和&lt;code&gt;pdf-extract&lt;/code&gt; ，这几个模块集合了许多底层的模块，并抽象出高层的API&lt;/li&gt;
&lt;li&gt;许多模块实际上都是在unix命令后工具&lt;code&gt;pdftotext&lt;/code&gt;/&lt;code&gt;poppler&lt;/code&gt;上搭建的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们来比较一下&lt;code&gt;pdftotextjs&lt;/code&gt; 和 &lt;code&gt;pdf-text-extract&lt;/code&gt;这两个工具，他们都是在&lt;code&gt;pdftotext&lt;/code&gt;的基础上打包而成的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/maxogden/art-of-node/raw/master/pdf-modules.png&quot; alt=&quot;pdf-modules&quot;&gt;&lt;/p&gt;
&lt;p&gt;这两个模块:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最近都有更新&lt;/li&gt;
&lt;li&gt;有github的项目链接（这一点很重要！）&lt;/li&gt;
&lt;li&gt;有说明文档&lt;/li&gt;
&lt;li&gt;每周都有一定的新安装用户&lt;/li&gt;
&lt;li&gt;非常宽松的使用许可（所有人都可以使用）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;仅依靠&lt;code&gt;package.json&lt;/code&gt;文件和模块的统计数据很难说哪一个最正确的选择。所以我们来对比一下说明文档吧：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/maxogden/art-of-node/raw/master/pdf-readmes.png&quot; alt=&quot;pdf-readmes&quot;&gt;&lt;/p&gt;
&lt;p&gt;两个文档都有简单的介绍，CI编译通过的标志，安装命令，清晰的例子和一些测试命令。赞！但是我们要选哪一个呢？我们来对比一下代码吧：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/maxogden/art-of-node/raw/master/pdf-code.png&quot; alt=&quot;pdf-code&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pdftotextjs&lt;/code&gt; 有110行代码，而&lt;code&gt;pdf-text-extract&lt;/code&gt;则只有40行。其实这两个模块最核心的操作可以归结为这一行代码：&lt;/p&gt;
&lt;figure class=&quot;highlight lasso&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; child = shell.exec(&lt;span class=&quot;string&quot;&gt;&#39;pdftotext &#39;&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;self&lt;/span&gt;.options.additional.&lt;span class=&quot;keyword&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过这一点能判断出哪一个更好吗？很难说诶！所以&lt;em&gt;读&lt;/em&gt;代码再下结论是很重要的。如果你找到了想要的模块，执行&lt;code&gt;npm star modulename&lt;/code&gt;来给你喜欢的模块一个正面的反馈信息吧。&lt;/p&gt;
&lt;h3 id=&quot;模块开发流程&quot;&gt;&lt;a href=&quot;#模块开发流程&quot; class=&quot;headerlink&quot; title=&quot;模块开发流程&quot;&gt;&lt;/a&gt;模块开发流程&lt;/h3&gt;&lt;p&gt;npm和大多数的包管理软件不同，它会将模块安装在另一个已有模块的目录中。这句话可能很难以理解，但知道这是npm成功的关键就好。&lt;/p&gt;
&lt;p&gt;许多包管理软件会全局安装。比如你在Debian系统上执行&lt;code&gt;apt-get install couchdb&lt;/code&gt;，apt-get会试图安装最新的CouchDB。如果你再试图安装一个依赖旧版本CouchDB的软件，你就得卸载掉新的版本，再安装旧版本的CouchDB。你无法同时保留新旧两个版本的CouchDB，因为Debian(apt-get)只知道将软件安到同一个位置。&lt;/p&gt;
&lt;p&gt;当然这不是Debian一个系统的错，绝大多数语言的包管理软件都这样。 为了解决这种全局依赖的问题，已经有了许多虚拟环境的项目被创建出来。比如针对Python的 &lt;a href=&quot;http://python-guide.readthedocs.org/en/latest/dev/virtualenvs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;virtualenv&lt;/a&gt;，或者针对Ruby的&lt;a href=&quot;http://bundler.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bundler&lt;/a&gt;。然而这些只是把你的环境配置划分成不同的虚拟环境，每个工程对应一个，但实际上每个环境配置依旧是全局安装的。而且虚拟环境不总是能解决问题，有时候只是增加了多一层的复杂度。&lt;/p&gt;
&lt;p&gt;用npm来安装全局模块是反人类的。就像你不应该在你的JavaScript代码中使用全局变量一样。（除非你需要一个可执行的二进制文件集成进&lt;code&gt;PATH&lt;/code&gt;中，但你不总需要这样做－－在后面我们会解释这一点）。&lt;/p&gt;
&lt;h4 id=&quot;require命令是如何工作的&quot;&gt;&lt;a href=&quot;#require命令是如何工作的&quot; class=&quot;headerlink&quot; title=&quot;require命令是如何工作的&quot;&gt;&lt;/a&gt;&lt;code&gt;require&lt;/code&gt;命令是如何工作的&lt;/h4&gt;&lt;p&gt;当我们加载一个模块的时候，我们调用&lt;code&gt;require(&amp;#39;some_module&amp;#39;)&lt;/code&gt;，以下是在node中会发生的事情：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果&lt;code&gt;some_module.js&lt;/code&gt;文件在当前目录下，node会加载它，否则&lt;/li&gt;
&lt;li&gt;node会在当前目录下寻找 &lt;code&gt;node_modules&lt;/code&gt; 文件夹，然后在其中找&lt;code&gt;some_module&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果还没找到，node会跳到上一层文件夹，然后重复步骤2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这一操作会不断循环直到node找到根目录是还没有找的这个模块，在那之后node回去找全局安装时的文件夹（比如Mac OS系统上的 &lt;code&gt;/usr/local/node_modules&lt;/code&gt;），如果还没有找到这个&lt;code&gt;some_module&lt;/code&gt;，node会报错。&lt;/p&gt;
&lt;p&gt;这里有一个上述操作的可视化说明：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/maxogden/art-of-node/raw/master/mod-diagram-01.png&quot; alt=&quot;mod-diagram-01&quot;&gt;&lt;/p&gt;
&lt;p&gt;当前的工作目录为&lt;code&gt;subsubfolder&lt;/code&gt;，并且&lt;code&gt;require(&amp;#39;foo&amp;#39;)&lt;/code&gt;被执行时，node会查找 &lt;code&gt;subsubsubfolder/node_modules&lt;/code&gt;这个子目录。在这个例子中，由于这个子目录被错误地命名为&lt;code&gt;my_modules&lt;/code&gt;了，因而node找不到它，只好跳到&lt;code&gt;subsubfolder&lt;/code&gt;的上一级目录&lt;code&gt;subfolder_B&lt;/code&gt;寻找&lt;code&gt;subfolder_B/node_modules&lt;/code&gt;，然而这个文件夹不存在；于是node再往上一级目录寻找，在&lt;code&gt;subfolder_B&lt;/code&gt;的上一级目录&lt;code&gt;folder&lt;/code&gt;中找到了&lt;code&gt;folder/node_modules&lt;/code&gt;，&lt;em&gt;并且&lt;/em&gt;&lt;code&gt;foo&lt;/code&gt;文件夹在其中。至此搜索便结束了，但如果&lt;code&gt;foo&lt;/code&gt;并不在那个目录里，node会继续往上一层目录搜索。&lt;/p&gt;
&lt;p&gt;注意这点，我们在&lt;code&gt;subfolder_B&lt;/code&gt;中没找到&lt;code&gt;foo&lt;/code&gt;模块并向上一级目录寻找的时候，并不会向同一级的 &lt;code&gt;subfolder_A/node_modules&lt;/code&gt;中寻找。在它的搜索树中只有 &lt;code&gt;folder/node_modules&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;使用npm的一个好处就是，模块可以安装自己依赖的特定版本模块。 在这个例子中，&lt;code&gt;foo&lt;/code&gt;模块特别流行，以至于我们将三个版本安装在不同位置。这样做的原因是调用它们的模块依赖特定版本的&lt;code&gt;foo&lt;/code&gt;，比如&lt;code&gt;folder&lt;/code&gt;依赖&lt;code&gt;foo@0.0.1&lt;/code&gt;, &lt;code&gt;subfolder_A&lt;/code&gt; 依赖 &lt;code&gt;foo@0.2.1&lt;/code&gt; 等等.&lt;/p&gt;
&lt;p&gt;如果我们把刚才的那个错误的文件夹名称改过来，从&lt;code&gt;my_modules&lt;/code&gt;改成&lt;code&gt;node_modules&lt;/code&gt;，那么搜索过程就会变成这样:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/maxogden/art-of-node/raw/master/mod-diagram-02.png&quot; alt=&quot;mod-diagram-02&quot;&gt;&lt;/p&gt;
&lt;p&gt;为了测试node到底加载了哪个模块，可以执行&lt;code&gt;require.resolve(&amp;#39;some_module&amp;#39;)&lt;/code&gt; 命令，这会告诉你哪个文件路径下的模块被node找到并调用了。&lt;code&gt;require.resolve&lt;/code&gt; 非常有用，尤其是在确认你&lt;em&gt;认为&lt;/em&gt;被夹在的模块是&lt;em&gt;实际上&lt;/em&gt;被加载的模块的时候－－有时候一个不同版本的模块可能被存在了被更先查找的位置，导致你的代码调用了错误版本的模块。&lt;/p&gt;
&lt;h3 id=&quot;如何写一个模块&quot;&gt;&lt;a href=&quot;#如何写一个模块&quot; class=&quot;headerlink&quot; title=&quot;如何写一个模块&quot;&gt;&lt;/a&gt;如何写一个模块&lt;/h3&gt;&lt;p&gt;现在你已经知道了如何找一个模块了，在这之后你就可以开始开发自己的模块了！&lt;/p&gt;
&lt;h4 id=&quot;The-simplest-possible-module&quot;&gt;&lt;a href=&quot;#The-simplest-possible-module&quot; class=&quot;headerlink&quot; title=&quot;The simplest possible module&quot;&gt;&lt;/a&gt;The simplest possible module&lt;/h4&gt;&lt;p&gt;Node的模块十分的轻量化。这里有一个最简单的node模块：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;number-one&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;index.js&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;默认情况下，当你调用&lt;code&gt;require(&amp;#39;module&amp;#39;)&lt;/code&gt;时node会试图加载&lt;code&gt;module/index.js&lt;/code&gt;，除非你在&lt;code&gt;package.json&lt;/code&gt;中设定了&lt;code&gt;main&lt;/code&gt;一项内容指向你的代码，不然用的名称的文件无法被node识别。&lt;/p&gt;
&lt;p&gt;把这两个文件放到&lt;code&gt;number-one&lt;/code&gt;目录下（&lt;code&gt;package.json&lt;/code&gt;中的&lt;code&gt;id&lt;/code&gt;一项必须和目录的名称相同），然后你就可以加载他们了。&lt;/p&gt;
&lt;p&gt;调用&lt;code&gt;require(&amp;#39;number-one&amp;#39;)&lt;/code&gt; 这一命令会返回你在模块中&lt;code&gt;module.exports&lt;/code&gt;输出的内容：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/maxogden/art-of-node/raw/master/simple-module.png&quot; alt=&quot;simple-module&quot;&gt;&lt;/p&gt;
&lt;p&gt;一个更快捷的创建模块的方法是，执行以下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir my_module&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; my_module&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote add git@github.com:yourusername/my_module.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行&lt;code&gt;npm init&lt;/code&gt;会生成一个&lt;code&gt;package.json&lt;/code&gt;，如果你是在一个&lt;code&gt;git&lt;/code&gt;项目里执行，它还会在&lt;code&gt;package.json&lt;/code&gt;中自动帮你把&lt;code&gt;repositories&lt;/code&gt;设成你的git repo地址！&lt;/p&gt;
&lt;h4 id=&quot;添加依赖项&quot;&gt;&lt;a href=&quot;#添加依赖项&quot; class=&quot;headerlink&quot; title=&quot;添加依赖项&quot;&gt;&lt;/a&gt;添加依赖项&lt;/h4&gt;&lt;p&gt;一个模块可以添加其它在npm上或是在Github上的模块到他的配置文件&lt;code&gt;package.json&lt;/code&gt;中的&lt;code&gt;dependencies&lt;/code&gt;项。如果你想安装一个新的依赖项，并把它自动添加到&lt;code&gt;package.json&lt;/code&gt;中，在你的模块的根目录中执行这个命令：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install --save request&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个命令会安装&lt;code&gt;request&lt;/code&gt;模块到最近的&lt;code&gt;node_modules&lt;/code&gt;文件夹中，并会把&lt;code&gt;package.json&lt;/code&gt;改成这样：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;number-one&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;request&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~2.22.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;默认情况下 &lt;code&gt;npm install&lt;/code&gt;会安装模块的最新版本。&lt;/p&gt;
&lt;h2 id=&quot;用npm在客户端开发&quot;&gt;&lt;a href=&quot;#用npm在客户端开发&quot; class=&quot;headerlink&quot; title=&quot;用npm在客户端开发&quot;&gt;&lt;/a&gt;用npm在客户端开发&lt;/h2&gt;&lt;p&gt;人们对npm有一个常见的错误观念，认为npm的名字中有一个Node，所以只能用于服务器端的JS模块。一派胡言！npm的全称是Node Packaged Modules，是由node为你打包过的模块。而模块本身可以是任何东西－－本质上只是一个被打包成.tar.gz的文件夹，和一个声明了模块版本和模块依赖项的配置文件&lt;code&gt;package.json&lt;/code&gt; （也包括依赖项的版本，这样对应版本的依赖项会被自动安装）。这是无穷无尽的－－模块可以有依赖，模块的依赖项也可以有依赖，依赖项的依赖项也可以有依赖。。。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://browserify.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;browserify&lt;/a&gt; 是一个用Node写的实用工具，可以讲任何node模块转换成可以在浏览器上运行的代码。当然，并不是所有模块都能工作（比如浏览器无法搭一个HTTP服务器），但是很多NPM上的模块&lt;em&gt;可以&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;你可以用&lt;a href=&quot;http://requirebin.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RequireBin&lt;/a&gt;来尝试在浏览器上使用npm的模块，这是一个&lt;a href=&quot;https://github.com/maxogden&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原作者&lt;/a&gt;写的应用，它在&lt;a href=&quot;https://github.com/jesusabdullah/browserify-cdn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Browserify-CDN&lt;/a&gt;的基础上完成。原作在RequireBin中使用了browserify，并通过HTTP返回输出结果（而不是通过命令后－－browserify通常都是用来干这个）&lt;/p&gt;
&lt;p&gt;试着将下面的代码粘贴到&lt;a href=&quot;http://requirebin.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RequireBin&lt;/a&gt;并点&lt;code&gt;preview&lt;/code&gt;按钮：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; reverse = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;ascii-art-reverse&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// makes a visible HTML console&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;console-log&#39;&lt;/span&gt;).show(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; coolbear =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;    (&#39;-^-/&#39;)  \n&quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;    `o__o&#39; ]  \n&quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;    (_Y_) _/  \n&quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;  _..`--&#39;-.`, \n&quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot; (__)_,--(__) \n&quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;     7:   ; 1 \n&quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;   _/,`-.-&#39; : \n&quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;  (_,)-~~(_,) \n&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setInterval(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(coolbear) &amp;#125;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  setInterval(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(reverse(coolbear)) &amp;#125;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者看这个&lt;a href=&quot;http://requirebin.com/?gist=6031068&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;更复杂的例子&lt;/a&gt;（可以随意改变它的颜色）：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://requirebin.com/embed?gist=6031068&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://github.com/maxogden/art-of-node/raw/master/requirebin.png&quot; alt=&quot;requirebin&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;析薪杝矣&quot;&gt;&lt;a href=&quot;#析薪杝矣&quot; class=&quot;headerlink&quot; title=&quot;析薪杝矣&quot;&gt;&lt;/a&gt;析薪杝矣&lt;/h2&gt;&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;原文的标题是Going &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; Grain，大意是顺应着木材的纹理(刨木)，不违背它&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;此处的&lt;span class=&quot;string&quot;&gt;&#39;析薪杝矣&#39;&lt;/span&gt;出自詩·小雅：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	伐木掎矣，析薪杝矣&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;大意为，砍伐树木时,要撑住使大树不致突然倒下;劈木材,要依循木材的纹理,才比较容易&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;像任意一个顺手的工具一样，node非常强大，但也只适用于特定的应用场景。比如，Rails这个网络架构，非常适合做一些复杂的&lt;a href=&quot;(http://en.wikipedia.org/wiki/Business_logic&quot;&gt;框架&lt;/a&gt;)，比如用代码来构建生活中的业务对象：帐户、借贷、流程图、存货清单等等。虽然从技术上讲，用node可以完成同样的工作，但这并不是node的强项，node更适合去做一些处理I/O问题的工作。希望这个教程能够帮你获得对node适用方案的直觉。&lt;/p&gt;
&lt;h3 id=&quot;node外的世界&quot;&gt;&lt;a href=&quot;#node外的世界&quot; class=&quot;headerlink&quot; title=&quot;node外的世界&quot;&gt;&lt;/a&gt;node外的世界&lt;/h3&gt;&lt;p&gt;node只是一个处理文件系统和网络I/O的工具，它把更多有趣的功能留给第三方模块来处理。以下是node核心模块之外奇妙世界的一些介绍：&lt;/p&gt;
&lt;h4 id=&quot;网络框架&quot;&gt;&lt;a href=&quot;#网络框架&quot; class=&quot;headerlink&quot; title=&quot;网络框架&quot;&gt;&lt;/a&gt;网络框架&lt;/h4&gt;&lt;p&gt;有许多搭建在node之上的网络框架（框架是一种解决特定高层应用问题的功能集合），但是node自身并不是一个网络框架。一些搭建在node之上的网络框架有自己的特性、抽象和权衡，这些和node自身的理念与开发优先级不一定相同。&lt;/p&gt;
&lt;h4 id=&quot;编程语法&quot;&gt;&lt;a href=&quot;#编程语法&quot; class=&quot;headerlink&quot; title=&quot;编程语法&quot;&gt;&lt;/a&gt;编程语法&lt;/h4&gt;&lt;p&gt;Node适用Javascript的语法并且没有加以修饰。 Felix Geisendörfer针对node的风格有一篇很棒的&lt;a href=&quot;https://github.com/felixge/node-style-guide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;介绍&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;语言的抽象&quot;&gt;&lt;a href=&quot;#语言的抽象&quot; class=&quot;headerlink&quot; title=&quot;语言的抽象&quot;&gt;&lt;/a&gt;语言的抽象&lt;/h4&gt;&lt;p&gt;node用最简单的方式来完成任务。在Javascirpt中，你想把它做的越有趣，就会带来更大的复杂度。编程是有难度的，尤其是在写js的时候更有这种体会，因为你应对的每一个问题都可能有1000种解决方案。正是因为如此，node试图用最简单、通用的方式来解决问题。如果你在处理一个很复杂的问题，并且你并不满意node应用的‘vanilla JS’解决方案，你大可不用它，并且自己写一个模块，用你自己喜欢的方法来解决它。&lt;/p&gt;
&lt;p&gt;一个很棒的例子就是node中的回调函数。 早期node的一些实验中，有一个特性叫做‘promises’。它被用来使异步运行的代码看上去更线性。但是出于以下原因，这个特性后来被移除了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它比回调函数更复杂&lt;/li&gt;
&lt;li&gt;它可以让用户来选择应用（在npm上以第三方模块的形式发布）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;试着考虑node处理的最基本最通用的事情：读取一个文件，当你读一个文件的时候，你希望在诸如硬盘错误这种事件发生的时候能及时知道。如果node用了上述的’promises‘特性，那么每个人的代码就会变成这样：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fs.readFile(&lt;span class=&quot;string&quot;&gt;&#39;movie.mp4&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// do stuff with data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .error(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;error&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// handle error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这添加了复杂度，而且并不是所有人都想要这个特性。 node会用一个简单的回调函数来完成这两个独立的功能。其它的诸如此的规则还有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当没有错误的时候，对第一个参数返回null&lt;/li&gt;
&lt;li&gt;当有错误的时候，对第一个参数返回错误代码&lt;/li&gt;
&lt;li&gt;其它的变量可以用来做任何事情（node多数情况下在读写东西，所以这些变量通常被用来传数据或响应）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于上述规则写出来的回调函数则应是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fs.readFile(&lt;span class=&quot;string&quot;&gt;&#39;movie.mp4&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// handle error, do stuff with data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;线程-纤程-非事件的并发处理&quot;&gt;&lt;a href=&quot;#线程-纤程-非事件的并发处理&quot; class=&quot;headerlink&quot; title=&quot;线程/纤程/非事件的并发处理&quot;&gt;&lt;/a&gt;线程/纤程/非事件的并发处理&lt;/h4&gt;&lt;p&gt;注意：如果你并不知道这些词的含义，你可能会学Node学的更轻松一些。&lt;/p&gt;
&lt;p&gt;Node内部使用线程来加速操作，但是这些部分并不会暴露给用户。如果你是专业人员，并且对node的设计理念十分好奇的话，推荐你阅读这篇&lt;a href=&quot;http://nikhilm.github.com/uvbook/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;the design of libuv&lt;/a&gt;，这个是node使用的C++ I/O层。&lt;/p&gt;
&lt;h2 id=&quot;使用许可&quot;&gt;&lt;a href=&quot;#使用许可&quot; class=&quot;headerlink&quot; title=&quot;使用许可&quot;&gt;&lt;/a&gt;使用许可&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/maxogden/art-of-node/raw/master/CCBY.png&quot; alt=&quot;CCBY&quot;&gt;&lt;/p&gt;
&lt;p&gt;原文适用知识共享许可协议&lt;br&gt;&lt;a href=&quot;http://creativecommons.org/licenses/by/2.0/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://creativecommons.org/licenses/by/2.0/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;捐款图标来源于 &lt;a href=&quot;http://thenounproject.com/term/donate/285/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Noun Project&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;转自： &lt;a href=&quot;https://github.com/maxogden/art-of-node&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/maxogden/art-of-node&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Node-js入门&quot;&gt;&lt;a href=&quot;#Node-js入门&quot; class=&quot;headerlink&quot; title=&quot;Node.js入门&quot;&gt;&lt;/a&gt;Node.js入门&lt;/h2&gt;&lt;p&gt;本文档假定读者已经懂了以下的两样东西：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;懂得至少一种编程语
    
    </summary>
    
    
      <category term="Node" scheme="http://blog.yongyuan.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>350 个特性了解 ES6</title>
    <link href="http://blog.yongyuan.com/post/%20350%20%E4%B8%AA%E7%89%B9%E6%80%A7%E4%BA%86%E8%A7%A3%20ES6.html"/>
    <id>http://blog.yongyuan.com/post/ 350 个特性了解 ES6.html</id>
    <published>2016-03-07T16:00:00.000Z</published>
    <updated>2016-07-28T12:21:41.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ES6 - 也被叫做 Harmony、&lt;code&gt;es-next&lt;/code&gt;、ES2015，是这门语言最新的标准规范&lt;/li&gt;
&lt;li&gt;ES6 规范在 2015 年 6 月正式通过&lt;/li&gt;
&lt;li&gt;未来规范的版本将会按照 &lt;code&gt;ES[YYYY]&lt;/code&gt; 这种模式命名，比如：ES2016 对应的就是 ES7&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;年度发布时间&lt;/strong&gt;，没有被确定的功能会被放到下一个版本&lt;/li&gt;
&lt;li&gt;在 ES6 被确定之前，我们大部分人一直称之为 ES6&lt;/li&gt;
&lt;li&gt;从  ES2016(ES7) 开始，我们应该用 &lt;code&gt;ES[YYYY]&lt;/code&gt; 的格式指代新的版本&lt;/li&gt;
&lt;li&gt;这种命名的主要原因是来自现代浏览器快速实现新功能的压力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;为了让 ES6 现在就能工作，你需要一个 JavaScript 转换器&lt;/li&gt;
&lt;li&gt;下面简单介绍一下转换器：&lt;ul&gt;
&lt;li&gt;允许你把该语言的最新版本编译成旧版本&lt;/li&gt;
&lt;li&gt;当浏览器的支持变得更好，可以把 ES2016,ES2017 转换成 ES6以及更早的版本&lt;/li&gt;
&lt;li&gt;需要更好的源映射（sourcemap）功能&lt;/li&gt;
&lt;li&gt;以最可靠的方式把 ES6 源代码运行在生产环境上（虽然现在很多浏览器只支持到 ES5）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Babel (一个转换器) 有个杀手级的功能：能够编译输出我们人类可读的代码&lt;/li&gt;
&lt;li&gt;在静态构建过程，我们可以使用 &lt;a href=&quot;http://babeljs.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;babel&lt;/code&gt;&lt;/a&gt; 把 ES6 源码转换成 ES5&lt;/li&gt;
&lt;li&gt;使用 &lt;a href=&quot;https://github.com/babel/babelify&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;babelify&lt;/code&gt;&lt;/a&gt; 把 babel 添加到你的构建过程[Gulp,Grunt 或者「npm run」]&lt;/li&gt;
&lt;li&gt;使用 Node.js &lt;code&gt;v4.x.x&lt;/code&gt; 或者更新的版本因为它对 ES6 支持更好，感谢 &lt;code&gt;V8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;node&lt;/code&gt; 任何版本的 &lt;code&gt;babel-node&lt;/code&gt; ，把它作为转换成 ES5 的模块&lt;/li&gt;
&lt;li&gt;Babel 有一个非常丰富的社区生态系统，已经有很多插件支持 ES6 了&lt;/li&gt;
&lt;li&gt;参考阅读 &lt;a href=&quot;https://ponyfoo.com/articles/a-brief-history-of-es6-tooling&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ES6 工具简史&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;解构赋值&quot;&gt;&lt;a href=&quot;#解构赋值&quot; class=&quot;headerlink&quot; title=&quot;解构赋值&quot;&gt;&lt;/a&gt;解构赋值&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var {foo} = pony&lt;/code&gt; 等效于 &lt;code&gt;var foo = pony.foo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;var {foo: baz} = pony&lt;/code&gt; 等效于 &lt;code&gt;var baz = pony.foo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;你可以提供一个默认值，比如：&lt;code&gt;var {foo=&amp;#39;bar&amp;#39;} = baz&lt;/code&gt;，如果&lt;code&gt;baz.foo&lt;/code&gt; 为 &lt;code&gt;undefined&lt;/code&gt;，会得到 &lt;code&gt;foo: &amp;#39;bar&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;只要你喜欢，你可以随便写几个属性，别名或者不写，&lt;code&gt;var {foo, bar: baz} = {foo: 0, bar: 1}&lt;/code&gt; 你会得到 &lt;code&gt;foo: 0&lt;/code&gt; 和 &lt;code&gt;baz: 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;你也可以嵌套赋值。&lt;code&gt;var {foo: {bar}} = { foo: { bar: &amp;#39;baz&amp;#39; } }&lt;/code&gt;，将会得到 &lt;code&gt;bar: &amp;#39;baz&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;你也可以给对象属性设置别名。&lt;code&gt;var {foo: {bar: deep}} = { foo: { bar: &amp;#39;baz&amp;#39; } }&lt;/code&gt; ，将会得到 &lt;code&gt;deep: &amp;#39;baz&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果解构对象变量的属性没有发现，那么值为 &lt;code&gt;undefined&lt;/code&gt;，比如：&lt;code&gt;var {foo} = {}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;深度嵌套的对象属性不存在的话会得到一个错误，比如：&lt;code&gt;var {foo: {bar}} = {}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;当然，数组也是可以解构赋值的， &lt;code&gt;[a, b] = [0, 1]&lt;/code&gt; 将会得到 &lt;code&gt;a: 0&lt;/code&gt;  和 &lt;code&gt;b: 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在数组里，可以直接跳过元素位置解构赋值，比如：&lt;code&gt;[a, , b] = [0, 1, 2]&lt;/code&gt;，将会得到 &lt;code&gt;a: 0&lt;/code&gt; 以及&lt;code&gt;b: 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;你可以交换一个没有声明的变量，&lt;code&gt;[a, b] = [b, a]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;你可以在函数的参数里使用解构&lt;ul&gt;
&lt;li&gt;设置默认值，比如：&lt;code&gt;function foo (bar=2) {}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;默认的值可以设置成对象形式，比如：&lt;code&gt;function foo (bar={ a: 1, b: 2 }) {}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;完全解构 &lt;code&gt;bar&lt;/code&gt;，比如：&lt;code&gt;function foo ({ a=1, b=2 }) {}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;默认设置为一个空对象如果没有提供赋值，比如：&lt;code&gt;function foo ({ a=1, b=2 } = {}) {}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;参考阅读 &lt;a href=&quot;https://ponyfoo.com/articles/es6-destructuring-in-depth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 ES6 JavaScript 解构&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;展开运算符-spread-和不定-Rest-参数&quot;&gt;&lt;a href=&quot;#展开运算符-spread-和不定-Rest-参数&quot; class=&quot;headerlink&quot; title=&quot;展开运算符(spread)和不定(Rest)参数&quot;&gt;&lt;/a&gt;展开运算符(spread)和不定(Rest)参数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;不定(Rest)参数比&lt;code&gt;arguments&lt;/code&gt; 更好&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你可以在一个方法里面像这样声明：&lt;code&gt;function foo (...everything) {}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;everything&lt;/code&gt; 是一个数组，里面所有元素都是传递给该函数 &lt;code&gt;foo&lt;/code&gt; 的多出来的实参的值.&lt;/li&gt;
&lt;li&gt;你可以在不定参数 &lt;code&gt;...everything&lt;/code&gt; 之前定义其他参数, 比如 &lt;code&gt;function foo (bar, ...rest) {}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;参数命名的形式为 &lt;code&gt;...rest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;...rest&lt;/code&gt; 一定是在参数列表的最后&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;展开(spread)运算符比 magic 更强大，并且支持&lt;code&gt;...&lt;/code&gt;语法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免使用 &lt;code&gt;.apply&lt;/code&gt; 调用方法，&lt;code&gt;fn(...[1,2,3])&lt;/code&gt; 和 &lt;code&gt;fn(1,2,3)&lt;/code&gt; 是等效的&lt;/li&gt;
&lt;li&gt;数组之间更容易连接 ，比如&lt;code&gt;[1, 2, ...[3, 4, 5], 6, 7]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将类数组对象转换成数组, 比如 &lt;code&gt;[...document.querySelectorAll(&amp;#39;img&amp;#39;)]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解构赋值的时候也可以用，&lt;code&gt;[a, , ...rest] = [1, 2, 3, 4, 5]&lt;/code&gt; 会得到 &lt;code&gt;a: 1&lt;/code&gt; ， &lt;code&gt;rest: [3, 4, 5]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;配合使用 &lt;code&gt;new&lt;/code&gt; 和 &lt;code&gt;.apply&lt;/code&gt; 毫无压力，&lt;code&gt;new Date(...[2015,31,8])&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;https://ponyfoo.com/articles/es6-spread-and-butter-in-depth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 ES6 展开运算符和不定参数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;箭头函数&quot;&gt;&lt;a href=&quot;#箭头函数&quot; class=&quot;headerlink&quot; title=&quot;箭头函数&quot;&gt;&lt;/a&gt;箭头函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;声明一个简短的函数，比如： &lt;code&gt;param =&amp;gt; returnValue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;做某些功能的时候，像 &lt;code&gt;[1, 2].map(x =&amp;gt; x * 2)&lt;/code&gt; 这种方式是很有用的&lt;/li&gt;
&lt;li&gt;有几个新东西可能需要慢慢消化&lt;ul&gt;
&lt;li&gt;&lt;code&gt;p1 =&amp;gt; expr&lt;/code&gt; 是一个参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p1 =&amp;gt; expr&lt;/code&gt; 会有一个隐式的返回语句给 &lt;code&gt;expr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果直接隐式的返回一个对象，要像  &lt;code&gt;() =&amp;gt; ({ foo: &amp;#39;bar&amp;#39; })&lt;/code&gt; 这样用括号括住对象，不然会报错的&lt;/li&gt;
&lt;li&gt;当你没有参数或者两个参数，更多参数的时候，用圆括号代表参数部分,像这样 &lt;code&gt;() =&amp;gt; expr&lt;/code&gt; 或 &lt;code&gt;(p1, p2) =&amp;gt; expr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;右边的代码块有多条语句的话用大括号括起来，&lt;code&gt;() =&amp;gt; {}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;当使用代码块的时候，没有隐式的 &lt;code&gt;return&lt;/code&gt;，你要自己去提供一个：&lt;code&gt;() =&amp;gt; { return &amp;#39;foo&amp;#39; }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你不能静态的命名箭头函数，最后是函数运行的时候直接写箭头函数&lt;/li&gt;
&lt;li&gt;箭头函数会绑定它们自己的词法作用域&lt;ul&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt; 就是父作用域上下文所在的 &lt;code&gt;this&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt; 不能被 &lt;code&gt;.call&lt;/code&gt;,&lt;code&gt;.apply&lt;/code&gt; 或者类似的反射类型方法修改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;https://ponyfoo.com/articles/es6-arrow-functions-in-depth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 ES6 箭头函数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;模板字符串&quot;&gt;&lt;a href=&quot;#模板字符串&quot; class=&quot;headerlink&quot; title=&quot;模板字符串&quot;&gt;&lt;/a&gt;模板字符串&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;除了双引号&lt;code&gt;&amp;quot;&lt;/code&gt;和单引号&lt;code&gt;&amp;#39;&lt;/code&gt;以外，你还可以可以用&lt;code&gt;` &lt;/code&gt;(反撇号）声明一个字符串&lt;/li&gt;
&lt;li&gt;用反撇号包含的字符串就是 模板字符串&lt;/li&gt;
&lt;li&gt;模板字符串可以分多行写&lt;/li&gt;
&lt;li&gt;模板字符串允许插值，比如 &lt;code&gt;ponyfoo.com is ${rating}&lt;/code&gt;，其中 &lt;code&gt;rating&lt;/code&gt; 是个变量&lt;/li&gt;
&lt;li&gt;你可以在字符串里用任何原生 Js 表达式，比如：&lt;code&gt;${2 * 3}&lt;/code&gt; 或 &lt;code&gt;${foo()}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;你可以使用标记模板改变表达式内的插值&lt;ul&gt;
&lt;li&gt;添加一个前缀给 &lt;code&gt;fn&lt;/code&gt;,${bar} and ${baz}&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn&lt;/code&gt; 也叫做 &lt;code&gt;template, ...expressions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template&lt;/code&gt; 是 &lt;code&gt;[&amp;#39;foo, &amp;#39;, &amp;#39; and &amp;#39;, &amp;#39;&amp;#39;]&lt;/code&gt; ， &lt;code&gt;expressions&lt;/code&gt; 是 &lt;code&gt;[bar, baz]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fn&lt;/code&gt; 的结果最后变成模板字符串的值&lt;/li&gt;
&lt;li&gt;使用的时候可能要注意输入过滤表达式和参数解析等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模板字符串基本上和用单引号双引号包含的字符串一样严格&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;https://ponyfoo.com/articles/es6-template-strings-in-depth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 ES6 模板字符串&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;对象字面量&quot;&gt;&lt;a href=&quot;#对象字面量&quot; class=&quot;headerlink&quot; title=&quot;对象字面量&quot;&gt;&lt;/a&gt;对象字面量&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;你可以用 &lt;code&gt;{foo}&lt;/code&gt; 的写法代替&lt;code&gt;{foo:foo}&lt;/code&gt; – 属性值简写&lt;/li&gt;
&lt;li&gt;计算属性名,比如 &lt;code&gt;{ [prefix + &amp;#39;Foo&amp;#39;]: &amp;#39;bar&amp;#39; }&lt;/code&gt;, 如果 &lt;code&gt;prefix: &amp;#39;moz&amp;#39;&lt;/code&gt;, 那么将得到 &lt;code&gt;{ mozFoo: &amp;#39;bar&amp;#39; }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;你不能快速合并计算属性名字和属性值，&lt;code&gt;{ [foo] }&lt;/code&gt; 是无效的&lt;/li&gt;
&lt;li&gt;方法定义一个对象字面量可以使用另一个声明,更简洁的语法&lt;/li&gt;
&lt;li&gt;在一个对象里面定义方法可以使用另外一个声明，更简单的语法，&lt;code&gt;{foo() {}}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;参考 &lt;a href=&quot;#object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; 部分&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;https://ponyfoo.com/articles/es6-object-literal-features-in-depth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 ES6 对象字面量&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Classes&quot;&gt;&lt;a href=&quot;#Classes&quot; class=&quot;headerlink&quot; title=&quot;Classes&quot;&gt;&lt;/a&gt;Classes&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;不是传统的类，是原型继承的语法糖。&lt;/li&gt;
&lt;li&gt;语法类似于声明对象 &lt;code&gt;class Foo{}&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;实例方法 &lt;em&gt;– &lt;code&gt;new Foo().bar&lt;/code&gt; –&lt;/em&gt; 使用简短的语法声明 &lt;a href=&quot;#object-literals&quot;&gt;object literal&lt;/a&gt; , &lt;code&gt;class Foo { bar () {} }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;静态方法 &lt;em&gt;– &lt;code&gt;Foo.isPonyFoo()&lt;/code&gt; –&lt;/em&gt; 需要一个 &lt;code&gt;static&lt;/code&gt; 关键词前缀, &lt;code&gt;class Foo { static isPonyFoo () {} }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;构造函数方法 &lt;code&gt;class Foo { constructor () { /* initialize instance */ } }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一个很简单的语法就可以实现原型继承 &lt;code&gt;class PonyFoo extends Foo {}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;https://ponyfoo.com/articles/es6-classes-in-depth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 ES6 Classes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Let-和-Const&quot;&gt;&lt;a href=&quot;#Let-和-Const&quot; class=&quot;headerlink&quot; title=&quot;Let 和 Const&quot;&gt;&lt;/a&gt;Let 和 Const&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;声明变量的时候，用&lt;code&gt;let&lt;/code&gt;和&lt;code&gt;const&lt;/code&gt;代替&lt;code&gt;var&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt;是个块级作用域，代替一个函数的词法作用域&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt; 声明的变量会 &lt;a href=&quot;https://ponyfoo.com/articles/javascript-variable-hoisting&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;提升&lt;/a&gt; 至块级作用域的顶部, 而 &lt;code&gt;var&lt;/code&gt; 生命的变量会提升到函数的顶部&lt;/li&gt;
&lt;li&gt;“暂时性死区（Temporal Dead Zone）” – TDZ 简介&lt;ul&gt;
&lt;li&gt;块作用域在 &lt;code&gt;let foo&lt;/code&gt; 声明的时候开始&lt;/li&gt;
&lt;li&gt;结束的地方让foo的声明放置在用户代码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let foo&lt;/code&gt; 声明被用户的代码替换后结束作用域块&lt;/li&gt;
&lt;li&gt;有助于在变量未声明前操作变量产生的神奇 bug&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt; 也是一个块级作用域，提升以及受限于 TDZ 语义&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt; 变量必须要声明一个初始值，&lt;code&gt;const foo = &amp;#39;bar&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;const&lt;/code&gt; 变量初始化失败之后会默默的指向其他值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt; 变量不要改变它分配的值&lt;ul&gt;
&lt;li&gt;&lt;code&gt;const foo = { bar: &amp;#39;baz&amp;#39; }&lt;/code&gt; 意味着 &lt;code&gt;foo&lt;/code&gt; 会一直引用右边对象的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const foo = { bar: &amp;#39;baz&amp;#39; }; foo.bar = &amp;#39;boo&amp;#39;&lt;/code&gt; 不会抛错&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;声明变量名相同时会抛出异常&lt;/li&gt;
&lt;li&gt;为了修复错误,你要重新分配一个内存变量，其他的就会失去引用&lt;/li&gt;
&lt;li&gt;在 ES6 里, &lt;strong&gt;函数都是块级作用域&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;防止提升暴露块级作用域&lt;code&gt;{ let _foo = &amp;#39;secret&amp;#39;, bar = () =&amp;gt; _foo; }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在大多数情况下不要打断用户代码，随便输入你想要的东西.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;https://ponyfoo.com/articles/es6-let-const-and-temporal-dead-zone-in-depth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 ES6 Let,Const和暂时性死区&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Symbols&quot;&gt;&lt;a href=&quot;#Symbols&quot; class=&quot;headerlink&quot; title=&quot;Symbols&quot;&gt;&lt;/a&gt;Symbols&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ES6 里的一个新的数据类型&lt;/li&gt;
&lt;li&gt;你可以通过 Symbol 函数创建自己的 symbols,比如：&lt;code&gt;var symbol = Symbol()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;你可以添加参数的形式添加一个对 Symbol 的描述，方便调式，比如：&lt;code&gt;Symbol(&amp;#39;ponyfoo&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Symbols 有多种形式，并且都是不同的。&lt;code&gt;Symbol()&lt;/code&gt;, &lt;code&gt;Symbol()&lt;/code&gt;, &lt;code&gt;Symbol(&amp;#39;foo&amp;#39;)&lt;/code&gt; 和 &lt;code&gt;Symbol(&amp;#39;foo&amp;#39;)&lt;/code&gt; 都是不同的&lt;/li&gt;
&lt;li&gt;Symbols 的类型就是 &lt;code&gt;symbol&lt;/code&gt;, 所以: &lt;code&gt;typeof Symbol() === &amp;#39;symbol&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;你可以 通过 &lt;code&gt;Symbol.for(key)&lt;/code&gt; 创建一个全局的 symbols&lt;ul&gt;
&lt;li&gt;如果一个 symbol 的 &lt;code&gt;key&lt;/code&gt; 已经存在，可以直接获取这个值&lt;/li&gt;
&lt;li&gt;创建一个新的 symbol,使用&lt;code&gt;key&lt;/code&gt;作为 symbol 的描述&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Symbol.keyFor(symbol)&lt;/code&gt; 有着相反的功能, 通过一个 &lt;code&gt;symbol&lt;/code&gt; 返回它的 &lt;code&gt;key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;全局环境的 symbols 在全局哪获得的值就是它的值&lt;ul&gt;
&lt;li&gt;&lt;code&gt;window&lt;/code&gt; 上下文&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eval&lt;/code&gt; 上下文&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;上下文, &lt;code&gt;Symbol.for(&amp;#39;foo&amp;#39;) === iframe.contentWindow.Symbol.for(&amp;#39;foo&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;还有一些众所周知的 symbols&lt;ul&gt;
&lt;li&gt;不在全局注册属性，可以通过 &lt;code&gt;Symbol[name]&lt;/code&gt;,比如：&lt;code&gt;Symbol.iterator&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;跨域, 意思就是 &lt;code&gt;Symbol.iterator === iframe.contentWindow.Symbol.iterator&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用于规范定义的协议，比如：e &lt;a href=&quot;#iterators&quot;&gt;&lt;em&gt;iterable&lt;/em&gt; protocol&lt;/a&gt; 代替 &lt;code&gt;Symbol.iterator&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在口语上面它们并不容易理解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;遍历 symbol 的属性是很难的，但也不是不可能的&lt;ul&gt;
&lt;li&gt;Symbol 隐藏了所有 pre-ES6 &lt;code&gt;反射&lt;/code&gt; 方法&lt;/li&gt;
&lt;li&gt;Symbol 可以通过 &lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt; 访问属性&lt;/li&gt;
&lt;li&gt;不可能不会偶然发现他们，除非你努力去发现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;https://ponyfoo.com/articles/es6-symbols-in-depth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 ES6 Symbols&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Iterators-遍历器&quot;&gt;&lt;a href=&quot;#Iterators-遍历器&quot; class=&quot;headerlink&quot; title=&quot;Iterators (遍历器)&quot;&gt;&lt;/a&gt;Iterators (遍历器)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;迭代器和iterable（遍历器接口）协议定义了如何遍历任何对象,不是数组和类数组&lt;/li&gt;
&lt;li&gt;大家都知道 &lt;code&gt;Symbol&lt;/code&gt; 可以用来给任何对象指派为指针对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;var foo = { [Symbol.iterator]: iterable}&lt;/code&gt;, 或 &lt;code&gt;foo[Symbol.iterator] = iterable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;‘iterable’ 方法返回一个有 &lt;code&gt;next&lt;/code&gt; 方法的 &lt;code&gt;iterator&lt;/code&gt; 对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;next&lt;/code&gt; 方法返回的对象有两个属性，&lt;code&gt;value&lt;/code&gt;和 &lt;code&gt;done&lt;/code&gt;。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value&lt;/code&gt; 属性返回当前位置的成员&lt;/li&gt;
&lt;li&gt;&lt;code&gt;done&lt;/code&gt; 属性是一个布尔值，表示遍历是否结束，即是否还有必要再一次调用next方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Objects 只要有 &lt;code&gt;[Symbol.iterator]&lt;/code&gt;属性就是可遍历的， &lt;/li&gt;
&lt;li&gt;一些内置的数据解构像 &lt;code&gt;Array&lt;/code&gt;,&lt;code&gt;String&lt;/code&gt;或者 &lt;code&gt;arguments&lt;/code&gt;以及浏览器里的 &lt;code&gt;NodeList&lt;/code&gt; 在 ES6 里默认都是 iterable&lt;/li&gt;
&lt;li&gt;Iterable objects 可以通过 &lt;code&gt;for..of&lt;/code&gt; 实现循环，比如 &lt;code&gt;for (let el of document.querySelectorAll(&amp;#39;a&amp;#39;))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Iterable objects 可以使用 &lt;code&gt;spread operator&lt;/code&gt;, 比如 &lt;code&gt;[...document.querySelectorAll(&amp;#39;a&amp;#39;)]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可以通过&lt;code&gt;Array.from(document.querySelectorAll(&amp;#39;a&amp;#39;))&lt;/code&gt;去把一个 iterable队列转成数组&lt;/li&gt;
&lt;li&gt;Iterators are &lt;em&gt;lazy&lt;/em&gt;, and those that produce an infinite sequence still can lead to valid programs&lt;/li&gt;
&lt;li&gt;Be careful not to attempt to synthesize an infinite sequence with &lt;code&gt;...&lt;/code&gt; or &lt;code&gt;Array.from&lt;/code&gt; as that &lt;strong&gt;will&lt;/strong&gt; cause an infinite loop&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;https://ponyfoo.com/articles/es6-iterators-in-depth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 ES6 迭代器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Generators&quot;&gt;&lt;a href=&quot;#Generators&quot; class=&quot;headerlink&quot; title=&quot;Generators&quot;&gt;&lt;/a&gt;Generators&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Generator functions are a special kind of &lt;em&gt;iterator&lt;/em&gt; that can be declared using the &lt;code&gt;function* generator () {}&lt;/code&gt; syntax&lt;/li&gt;
&lt;li&gt;Generator functions use &lt;code&gt;yield&lt;/code&gt; to emit an element sequence&lt;/li&gt;
&lt;li&gt;Generator functions can also use &lt;code&gt;yield*&lt;/code&gt; to delegate to another generator function &lt;em&gt;– or any iterable object&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Generator functions return a generator object that’s adheres to both the &lt;em&gt;iterable&lt;/em&gt; and &lt;em&gt;iterator&lt;/em&gt; protocols&lt;ul&gt;
&lt;li&gt;Given &lt;code&gt;g = generator()&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt; adheres to the iterable protocol because &lt;code&gt;g[Symbol.iterator]&lt;/code&gt; is a method&lt;/li&gt;
&lt;li&gt;Given &lt;code&gt;g = generator()&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt; adheres to the iterator protocol because &lt;code&gt;g.next&lt;/code&gt; is a method&lt;/li&gt;
&lt;li&gt;The iterator for a generator object &lt;code&gt;g&lt;/code&gt; is the generator itself: &lt;code&gt;g[Symbol.iterator]() === g&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pull values using &lt;code&gt;Array.from(g)&lt;/code&gt;, &lt;code&gt;[...g]&lt;/code&gt;, &lt;code&gt;for (let item of g)&lt;/code&gt;, or just calling &lt;code&gt;g.next()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Generator function execution is suspended, remembering the last position, in four different cases&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;yield&lt;/code&gt; expression returning the next value in the sequence&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;return&lt;/code&gt; statement returning the last value in the sequence&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;throw&lt;/code&gt; statement halts execution in the generator entirely&lt;/li&gt;
&lt;li&gt;Reaching the end of the generator function signals &lt;code&gt;{ done: true }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Once the &lt;code&gt;g&lt;/code&gt; sequence has ended, &lt;code&gt;g.next()&lt;/code&gt; simply returns &lt;code&gt;{ done: true }&lt;/code&gt; and has no effect&lt;/li&gt;
&lt;li&gt;It’s easy to make asynchronous flows feel synchronous&lt;ul&gt;
&lt;li&gt;Take user-provided generator function&lt;/li&gt;
&lt;li&gt;User code is suspended while asynchronous operations take place&lt;/li&gt;
&lt;li&gt;Call &lt;code&gt;g.next()&lt;/code&gt;, unsuspending execution in user code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;https://ponyfoo.com/articles/es6-generators-in-depth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ES6 Generators in Depth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Promises&quot;&gt;&lt;a href=&quot;#Promises&quot; class=&quot;headerlink&quot; title=&quot;Promises&quot;&gt;&lt;/a&gt;Promises&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Follows the &lt;a href=&quot;https://promisesaplus.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Promises/A+&lt;/code&gt;&lt;/a&gt; specification, was widely implemented in the wild before ES6 was standarized &lt;em&gt;(e.g &lt;a href=&quot;https://github.com/petkaantonov/bluebird&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;bluebird&lt;/code&gt;&lt;/a&gt;)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Promises behave like a tree. Add branches with &lt;code&gt;p.then(handler)&lt;/code&gt; and &lt;code&gt;p.catch(handler)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create new &lt;code&gt;p&lt;/code&gt; promises with &lt;code&gt;new Promise((resolve, reject) =&amp;gt; { /* resolver */ })&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;resolve(value)&lt;/code&gt; callback will fulfill the promise with the provided &lt;code&gt;value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;reject(reason)&lt;/code&gt; callback will reject &lt;code&gt;p&lt;/code&gt; with a &lt;code&gt;reason&lt;/code&gt; error&lt;/li&gt;
&lt;li&gt;You can call those methods asynchronously, blocking deeper branches of the promise tree&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Each call to &lt;code&gt;p.then&lt;/code&gt; and &lt;code&gt;p.catch&lt;/code&gt; creates another promise that’s blocked on &lt;code&gt;p&lt;/code&gt; being settled&lt;/li&gt;
&lt;li&gt;Promises start out in &lt;em&gt;pending&lt;/em&gt; state and are &lt;strong&gt;settled&lt;/strong&gt; when they’re either &lt;em&gt;fulfilled&lt;/em&gt; or &lt;em&gt;rejected&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Promises can only be settled once, and then they’re settled. Settled promises unblock deeper branches&lt;/li&gt;
&lt;li&gt;You can tack as many promises as you want onto as many branches as you need&lt;/li&gt;
&lt;li&gt;Each branch will execute either &lt;code&gt;.then&lt;/code&gt; handlers or &lt;code&gt;.catch&lt;/code&gt; handlers, never both&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;.then&lt;/code&gt; callback can transform the result of the previous branch by returning a value&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;.then&lt;/code&gt; callback can block on another promise by returning it&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p.catch(fn).catch(fn)&lt;/code&gt; won’t do what you want – unless what you wanted is to catch errors in the error handler&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-promises-in-depth#using-promiseresolve-and-promisereject&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Promise.resolve(value)&lt;/code&gt;&lt;/a&gt; creates a promise that’s fulfilled with the provided &lt;code&gt;value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-promises-in-depth#using-promiseresolve-and-promisereject&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Promise.reject(reason)&lt;/code&gt;&lt;/a&gt; creates a promise that’s rejected with the provided &lt;code&gt;reason&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-promises-in-depth#leveraging-promiseall-and-promiserace&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Promise.all(...promises)&lt;/code&gt;&lt;/a&gt; creates a promise that settles when all &lt;code&gt;...promises&lt;/code&gt; are fulfilled or 1 of them is rejected&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-promises-in-depth#leveraging-promiseall-and-promiserace&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Promise.race(...promises)&lt;/code&gt;&lt;/a&gt; creates a promise that settles as soon as 1 of &lt;code&gt;...promises&lt;/code&gt; is settled&lt;/li&gt;
&lt;li&gt;Use &lt;a href=&quot;http://bevacqua.github.io/promisees/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Promisees&lt;/a&gt; – the promise visualization playground – to better understand promises&lt;/li&gt;
&lt;li&gt;Read &lt;a href=&quot;https://ponyfoo.com/articles/es6-promises-in-depth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ES6 Promises in Depth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Maps&quot;&gt;&lt;a href=&quot;#Maps&quot; class=&quot;headerlink&quot; title=&quot;Maps&quot;&gt;&lt;/a&gt;Maps&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一个代替原来 js object 创建 hash-map 的方法&lt;ul&gt;
&lt;li&gt;Avoids security issues with user-provided keys&lt;/li&gt;
&lt;li&gt;Allows keys to be arbitrary values, you can even use DOM elements or functions as the &lt;code&gt;key&lt;/code&gt; to an entry&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Map&lt;/code&gt; adheres to &lt;em&gt;&lt;a href=&quot;#iterators&quot;&gt;iterable&lt;/a&gt;&lt;/em&gt; protocol&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;new Map()&lt;/code&gt; 创建 &lt;code&gt;map&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;iterable&lt;/code&gt; 初始化一个 map ，类似 &lt;code&gt;new Map(iterable)&lt;/code&gt; 里面的 &lt;code&gt;[[key1, value1], [key2, value2]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;map.set(key, value)&lt;/code&gt; 去添加键值&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;map.get(key)&lt;/code&gt; 获取键值&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;map.has(key)&lt;/code&gt; 检查某个 &lt;code&gt;key&lt;/code&gt;是否在 Map 里面，返回的布尔值&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;map.delete(key)&lt;/code&gt; 删除某个 &lt;code&gt;key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Iterate over &lt;code&gt;map&lt;/code&gt; with &lt;code&gt;for (let [key, value] of map)&lt;/code&gt;, the spread operator, &lt;code&gt;Array.from&lt;/code&gt;, etc&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;https://ponyfoo.com/articles/es6-maps-in-depth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ES6 Maps in Depth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;WeakMaps&quot;&gt;&lt;a href=&quot;#WeakMaps&quot; class=&quot;headerlink&quot; title=&quot;WeakMaps&quot;&gt;&lt;/a&gt;WeakMaps&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;和 &lt;code&gt;Map&lt;/code&gt; 类似，但是不完全相同&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WeakMap&lt;/code&gt; isn’t iterable, so you don’t get enumeration methods like &lt;code&gt;.forEach&lt;/code&gt;, &lt;code&gt;.clear&lt;/code&gt;, and others you had in &lt;code&gt;Map&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WeakMap&lt;/code&gt; keys must be reference types. You can’t use value types like symbols, numbers, or strings as keys&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WeakMap&lt;/code&gt; entries with a &lt;code&gt;key&lt;/code&gt; that’s the only reference to the referenced variable are subject to garbage collection&lt;/li&gt;
&lt;li&gt;That last point means &lt;code&gt;WeakMap&lt;/code&gt; is great at keeping around metadata for objects, while those objects are still in use&lt;/li&gt;
&lt;li&gt;You avoid memory leaks, without manual reference counting – think of &lt;code&gt;WeakMap&lt;/code&gt; as &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.idisposable%28v=vs.110%29.aspx?f=255&amp;amp;MSPPError=-2147217396&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;IDisposable&lt;/code&gt;&lt;/a&gt; in .NET&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;https://ponyfoo.com/articles/es6-weakmaps-sets-and-weaksets-in-depth#es6-weakmaps&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 ES6 WeakMaps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Sets&quot;&gt;&lt;a href=&quot;#Sets&quot; class=&quot;headerlink&quot; title=&quot;Sets&quot;&gt;&lt;/a&gt;Sets&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;和 &lt;code&gt;Map&lt;/code&gt; 有点相同，但是又不完全一样&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Set&lt;/code&gt; 没有键名，只有键值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set.set(value)&lt;/code&gt; 看起来是错误的，我们要用 &lt;code&gt;set.add(value)&lt;/code&gt; 代替&lt;/li&gt;
&lt;li&gt;Sets 不能有重复值，因为值都是对应键的值&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;https://ponyfoo.com/articles/es6-weakmaps-sets-and-weaksets-in-depth#es6-sets&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 ES6 Sets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;WeakSets&quot;&gt;&lt;a href=&quot;#WeakSets&quot; class=&quot;headerlink&quot; title=&quot;WeakSets&quot;&gt;&lt;/a&gt;WeakSets&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WeakSet&lt;/code&gt; 是 &lt;code&gt;Set&lt;/code&gt; 和 &lt;code&gt;WeakMap&lt;/code&gt;之间的一个混合模式&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;WeakSet&lt;/code&gt; 一个 &lt;code&gt;WeakSet&lt;/code&gt; 就等于一个不能迭代没有枚举方法的 &lt;code&gt;set&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WeakSet&lt;/code&gt; 的值必须是引用类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WeakSet&lt;/code&gt; 对于判断一个元数据表有没有被引用可能有点用处&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;https://ponyfoo.com/articles/es6-weakmaps-sets-and-weaksets-in-depth#es6-weaksets&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 ES6 WeakSets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Proxies&quot;&gt;&lt;a href=&quot;#Proxies&quot; class=&quot;headerlink&quot; title=&quot;Proxies&quot;&gt;&lt;/a&gt;Proxies&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Proxies are created with &lt;code&gt;new Proxy(target, handler)&lt;/code&gt;, where &lt;code&gt;target&lt;/code&gt; is any object and &lt;code&gt;handler&lt;/code&gt; is configuration&lt;/li&gt;
&lt;li&gt;The default behavior of a &lt;code&gt;proxy&lt;/code&gt; acts as a passthrough to the underlying &lt;code&gt;target&lt;/code&gt; object&lt;/li&gt;
&lt;li&gt;Handlers determine how the underlying &lt;code&gt;target&lt;/code&gt; object is accessed on top of regular object property access semantics&lt;/li&gt;
&lt;li&gt;You pass off references to &lt;code&gt;proxy&lt;/code&gt; and retain strict control over how &lt;code&gt;target&lt;/code&gt; can be interacted with&lt;/li&gt;
&lt;li&gt;Handlers are also known as traps, these terms are used interchangeably&lt;/li&gt;
&lt;li&gt;You can create &lt;strong&gt;revocable&lt;/strong&gt; proxies with &lt;code&gt;Proxy.revocable(target, handler)&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;That method returns an object with &lt;code&gt;proxy&lt;/code&gt; and &lt;code&gt;revoke&lt;/code&gt; properties&lt;/li&gt;
&lt;li&gt;You could &lt;a href=&quot;#destructuring&quot;&gt;destructure&lt;/a&gt; &lt;code&gt;var {proxy, revoke} = Proxy.revocable(target, handler)&lt;/code&gt; for convenience&lt;/li&gt;
&lt;li&gt;You can configure the &lt;code&gt;proxy&lt;/code&gt; all the same as with &lt;code&gt;new Proxy(target, handler)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;After &lt;code&gt;revoke()&lt;/code&gt; is called, the &lt;code&gt;proxy&lt;/code&gt; will &lt;strong&gt;throw&lt;/strong&gt; on &lt;em&gt;any operation&lt;/em&gt;, making it convenient when you can’t trust consumers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-proxies-in-depth#get&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt; – traps &lt;code&gt;proxy.prop&lt;/code&gt; and &lt;code&gt;proxy[&amp;#39;prop&amp;#39;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-proxies-in-depth#set&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; – traps &lt;code&gt;proxy.prop = value&lt;/code&gt; and &lt;code&gt;proxy[&amp;#39;prop&amp;#39;] = value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-proxy-traps-in-depth#has&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;has&lt;/code&gt;&lt;/a&gt; – traps &lt;code&gt;in&lt;/code&gt; operator&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-proxy-traps-in-depth#deleteproperty&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;deleteProperty&lt;/code&gt;&lt;/a&gt; – traps &lt;code&gt;delete&lt;/code&gt; operator&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-proxy-traps-in-depth#defineproperty&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;defineProperty&lt;/code&gt;&lt;/a&gt; – traps &lt;code&gt;Object.defineProperty&lt;/code&gt; and declarative alternatives&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-proxy-traps-in-depth#enumerate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;enumerate&lt;/code&gt;&lt;/a&gt; – traps &lt;code&gt;for..in&lt;/code&gt; loops&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-proxy-traps-in-depth#ownkeys&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;ownKeys&lt;/code&gt;&lt;/a&gt; – traps &lt;code&gt;Object.keys&lt;/code&gt; and related methods&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-proxy-traps-in-depth#apply&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/a&gt; – traps &lt;em&gt;function calls&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/morees6-proxy-traps-in-depth#construct&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;construct&lt;/code&gt;&lt;/a&gt; – traps usage of the &lt;code&gt;new&lt;/code&gt; operator&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/morees6-proxy-traps-in-depth#getprototypeof&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;getPrototypeOf&lt;/code&gt;&lt;/a&gt; – traps internal calls to &lt;code&gt;[[GetPrototypeOf]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/morees6-proxy-traps-in-depth#setprototypeof&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;setPrototypeOf&lt;/code&gt;&lt;/a&gt; – traps calls to &lt;code&gt;Object.setPrototypeOf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/morees6-proxy-traps-in-depth#isextensible&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;isExtensible&lt;/code&gt;&lt;/a&gt; – traps calls to &lt;code&gt;Object.isExtensible&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/morees6-proxy-traps-in-depth#preventextensions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;preventExtensions&lt;/code&gt;&lt;/a&gt; – traps calls to &lt;code&gt;Object.preventExtensions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/morees6-proxy-traps-in-depth#getownpropertydescriptor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;getOwnPropertyDescriptor&lt;/code&gt;&lt;/a&gt; – traps calls to &lt;code&gt;Object.getOwnPropertyDescriptor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;https://ponyfoo.com/articles/es6-proxies-in-depth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 ES6 Proxies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;https://ponyfoo.com/articles/es6-proxy-traps-in-depth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 ES6 Proxy Traps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Reflection&quot;&gt;&lt;a href=&quot;#Reflection&quot; class=&quot;headerlink&quot; title=&quot;Reflection&quot;&gt;&lt;/a&gt;Reflection&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;‘Reflection’ 是 ES6 标准库里一个新的静态方法（和 Math 对象一样）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Reflection&lt;/code&gt; 方法有合理的内部结构，比如&lt;code&gt;Reflect.defineProperty&lt;/code&gt;返回的就是一个布尔值。&lt;/li&gt;
&lt;li&gt;每个代理处理器都有一个 &lt;code&gt;Reflection&lt;/code&gt; 方法，它们分别对应着每个处理器的默认方法&lt;/li&gt;
&lt;li&gt;在未来，和 &lt;code&gt;Object.keys&lt;/code&gt; 一样类似的反射（Reflection）方法将会被放在 &lt;code&gt;Reflection&lt;/code&gt; 命名下面。&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;https://ponyfoo.com/articles/es6-reflection-in-depth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 ES6 Reflection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Number&quot;&gt;&lt;a href=&quot;#Number&quot; class=&quot;headerlink&quot; title=&quot;Number&quot;&gt;&lt;/a&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;二进制和八进制分别使用前缀 &lt;code&gt;Ob&lt;/code&gt;和&lt;code&gt;0o&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Number.isNaN&lt;/code&gt; 和 &lt;code&gt;Number.isFinite&lt;/code&gt; 与全局方法有点像, 但是它们只对输入的为数值有效，非数值一律返回 false&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Number.parseInt&lt;/code&gt; 和 &lt;code&gt;Number.parseFloat&lt;/code&gt; 与全局方法是完全一样的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Number.isInteger&lt;/code&gt; 检查一个值是否为整数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Number.EPSILON&lt;/code&gt; 帮助两个浮点数计算设置一个可接受误差范围，误差小于 Number.EPSILON 说明计算正确，比如&lt;code&gt;0.1 + 0.2&lt;/code&gt; 和 &lt;code&gt;0.3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt; 表示在 JavaScript 里整数能安全精确表示的最小值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt; 表示在 JavaScript 里整数能安全精确表示的最大值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Number.isSafeInteger&lt;/code&gt; 检查一个整数是否能够在范围内（MIN_SAFE_INTEGER-MAX_SAFE_INTEGER）安全精确的表示出来&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;https://ponyfoo.com/articles/es6-number-improvements-in-depth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 ES6 数字的改进&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Math&quot;&gt;&lt;a href=&quot;#Math&quot; class=&quot;headerlink&quot; title=&quot;Math&quot;&gt;&lt;/a&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-math-additions-in-depth#mathsign&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Math.sign&lt;/code&gt;&lt;/a&gt; – 用来判断一个数到底是正数、负数、还是零&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-math-additions-in-depth#mathtrunc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Math.trunc&lt;/code&gt;&lt;/a&gt; – 去除一个数的小数部分，返回整数部分&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-math-additions-in-depth#mathcbrt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Math.cbrt&lt;/code&gt;&lt;/a&gt; – 用于计算一个数的立方根&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-math-additions-in-depth#mathexpm1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Math.expm1&lt;/code&gt;&lt;/a&gt; – 返回 &lt;code&gt;e&amp;lt;sup&amp;gt;value&amp;lt;/sup&amp;gt; - 1&lt;/code&gt;，即Math.exp(value) - 1&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-math-additions-in-depth#mathlog1p&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Math.log1p&lt;/code&gt;&lt;/a&gt; – 返回&lt;code&gt;1 + value&lt;/code&gt;的自然对数&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-math-additions-in-depth#mathlog10&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Math.log10&lt;/code&gt;&lt;/a&gt; –返回以10为底的 &lt;code&gt;value&lt;/code&gt; 的对数&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-math-additions-in-depth#mathlog2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Math.log2&lt;/code&gt;&lt;/a&gt; – 返回以2为底的 &lt;code&gt;value&lt;/code&gt; 的对数&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-math-additions-in-depth#mathsinh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Math.sinh&lt;/code&gt;&lt;/a&gt; – 返回一个数的双曲正弦值.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-math-additions-in-depth#mathcosh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Math.cosh&lt;/code&gt;&lt;/a&gt; – 返回一个数的余弦值&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-math-additions-in-depth#mathtanh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Math.tanh&lt;/code&gt;&lt;/a&gt; – 返回一个数双曲正切值.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-math-additions-in-depth#mathasinh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Math.asinh&lt;/code&gt;&lt;/a&gt; – 返回一个数的反双曲正弦值.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-math-additions-in-depth#mathacosh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Math.acosh&lt;/code&gt;&lt;/a&gt; – 返回一个数的反双曲余弦值.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-math-additions-in-depth#mathatanh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Math.atanh&lt;/code&gt;&lt;/a&gt; – 返回一个数的反双曲正切值.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-math-additions-in-depth#mathhypot&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Math.hypot&lt;/code&gt;&lt;/a&gt; – 方法返回所有参数的平方和的平方根&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-math-additions-in-depth#mathclz32&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Math.clz32&lt;/code&gt;&lt;/a&gt; – 返回一个数的32位无符号整数形式有多少个前导0。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-math-additions-in-depth#mathimul&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Math.imul&lt;/code&gt;&lt;/a&gt; – 返回两个数以32位带符号整数形式相乘的结果&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-math-additions-in-depth#mathfround&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Math.fround&lt;/code&gt;&lt;/a&gt; – 最接近这个小数的单精度浮点数。&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;https://ponyfoo.com/articles/es6-math-additions-in-depth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 ES6 &lt;code&gt;Math&lt;/code&gt; 的扩展&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Array&quot;&gt;&lt;a href=&quot;#Array&quot; class=&quot;headerlink&quot; title=&quot;Array&quot;&gt;&lt;/a&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-array-extensions-in-depth#arrayfrom&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Array.from&lt;/code&gt;&lt;/a&gt; – 把类似数组对象和可遍历（iterable）的对象转为真正的数组&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-array-extensions-in-depth#arrayof&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Array.of&lt;/code&gt;&lt;/a&gt; – 和 &lt;code&gt;new Array(...items)&lt;/code&gt; 相似, 但是没有特殊情况&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-array-extensions-in-depth#arrayprototypecopywithin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Array.prototype.copyWithin&lt;/code&gt;&lt;/a&gt; – 把数组指定位置的元素复制到其他地方&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-array-extensions-in-depth#arrayprototypefill&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Array.prototype.fill&lt;/code&gt;&lt;/a&gt; – 用给定值，填充一个已存在的数组&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-array-extensions-in-depth#arrayprototypefind&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Array.prototype.find&lt;/code&gt;&lt;/a&gt; – 用于找出第一个符合条件的数组成员&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-array-extensions-in-depth#arrayprototypefindindex&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Array.prototype.findIndex&lt;/code&gt;&lt;/a&gt; –返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-array-extensions-in-depth#arrayprototypekeys&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Array.prototype.keys&lt;/code&gt;&lt;/a&gt; – 返回一个数组索引的迭代器。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-array-extensions-in-depth#arrayprototypevalues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Array.prototype.values&lt;/code&gt;&lt;/a&gt; – 返回一个新的 Array Iterator 对象，该对象包含数组每个索引的值。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-array-extensions-in-depth#arrayprototypeentries&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Array.prototype.entries&lt;/code&gt;&lt;/a&gt; –返回一个 Array Iterator 对象，该对象包含数组中每一个索引的键值对。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-array-extensions-in-depth#arrayprototype-symboliterator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Array.prototype[Symbol.iterator]&lt;/code&gt;&lt;/a&gt; – 和&lt;a href=&quot;https://ponyfoo.com/articles/es6-array-extensions-in-depth#arrayprototypevalues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Array.prototype.values&lt;/code&gt;&lt;/a&gt; 方法完全一样&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;https://ponyfoo.com/articles/es6-array-extensions-in-depth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 ES6 的数组扩展 &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Object&quot;&gt;&lt;a href=&quot;#Object&quot; class=&quot;headerlink&quot; title=&quot;Object&quot;&gt;&lt;/a&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-object-changes-in-depth#objectassign&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Object.assign&lt;/code&gt;&lt;/a&gt; –将源对象的所有可枚举属性，复制到目标对象（target）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-object-changes-in-depth#objectis&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Object.is&lt;/code&gt;&lt;/a&gt; – 用来比较两个值是否严格相等，与严格比较运算符 &lt;code&gt;===&lt;/code&gt; 的行为基本一致。但是 &lt;code&gt;+0&lt;/code&gt;和&lt;code&gt;-0&lt;/code&gt;不相等的， &lt;code&gt;NaN&lt;/code&gt; 和 &lt;code&gt;NaN&lt;/code&gt; 是相等的&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-object-changes-in-depth#objectgetownpropertysymbols&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt;&lt;/a&gt; – 返回一个数组，包含对象自身的所有Symbol属性。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-object-changes-in-depth#objectsetprototypeof&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Object.setPrototypeOf&lt;/code&gt;&lt;/a&gt; – 改变属性. 等同于 &lt;code&gt;target.__proto__&lt;/code&gt; setter 方法&lt;/li&gt;
&lt;li&gt;参考 &lt;a href=&quot;#object-literals&quot;&gt;Object Literals&lt;/a&gt; 部分&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;https://ponyfoo.com/articles/es6-object-changes-in-depth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 ES6 &lt;code&gt;Object&lt;/code&gt; 变化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;字符串和编码&quot;&gt;&lt;a href=&quot;#字符串和编码&quot; class=&quot;headerlink&quot; title=&quot;字符串和编码&quot;&gt;&lt;/a&gt;字符串和编码&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;字符串操作&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-strings-and-unicode-in-depth#stringprototypestartswith&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;String.prototype.startsWith&lt;/code&gt;&lt;/a&gt; – 表示字符串是否在一个值的开头&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-strings-and-unicode-in-depth#stringprototypeendswith&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;String.prototype.endsWith&lt;/code&gt;&lt;/a&gt; – 表示字符串是否在一个值的最后&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-strings-and-unicode-in-depth#stringprototypeincludes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;String.prototype.includes&lt;/code&gt;&lt;/a&gt; – 表示这个值是否包含这个字符串&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-strings-and-unicode-in-depth#stringprototyperepeat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;String.prototype.repeat&lt;/code&gt;&lt;/a&gt; – 返回这个字符串出现的次数&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-strings-and-unicode-in-depth#stringprototype-symboliterator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;String.prototype[Symbol.iterator]&lt;/code&gt;&lt;/a&gt; – 让你遍历一个 unicode 序列的代码点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-strings-and-unicode-in-depth#unicode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unicode&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-strings-and-unicode-in-depth#stringprototypecodepointat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;String.prototype.codePointAt&lt;/code&gt;&lt;/a&gt; – 八进制数数代码点的数值表示在给定位置的字符串&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-strings-and-unicode-in-depth#stringfromcodepoint%60&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;String.fromCodePoint&lt;/code&gt;&lt;/a&gt; – 给出 &lt;code&gt;...codepoints&lt;/code&gt;,返回一个由 unicode 表示的字符串&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-strings-and-unicode-in-depth#stringprototypenormalize&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;String.prototype.normalize&lt;/code&gt;&lt;/a&gt; – 返回一个 unicode 表示字符串的规范版本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;https://ponyfoo.com/articles/es6-strings-and-unicode-in-depth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入 ES6 字符串和Unicode扩展&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Modules&quot;&gt;&lt;a href=&quot;#Modules&quot; class=&quot;headerlink&quot; title=&quot;Modules&quot;&gt;&lt;/a&gt;Modules&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ES6  的模块默认采用严格模式&lt;/li&gt;
&lt;li&gt;ES6 模块文件对外接口 &lt;a href=&quot;https://ponyfoo.com/articles/es6-modules-in-depth#export&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-modules-in-depth#exporting-a-default-binding&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;export default value&lt;/code&gt;&lt;/a&gt; 输出默认的绑定值&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-modules-in-depth#named-exports&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;export var foo = &amp;#39;bar&amp;#39;&lt;/code&gt;&lt;/a&gt; 输出一个变量&lt;/li&gt;
&lt;li&gt;绑定输出命名的模块在输出的时候是随时可以修改的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export { foo, bar }&lt;/code&gt; 输出 &lt;a href=&quot;https://ponyfoo.com/articles/es6-modules-in-depth#exporting-lists&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;a list of named exports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export { foo as ponyfoo }&lt;/code&gt;  对输出的变量 &lt;code&gt;foo&lt;/code&gt; 通过 as 重命名为 &lt;code&gt;ponyfoo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export { foo as default }&lt;/code&gt; 给默认输出的变量重命名&lt;/li&gt;
&lt;li&gt;作为一个 &lt;a href=&quot;https://ponyfoo.com/articles/es6-modules-in-depth#best-practices-and-export&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;最佳实践&lt;/a&gt;, &lt;code&gt;export default api&lt;/code&gt; 要放在你所有模块的最后,  &lt;code&gt;api&lt;/code&gt; 是一个对象, 避免搞混&lt;/li&gt;
&lt;li&gt;模块加载是自己特定实现的，可以取代 Commonjs&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-modules-in-depth#import&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;import &amp;#39;foo&amp;#39;&lt;/code&gt;&lt;/a&gt; 从默认的模块里加载 &lt;code&gt;foo&lt;/code&gt;  模块&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-modules-in-depth#importing-default-exports&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;import foo from &amp;#39;ponyfoo&amp;#39;&lt;/code&gt;&lt;/a&gt; 指定这个默认输出的 &lt;code&gt;ponyfoo&lt;/code&gt; 给一个本地的变量&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-modules-in-depth#importing-named-exports&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;import {foo, bar} from &amp;#39;baz&amp;#39;&lt;/code&gt;&lt;/a&gt; 从 &lt;code&gt;baz&lt;/code&gt; 模块加载 &lt;code&gt;foo&lt;/code&gt;和 &lt;code&gt;bar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import {foo as bar} from &amp;#39;baz&amp;#39;&lt;/code&gt; 加载一个命名为 &lt;code&gt;foo&lt;/code&gt; 变量并且重命名为 &lt;code&gt;bar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import {default} from &amp;#39;foo&amp;#39;&lt;/code&gt; 也可以加载默认输出的模块&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import {default as bar} from &amp;#39;foo&amp;#39;&lt;/code&gt; 加载默认输出的模块并且重命名变量为 &lt;code&gt;bar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在一个声明里面包含默认模块 &lt;code&gt;foo&lt;/code&gt; 和命名的 &lt;code&gt;bar&lt;/code&gt;,&lt;code&gt;baz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ponyfoo.com/articles/es6-modules-in-depth#import-all-the-things&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;import * as foo from &amp;#39;foo&amp;#39;&lt;/code&gt;&lt;/a&gt; 加载命名空间对象&lt;ul&gt;
&lt;li&gt;通过  &lt;code&gt;foo[name]&lt;/code&gt; 包含所有命名的输出&lt;/li&gt;
&lt;li&gt;如果模块里有默认的输出，则 &lt;code&gt;foo.default&lt;/code&gt; 包含的就是默认的输出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;阅读 &lt;a href=&quot;https://ponyfoo.com/articles/es6-modules-in-depth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 ES6 模块&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前就列出了这些点. 最后, 我推荐你阅读这个系列的文章 &lt;a href=&quot;https://ponyfoo.com/articles/tagged/es6-in-depth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 ES6&lt;/a&gt; .&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ES6 - 也被叫做 Harmony、&lt;code&gt;es-next&lt;/code&gt;、ES2015，是这门语言最新的标准规范&lt;/li&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="http://blog.yongyuan.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>一些 HTML 和 CSS 中的坑</title>
    <link href="http://blog.yongyuan.com/post/%20%E4%B8%80%E4%BA%9B%20HTML%20%E5%92%8C%20CSS%20%E4%B8%AD%E7%9A%84%E5%9D%91.html"/>
    <id>http://blog.yongyuan.com/post/ 一些 HTML 和 CSS 中的坑.html</id>
    <published>2016-03-05T16:00:00.000Z</published>
    <updated>2016-06-19T13:33:31.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;lt-DOCTYPE-gt-声明&quot;&gt;&lt;a href=&quot;#lt-DOCTYPE-gt-声明&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;!DOCTYPE&amp;gt; 声明&quot;&gt;&lt;/a&gt;&amp;lt;!DOCTYPE&amp;gt; 声明&lt;/h4&gt;&lt;p&gt;&amp;lt;!DOCTYPE&amp;gt; 会声明一个文档类型给浏览器识别，例如我们经常使用的 HTML5 的文档类型声明是这样的：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;&lt;br&gt;如果你没有为页面声明文档类型，浏览器将会使用 Quirks 模式（兼容模式）去渲染页面上非标准的表格，input 控件和其它元素，这样可能会引发一些问题。&lt;/p&gt;
&lt;h4 id=&quot;盒模型计算&quot;&gt;&lt;a href=&quot;#盒模型计算&quot; class=&quot;headerlink&quot; title=&quot;盒模型计算&quot;&gt;&lt;/a&gt;盒模型计算&lt;/h4&gt;&lt;p&gt;当元素设置了 padding 或者 border-width 的时候，实际上元素的实际宽度是要比设置的 width 要 宽 的。为了避免这个尴尬的问题，我们可以统一使用 &lt;code&gt;box-sizing: border-box;&lt;/code&gt; 来重新设置元素盒模型宽度的计算范围。&lt;/p&gt;
&lt;h4 id=&quot;rem-单位和-Safari-Mobile-的爱恨情仇&quot;&gt;&lt;a href=&quot;#rem-单位和-Safari-Mobile-的爱恨情仇&quot; class=&quot;headerlink&quot; title=&quot;rem 单位和 Safari Mobile 的爱恨情仇&quot;&gt;&lt;/a&gt;rem 单位和 Safari Mobile 的爱恨情仇&lt;/h4&gt;&lt;p&gt;虽然 Safari Mobible 已经支持识别属性值的 rem 单位了，但是当你在媒体查询条件中使用rem的时候，会导致页面的文字在不同尺寸下来回跳闪，亮瞎你的双眼。&lt;/p&gt;
&lt;p&gt;解决办法是在媒体查询条件中使用em代替rem。&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;html&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;16px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Causes flashing bug in Mobile Safari */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; (min-width: &lt;span class=&quot;number&quot;&gt;40rem&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;html&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Works great in Mobile Safari */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; (min-width: &lt;span class=&quot;number&quot;&gt;40em&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;html&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;紧急求助！ 如果你有向 Apple 或者 Webkit 报告这个 BUG，请告诉我，我会把链接附上。因为这个 BUG 只出现在手机端的 Safari 上，桌面版并没有，所以我也不是很确定应该向哪里提 BUG。&lt;/p&gt;
&lt;h4 id=&quot;高贵的浮动元素&quot;&gt;&lt;a href=&quot;#高贵的浮动元素&quot; class=&quot;headerlink&quot; title=&quot;高贵的浮动元素&quot;&gt;&lt;/a&gt;高贵的浮动元素&lt;/h4&gt;&lt;p&gt;浮动元素最好放置在文档流的开头。因为浮动元素需要内容环绕，否则除了浮动显示内容，它还容易出现一些意想不到的负面效果。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;float&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Float&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;div &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;清除浮动&quot;&gt;&lt;a href=&quot;#清除浮动&quot; class=&quot;headerlink&quot; title=&quot;清除浮动&quot;&gt;&lt;/a&gt;清除浮动&lt;/h4&gt;&lt;p&gt;当你使用完float之后，你可能需要清除它。当某元素使用了float之后，附近元素的内容都会环绕着它，只有清除了浮动这个影响才会去除。你可以使用下面的方法清除浮动。&lt;/p&gt;
&lt;p&gt;根据 &lt;code&gt;clearfix&lt;/code&gt; 大法 定义一个样式类，使用它来清除浮动：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.clearfix&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:before&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.clearfix&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:after&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: table;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.clearfix&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:after&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;clear&lt;/span&gt;: both;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者你也可以使用overflow，在父元素上设置&lt;code&gt;overflow:auto&lt;/code&gt;;或者&lt;code&gt;overflow:hidden&lt;/code&gt;;也可以达到目的。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.parent&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;overflow&lt;/span&gt;: auto; &lt;span class=&quot;comment&quot;&gt;/* clearfix */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.other-parent&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;overflow&lt;/span&gt;: hidden; &lt;span class=&quot;comment&quot;&gt;/* clearfix */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然你要小心使用overflow，因为它会给其他元素带来一些不可预料的影响。&lt;/p&gt;
&lt;p&gt;重大提示！ 由于样式类可以被覆盖或者增加其他内容，所以你最好在样式类上加上 &lt;code&gt;/ clearfix /&lt;/code&gt; 注释用以提示你的同伴。&lt;/p&gt;
&lt;h4 id=&quot;浮动元素计算高度&quot;&gt;&lt;a href=&quot;#浮动元素计算高度&quot; class=&quot;headerlink&quot; title=&quot;浮动元素计算高度&quot;&gt;&lt;/a&gt;浮动元素计算高度&lt;/h4&gt;&lt;p&gt;当父元素仅包含一个浮动元素的时候，此时父元素最终高度是 0。通过在父元素上使用 clearfix 清除浮动之后可以强制浏览器计算父元素的高度为浮动元素高度。&lt;/p&gt;
&lt;h4 id=&quot;浮动元素就是块级元素&quot;&gt;&lt;a href=&quot;#浮动元素就是块级元素&quot; class=&quot;headerlink&quot; title=&quot;浮动元素就是块级元素&quot;&gt;&lt;/a&gt;浮动元素就是块级元素&lt;/h4&gt;&lt;p&gt;当一个元素被设置了 float 属性，那么它会自动设置 &lt;code&gt;display: block&lt;/code&gt;。所以不要同时设置这两个属性，因为 float 会覆盖你的 display 设置。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.element&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: block; &lt;span class=&quot;comment&quot;&gt;/* Not necessary */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;趣闻： 许多年前，我们不得不给浮动元素设置&lt;code&gt;display: inline;&lt;/code&gt;属性避免元素在 IE6 上触发 margin 加倍的 bug。好在现在我们已经不用管这些了。&lt;/p&gt;
&lt;h4 id=&quot;垂直方向相邻-margin-合并&quot;&gt;&lt;a href=&quot;#垂直方向相邻-margin-合并&quot; class=&quot;headerlink&quot; title=&quot;垂直方向相邻 margin 合并&quot;&gt;&lt;/a&gt;垂直方向相邻 margin 合并&lt;/h4&gt;&lt;p&gt;相邻元素的 margin-bottom 和 margin-top （两个margin是挨着的）一般情况会发生合并，但是对 float 元素和 &lt;code&gt;position: absolute;&lt;/code&gt; 的元素是无效的。阅读这篇 MDN 文档，或者这篇 CSS2 规范中的 margin 合并 了解更多。&lt;/p&gt;
&lt;p&gt;注意！水平方向相邻的 margin 是永远不会合并的！&lt;/p&gt;
&lt;h4 id=&quot;给表格的定义样式&quot;&gt;&lt;a href=&quot;#给表格的定义样式&quot; class=&quot;headerlink&quot; title=&quot;给表格的定义样式&quot;&gt;&lt;/a&gt;给表格的&lt;tr&gt;定义样式&lt;/tr&gt;&lt;/h4&gt;&lt;p&gt;除非你给父元素&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 设置了 &lt;code&gt;border-cllapse: collapse;&lt;/code&gt; 属性，否则你的 &lt;tr&gt; 是无法直接设置 border 属性的。当然你还需要知道的是，如果你的&lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt;中的子元素 &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;或者&lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt; 设置了一个和父元素一样大小的 border-width，那么父元素 &lt;/tr&gt;&lt;tr&gt; 中的设置将不会生效。无例子无真相，点击这里查看例子。&lt;/tr&gt;&lt;/p&gt;
&lt;h4 id=&quot;Firefox-和-lt-input-gt-按钮的悲欢离合&quot;&gt;&lt;a href=&quot;#Firefox-和-lt-input-gt-按钮的悲欢离合&quot; class=&quot;headerlink&quot; title=&quot;Firefox 和 &amp;lt;input&amp;gt;按钮的悲欢离合&quot;&gt;&lt;/a&gt;Firefox 和 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;按钮的悲欢离合&lt;/h4&gt;&lt;p&gt;不知道为什么，Firefox 会自动给&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;类按钮增加 line-height 属性，并且你不能自定义样式覆盖它！针对这个问题你有两个选择：&lt;/p&gt;
&lt;h4 id=&quot;坚持使用-lt-button-gt-元素&quot;&gt;&lt;a href=&quot;#坚持使用-lt-button-gt-元素&quot; class=&quot;headerlink&quot; title=&quot;坚持使用 &amp;lt;button&amp;gt; 元素&quot;&gt;&lt;/a&gt;坚持使用 &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 元素&lt;/h4&gt;&lt;p&gt;在你的按钮上不要使用 line-height&lt;br&gt;如果你选择了第一个（我也推荐这个因为怎么看使用 &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;也是更好的选择），下面这个是你需要知道的：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Not so good --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Save changes&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Cancel&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Super good everywhere --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;submit&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Save changes&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Cancel&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你选择了第二个，其实你只要不给元素设置 line-height 转而只使用padding 去达到垂直居中按钮文字也还好啦。大家可以在 Firefox 中浏览示例查看问题表现和解决方法。&lt;/p&gt;
&lt;p&gt;捷报！ 这个问题似乎在 Firefox 30 中已经修复了。但是老版本肯定还是会存在的，所以使用上依旧要小心。&lt;/p&gt;
&lt;h4 id=&quot;Firefox-默认给按钮增加外边框&quot;&gt;&lt;a href=&quot;#Firefox-默认给按钮增加外边框&quot; class=&quot;headerlink&quot; title=&quot;Firefox 默认给按钮增加外边框&quot;&gt;&lt;/a&gt;Firefox 默认给按钮增加外边框&lt;/h4&gt;&lt;p&gt;当按钮获得焦点即 :focus 的时候，Firefox 默认给按钮（包括&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;和 &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;）增加了外边框。这个设置如果你觉得很奇怪的话可以使用下面的 CSS 覆盖它：&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;input:&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:-moz-focus-inner&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;button:&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:-moz-focus-inner&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;symbol&quot;&gt;padding:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;symbol&quot;&gt;border:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以在之前的例子中看到修复后的实际效果。&lt;/p&gt;
&lt;p&gt;重大提示！ 确保为你的按钮，链接和 input 空间增加了获得焦点的状态。为这个状态提供可视化对于一些使用Tab键切换焦点和示例不好的人来说是极为重要的用户体验。&lt;/p&gt;
&lt;h4 id=&quot;总是给-lt-button-gt-元素设置-type-属性&quot;&gt;&lt;a href=&quot;#总是给-lt-button-gt-元素设置-type-属性&quot; class=&quot;headerlink&quot; title=&quot;总是给&amp;lt;button&amp;gt;元素设置 type 属性&quot;&gt;&lt;/a&gt;总是给&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;元素设置 type 属性&lt;/h4&gt;&lt;p&gt;&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;默认的 type 属性值是 submit，这个意味着如果按钮在表单中点击可以提交表单。使用 type=”button” 可以让按钮在表单中回归本来，而不会触发提交事件。当然如果你想要设置提交事件，设置 type=”submit” 即可。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;submit&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Save changes&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Cancel&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当你不在表单中需要使用 &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;元素时，最好也设置一下 &lt;code&gt;type=&amp;quot;button&amp;quot;&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;button &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;dismiss&quot;&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt;&amp;gt;x&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 趣闻： IE7 是不支持读取 &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 元素的 value 属性值的。当它读取 value 属性的值的时候，它会去查找元素的 innerHTML 的值并复制给它。然而我为什么没有把这个坑给列出来呢？主要是因为 IE7 的份额在日渐下滑，已经很少人在用它了，另外一个原因也是因为几乎很少人会同时设置 &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;元素的 value 属性和它的 innerHTML。&lt;/p&gt;
&lt;h4 id=&quot;IE-选择器限制&quot;&gt;&lt;a href=&quot;#IE-选择器限制&quot; class=&quot;headerlink&quot; title=&quot;IE 选择器限制&quot;&gt;&lt;/a&gt;IE 选择器限制&lt;/h4&gt;&lt;p&gt;IE9- 允许一个样式表中最多只有 4096 个选择器。对于页面内样式表&lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt; 也有每页最大 31 个选择器的限制。当然其他浏览器是没有这个问题的。你要么选择分割你的 CSS 样式表，要么对你的代码进行重构。我个人建议选择后者。&lt;/p&gt;
&lt;p&gt;下面给一段代码告诉下大家浏览器是如何计算选择器个数的：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* One selector */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.element&lt;/span&gt; &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Two more selectors */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.element&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.other-element&lt;/span&gt; &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Three more selectors */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;input&lt;/span&gt;[type=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.form-control&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.form-group&lt;/span&gt; &amp;gt; &lt;span class=&quot;selector-tag&quot;&gt;input&lt;/span&gt; &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Position-属性值讲解&quot;&gt;&lt;a href=&quot;#Position-属性值讲解&quot; class=&quot;headerlink&quot; title=&quot;Position 属性值讲解&quot;&gt;&lt;/a&gt;Position 属性值讲解&lt;/h4&gt;&lt;p&gt;元素设置&lt;code&gt;position: fixed;&lt;/code&gt; 属性之后，位置是相对于浏览器的视口来设置的。元素设置 &lt;code&gt;position: absolute;&lt;/code&gt;属性之后，位置是相对于最近的一个 position 值为非 static （例如 relative, absolute 或 fixed）的父元素而设置的。&lt;/p&gt;
&lt;h4 id=&quot;Position-和-Width-不得不说的故事&quot;&gt;&lt;a href=&quot;#Position-和-Width-不得不说的故事&quot; class=&quot;headerlink&quot; title=&quot;Position 和 Width 不得不说的故事&quot;&gt;&lt;/a&gt;Position 和 Width 不得不说的故事&lt;/h4&gt;&lt;p&gt;不要对一个设置了 position: [absolute|fixed];, left 和 right 的元素设置 width: 100%;。这里 width:100% 和设置了 left: 0;及right: 0; 的效果是一样的。两者择其一，没必要都用。 Don’t set width: 100%; on an element that has position: [absolute|fixed];, left, and right. The use of width: 100%; is the same as the combined use of left: 0; and right: 0;. Use one or the other, but not both.&lt;/p&gt;
&lt;h4 id=&quot;position-fixed-和transform-的恩怨是非&quot;&gt;&lt;a href=&quot;#position-fixed-和transform-的恩怨是非&quot; class=&quot;headerlink&quot; title=&quot;position: fixed;和transform 的恩怨是非&quot;&gt;&lt;/a&gt;position: fixed;和transform 的恩怨是非&lt;/h4&gt;&lt;p&gt;当一个 position: fixed; 元素的父元素设置了 transform 属性之后，浏览器会破坏 position: fixed 的解析。使用 transform 属性元素脱离文档流，相当于创建了一个新的内容块，强制父元素的表现和 position: relative; 一样，强制 position: fixed; 的元素的行为表现和 position: absolute; 一样。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;lt-DOCTYPE-gt-声明&quot;&gt;&lt;a href=&quot;#lt-DOCTYPE-gt-声明&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;!DOCTYPE&amp;gt; 声明&quot;&gt;&lt;/a&gt;&amp;lt;!DOCTYPE&amp;gt; 声明&lt;/h4&gt;&lt;p&gt;&amp;lt;!DOC
    
    </summary>
    
    
      <category term="CSS" scheme="http://blog.yongyuan.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Every day code 上线网站了</title>
    <link href="http://blog.yongyuan.com/post/every%20day%20code.html"/>
    <id>http://blog.yongyuan.com/post/every day code.html</id>
    <published>2016-02-16T16:00:00.000Z</published>
    <updated>2016-06-19T13:38:08.000Z</updated>
    
    <content type="html">&lt;p&gt;every day code 是我从 2014 年开始在 Github 上建的一个 repo，当时的意图是每天练习一个代码，可以是 js、html+css 等内容。&lt;br&gt;然而结果并没有向名字那样的每天都坚持写，但是也有一直断断续续的在写。&lt;/p&gt;
&lt;p&gt;今天在 Github 上找到一个程序，可以基于 issues 生成一个网站，并且可以基于 labels 生成 tags。所以我就打算用它来把 every day code 这个生成一个网站，这样更易于我查看和分享。&lt;/p&gt;
&lt;p&gt;地址就是： &lt;a href=&quot;http://code.yongyuan.us&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://code.yongyuan.us&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;every day code 是我从 2014 年开始在 Github 上建的一个 repo，当时的意图是每天练习一个代码，可以是 js、html+css 等内容。&lt;br&gt;然而结果并没有向名字那样的每天都坚持写，但是也有一直断断续续的在写。&lt;/p&gt;
&lt;p&gt;今天在 Githu
    
    </summary>
    
    
      <category term="杂谈" scheme="http://blog.yongyuan.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>如果让我给前端新人推荐三本 JavaScript 书</title>
    <link href="http://blog.yongyuan.com/post/%E5%A6%82%E6%9E%9C%E8%AE%A9%E6%88%91%E7%BB%99%E5%89%8D%E7%AB%AF%E6%96%B0%E4%BA%BA%E6%8E%A8%E8%8D%90%E4%B8%89%E6%9C%AC%20JavaScript%20%E4%B9%A6.html"/>
    <id>http://blog.yongyuan.com/post/如果让我给前端新人推荐三本 JavaScript 书.html</id>
    <published>2016-01-23T16:00:00.000Z</published>
    <updated>2016-06-19T13:40:35.000Z</updated>
    
    <content type="html">&lt;p&gt;前端这几年发展迅猛，各种 js 书籍也是越来越多，很多一开始接触前端的新人可能学习 js 无从下手。如果让我给大家推荐三本 js 书的话，我可能会改变之前的观点了，之前我也是和很多人的观点一样，从 《javaScript Dom 编程艺术》以及 《javaScript 高级程序》开始学习过来的，犀牛书也放在身边，蝴蝶书也翻过。但是啊，因为高级程序和犀牛书太厚了，涉及的东西太全了。很多新人估计都没那个耐心看，不过说实话我到现在也只看完过高级程序，犀牛书就是粗略的翻过一些。&lt;/p&gt;
&lt;p&gt;那么我现在的观点是啥呢，说实话 Js 还是有几本很棒的书的，除了上面说的几本经典的还有比如 《JavaScript 启示录》该书对 js 的对象进行详细的讲解，毕竟在 js 里一切皆对象，《javaScript 忍者秘籍》不错，但是买来看了几章，发现又是一本被翻译毁了的一本书，看了几章感兴趣的基本就不想看了，还有一些不错的书我就不举例了，因为那些都不是我要推荐的。&lt;/p&gt;
&lt;p&gt;我要推荐的这三本从 js 入门到深入，再到了解一些本质都有包含，分别是：&lt;br&gt;1.《javaScript 面向对象编程》&lt;br&gt;这本书现在是第二版了，我看的也是第二版，这本书包含了很多 js 基础的东西，从最基本的对象属性以及一些作用域，闭包，原型，继承啥的都讲的很清楚透彻，而且又不是很厚，作为入门书籍应该还是很不错的。之前一些在高程上没看明白的也在这本书上看明白了。&lt;br&gt;2.《javaScript 模式》&lt;br&gt;这本书也很早就有了，相比另外一本《javaScript 设计模式》 我更推荐这本，从最开始的编码规范讲起（编写可维护的 javascript 一书就不需要了），讲了很多一些 js 有关的代码模式及反模式，告诉我们怎么良好的组织 js 代码，很不错的一本书，虽然网上说市面上的纸质书翻译的没有 Github 上拔赤翻译的那个版本好，但是我两个都看了也没觉得有啥大区别，感觉整体都挺好的。&lt;br&gt;3.《你不知道的 JavaScript》&lt;br&gt;这个系列应该是最近最受关注的 javascript 书籍了，国内目前只翻译了一本，还有几个部分没有翻译出来，我也在期待那部分，这本书从给我们讲了很多 js 语言级别上的东西，让我们更深入的了解 javascript 这门语言，这系列书我戏称为 js 届的 《javaScript 元编程》&lt;/p&gt;
&lt;p&gt;我有上10本 js 的书，每本不一定都看完了，但是感兴趣的章节都翻过，像国内爱民前辈的绿皮书也是一本很不错的书，可以进一步提升你的 js ，但是如果现在要我推荐三本 js 书给前端新人，那么上面这三本基本上就是我要推荐的，每本都不厚，利用业余时间可以很快看完，看完还可以反复看，至于其他的一些问题，直接 google 吧！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;前端这几年发展迅猛，各种 js 书籍也是越来越多，很多一开始接触前端的新人可能学习 js 无从下手。如果让我给大家推荐三本 js 书的话，我可能会改变之前的观点了，之前我也是和很多人的观点一样，从 《javaScript Dom 编程艺术》以及 《javaScript 高级
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://blog.yongyuan.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>命令行的艺术</title>
    <link href="http://blog.yongyuan.com/post/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9A%84%E8%89%BA%E6%9C%AF%20.html"/>
    <id>http://blog.yongyuan.com/post/命令行的艺术 .html</id>
    <published>2016-01-16T16:00:00.000Z</published>
    <updated>2016-06-19T13:40:26.000Z</updated>
    
    <content type="html">&lt;p&gt;摘自： &lt;a href=&quot;https://github.com/jlevy/the-art-of-command-line&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jlevy/the-art-of-command-line&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;命令行的艺术&quot;&gt;&lt;a href=&quot;#命令行的艺术&quot; class=&quot;headerlink&quot; title=&quot;命令行的艺术&quot;&gt;&lt;/a&gt;命令行的艺术&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#必读&quot;&gt;必读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#基础&quot;&gt;基础&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#日常使用&quot;&gt;日常使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#文件及数据处理&quot;&gt;文件及数据处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#系统调试&quot;&gt;系统调试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#单行脚本&quot;&gt;单行脚本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#冷门但有用&quot;&gt;冷门但有用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#仅限-os-x-系统&quot;&gt;仅限 OS X 系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#更多资源&quot;&gt;更多资源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#免责声明&quot;&gt;免责声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#授权条款&quot;&gt;授权条款&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;熟练使用命令行是一种常常被忽视，或被认为难以掌握的技能，但实际上，它会提高你作为工程师的灵活性以及生产力。本文是一份我在 Linux 上工作时，发现的一些命令行使用技巧的摘要。有些技巧非常基础，而另一些则相当复杂，甚至晦涩难懂。这篇文章并不长，但当你能够熟练掌握这里列出的所有技巧时，你就学会了很多关于命令行的东西了。&lt;/p&gt;
&lt;p&gt;这篇文章是&lt;a href=&quot;AUTHORS.md&quot;&gt;许多作者和译者&lt;/a&gt;共同的成果。这里的大部分内容&lt;br&gt;&lt;a href=&quot;http://www.quora.com/What-are-some-lesser-known-but-useful-Unix-commands&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;首次&lt;/a&gt;&lt;a href=&quot;http://www.quora.com/What-are-the-most-useful-Swiss-army-knife-one-liners-on-Unix&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;出现&lt;/a&gt;于 &lt;a href=&quot;http://www.quora.com/What-are-some-time-saving-tips-that-every-Linux-user-should-know&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Quora&lt;/a&gt;，但考虑到这里的人们都具有学习的天赋且乐于接受别人的建议，使用 Github 来做这件事是更佳的选择。如果你在本文中发现了错误或者存在可以改善的地方，请果断提交 Issue 或 Pull Request！(当然在提交前请看一下必读节和已有的 PR/issue）。&lt;/p&gt;
&lt;h2 id=&quot;必读&quot;&gt;&lt;a href=&quot;#必读&quot; class=&quot;headerlink&quot; title=&quot;必读&quot;&gt;&lt;/a&gt;必读&lt;/h2&gt;&lt;p&gt;涵盖范围：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这篇文章对刚接触命令行的新手以及具有命令行使用经验的人都有用处。本文致力于做到&lt;em&gt;覆盖面广&lt;/em&gt;（尽量包括一切重要的内容），&lt;em&gt;具体&lt;/em&gt;（给出最常见的具体的例子）以及&lt;em&gt;简洁&lt;/em&gt;（避免不必要的，或是可以在其他地方轻松查到的细枝末节）。每个技巧在特定情境下或是基本的，或是能显著节约时间。&lt;/li&gt;
&lt;li&gt;本文为 Linux 所写，除了&lt;a href=&quot;#仅限-os-x-系统&quot;&gt;仅限 OS X 系统&lt;/a&gt;节。其它节中的大部分内容都适用于其它 Unix 系统或 MacOS 系统，甚至 Cygwin。&lt;/li&gt;
&lt;li&gt;本文关注于交互式 Bash，尽管很多技巧也适用于其他 shell 或 Bash 脚本。&lt;/li&gt;
&lt;li&gt;本文包括了“标准的”Unix 命令和需要安装特定包的命令，只要它们足够重要。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了能在一页内展示尽量多的东西，一些具体的信息会被间接的包含在引用页里。聪明机智的你如果掌握了使用 Google 搜索引擎的基本思路与命令，那么你将可以查阅到更多的详细信息。使用 &lt;code&gt;apt-get&lt;/code&gt;／&lt;code&gt;yum&lt;/code&gt;／&lt;code&gt;dnf&lt;/code&gt;／&lt;code&gt;pacman&lt;/code&gt;／&lt;code&gt;pip&lt;/code&gt;／&lt;code&gt;brew&lt;/code&gt;（以及其它合适的包管理器）来安装新程序。&lt;/li&gt;
&lt;li&gt;使用 &lt;a href=&quot;http://explainshell.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Explainshell&lt;/a&gt; 去获取相关命令、参数、管道等内容的解释。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;学习 Bash 的基础知识。具体来说，输入 &lt;code&gt;man bash&lt;/code&gt; 并至少全文浏览一遍; 它很简单并且不长。其他的 shell 可能很好用，但 Bash 功能强大且几乎所有情况下都是可用的 （ &lt;em&gt;只&lt;/em&gt;学习 zsh，fish 或其他的 shell 的话，在你自己的电脑上会显得很方便，但在很多情况下会限制你，比如当你需要在服务器上工作时）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学习并掌握至少一个基于文本的编辑器。通常 Vim （&lt;code&gt;vi&lt;/code&gt;） 会是你最好的选择，因为在终端里进行随机编辑 Vim 真的毫无敌手，哪怕是 Emacs、某大型 IDE 甚至时下非常流行的编辑器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学会如何使用 &lt;code&gt;man&lt;/code&gt; 命令去阅读文档。学会使用 &lt;code&gt;apropos&lt;/code&gt; 去查找文档。了解有些命令并不对应可执行文件，而是Bash内置的，可以使用 &lt;code&gt;help&lt;/code&gt; 和 &lt;code&gt;help -d&lt;/code&gt; 命令获取帮助信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学会使用 &lt;code&gt;&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;&lt;/code&gt; 来重定向输出和输入，学会使用 &lt;code&gt;|&lt;/code&gt; 来重定向管道。明白 &lt;code&gt;&amp;gt;&lt;/code&gt; 会覆盖了输出文件而 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 是在文件末添加。了解标准输出 stdout 和标准错误 stderr。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学会使用通配符 &lt;code&gt;*&lt;/code&gt; （或许再算上 &lt;code&gt;?&lt;/code&gt; 和 &lt;code&gt;[&lt;/code&gt;…&lt;code&gt;]&lt;/code&gt;） 和引用以及引用中 &lt;code&gt;&amp;#39;&lt;/code&gt; 和 &lt;code&gt;&amp;quot;&lt;/code&gt; 的区别。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;熟悉 Bash 任务管理工具：&lt;code&gt;&amp;amp;&lt;/code&gt;，&lt;strong&gt;ctrl-z&lt;/strong&gt;，&lt;strong&gt;ctrl-c&lt;/strong&gt;，&lt;code&gt;jobs&lt;/code&gt;，&lt;code&gt;fg&lt;/code&gt;，&lt;code&gt;bg&lt;/code&gt;，&lt;code&gt;kill&lt;/code&gt; 等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解 &lt;code&gt;ssh&lt;/code&gt;，以及学会通过使用 &lt;code&gt;ssh-agent&lt;/code&gt;，&lt;code&gt;ssh-add&lt;/code&gt; 等命令来实现基本的无密码认证。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学会基本的文件管理：&lt;code&gt;ls&lt;/code&gt; 和 &lt;code&gt;ls -l&lt;/code&gt; （了解 &lt;code&gt;ls -l&lt;/code&gt; 中每一列代表的意义），&lt;code&gt;less&lt;/code&gt;，&lt;code&gt;head&lt;/code&gt;，&lt;code&gt;tail&lt;/code&gt; 和 &lt;code&gt;tail -f&lt;/code&gt; （甚至 &lt;code&gt;less +F&lt;/code&gt;），&lt;code&gt;ln&lt;/code&gt; 和 &lt;code&gt;ln -s&lt;/code&gt; （了解硬链接与软链接的区别），&lt;code&gt;chown&lt;/code&gt;，&lt;code&gt;chmod&lt;/code&gt;，&lt;code&gt;du&lt;/code&gt; （硬盘使用情况概述：&lt;code&gt;du -hs *&lt;/code&gt;）。 关于文件系统的管理，学习 &lt;code&gt;df&lt;/code&gt;，&lt;code&gt;mount&lt;/code&gt;，&lt;code&gt;fdisk&lt;/code&gt;，&lt;code&gt;mkfs&lt;/code&gt;，&lt;code&gt;lsblk&lt;/code&gt;。知道 inode 是什么（与 &lt;code&gt;ls -i&lt;/code&gt; 和 &lt;code&gt;df -i&lt;/code&gt; 等命令相关）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学习基本的网络管理：&lt;code&gt;ip&lt;/code&gt; 或 &lt;code&gt;ifconfig&lt;/code&gt;，&lt;code&gt;dig&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;熟悉正则表达式，以及 &lt;code&gt;grep&lt;/code&gt;／&lt;code&gt;egrep&lt;/code&gt; 里不同参数的作用，例如 &lt;code&gt;-i&lt;/code&gt;，&lt;code&gt;-o&lt;/code&gt;，&lt;code&gt;-v&lt;/code&gt;，&lt;code&gt;-A&lt;/code&gt;，&lt;code&gt;-B&lt;/code&gt; 和 &lt;code&gt;-C&lt;/code&gt;，这些参数是值得学习并掌握的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学会使用 &lt;code&gt;apt-get&lt;/code&gt;，&lt;code&gt;yum&lt;/code&gt;，&lt;code&gt;dnf&lt;/code&gt; 或 &lt;code&gt;pacman&lt;/code&gt; （取决于你使用的 Linux 发行版）来查找或安装软件包。并确保你的环境中有 &lt;code&gt;pip&lt;/code&gt; 来安装基于 Python 的命令行工具 （接下来提到的部分程序使用 &lt;code&gt;pip&lt;/code&gt; 来安装会很方便）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;日常使用&quot;&gt;&lt;a href=&quot;#日常使用&quot; class=&quot;headerlink&quot; title=&quot;日常使用&quot;&gt;&lt;/a&gt;日常使用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在 Bash 中，可以使用 &lt;strong&gt;Tab&lt;/strong&gt; 自动补全参数，使用 &lt;strong&gt;ctrl-r&lt;/strong&gt; 搜索命令行历史（在按下之后，键入便可以搜索，重复按下 &lt;strong&gt;ctrl-r&lt;/strong&gt; 会在更多匹配中循环，按下 &lt;strong&gt;Enter&lt;/strong&gt; 会执行找到的命令，按下右方向键会将结果放入当前行中，使你可以进行编辑）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 Bash 中，可以使用 &lt;strong&gt;ctrl-w&lt;/strong&gt; 删除你键入的最后一个单词，使用 &lt;strong&gt;ctrl-u&lt;/strong&gt; 删除整行，使用 &lt;strong&gt;alt-b&lt;/strong&gt; 和 &lt;strong&gt;alt-f&lt;/strong&gt; 以单词为单位移动光标，使用 &lt;strong&gt;ctrl-a&lt;/strong&gt; 将光标移至行首，使用 &lt;strong&gt;ctrl-e&lt;/strong&gt; 将光标移至行尾，使用 &lt;strong&gt;ctrl-k&lt;/strong&gt; 删除光标至行尾的所有内容，使用 &lt;strong&gt;ctrl-l&lt;/strong&gt; 清屏。键入 &lt;code&gt;man readline&lt;/code&gt; 查看 Bash 中的默认快捷键，内容很多。例如 &lt;strong&gt;alt-.&lt;/strong&gt; 循环地移向前一个参数，以及 &lt;strong&gt;alt-*&lt;/strong&gt; 展开通配符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你喜欢的话，可以键入 &lt;code&gt;set -o vi&lt;/code&gt; 来使用 vi 风格的快捷键，而 &lt;code&gt;set -o emacs&lt;/code&gt; 可以把它改回来。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为了方便地键入长命令，在设置你的编辑器后（例如 &lt;code&gt;export EDITOR=vim&lt;/code&gt;），键入 &lt;strong&gt;ctrl-x&lt;/strong&gt; &lt;strong&gt;ctrl-e&lt;/strong&gt; 会打开一个编辑器来编辑当前命令。在 vi 模式下则键入 &lt;strong&gt;escape-v&lt;/strong&gt; 实现相同的功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;键入 &lt;code&gt;history&lt;/code&gt; 查看命令行历史记录。其中有许多缩写，例如 &lt;code&gt;!$&lt;/code&gt;（最后键入的参数）和 &lt;code&gt;!!&lt;/code&gt;（最后键入的命令），尽管通常被 &lt;strong&gt;ctrl-r&lt;/strong&gt; 和 &lt;strong&gt;alt-.&lt;/strong&gt; 取代。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;回到上一个工作路径：&lt;code&gt;cd -&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果你输入命令的时候改变了主意，按下 &lt;strong&gt;alt-#&lt;/strong&gt; 来在行首添加 &lt;code&gt;#&lt;/code&gt;，或者依次按下 &lt;strong&gt;ctrl-a&lt;/strong&gt;， &lt;strong&gt;#&lt;/strong&gt;， &lt;strong&gt;enter&lt;/strong&gt;。这样做的话，之后你可以很方便的利用命令行历史回到你刚才输入到一半的命令。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;xargs&lt;/code&gt; （ 或 &lt;code&gt;parallel&lt;/code&gt;）。他们非常给力。注意到你可以控制每行参数个数（&lt;code&gt;-L&lt;/code&gt;）和最大并行数（&lt;code&gt;-P&lt;/code&gt;）。如果你不确定它们是否会按你想的那样工作，先使用 &lt;code&gt;xargs echo&lt;/code&gt; 查看一下。此外，使用 &lt;code&gt;-I{}&lt;/code&gt; 会很方便。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;find . -name &lt;span class=&quot;string&quot;&gt;&#39;*.py&#39;&lt;/span&gt; | xargs grep some_&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat hosts | xargs -I&amp;#123;&amp;#125; ssh root@&amp;#123;&amp;#125; hostname&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pstree -p&lt;/code&gt; 有助于展示进程树。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;pgrep&lt;/code&gt; 和 &lt;code&gt;pkill&lt;/code&gt; 根据名字查找进程或发送信号（&lt;code&gt;-f&lt;/code&gt; 参数通常有用）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解你可以发往进程的信号的种类。比如，使用 &lt;code&gt;kill -STOP [pid]&lt;/code&gt; 停止一个进程。使用 &lt;code&gt;man 7 signal&lt;/code&gt; 查看详细列表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;nohup&lt;/code&gt; 或 &lt;code&gt;disown&lt;/code&gt; 使一个后台进程持续运行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;netstat -lntp&lt;/code&gt; 或 &lt;code&gt;ss -plat&lt;/code&gt; 检查哪些进程在监听端口（默认是检查 TCP 端口; 使用参数 &lt;code&gt;-u&lt;/code&gt; 检查 UDP 端口）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有关打开套接字和文件，请参阅 &lt;code&gt;lsof&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;uptime&lt;/code&gt; 或 &lt;code&gt;w&lt;/code&gt; 来查看系统已经运行多长时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;alias&lt;/code&gt; 来创建常用命令的快捷形式。例如：&lt;code&gt;alias ll=&amp;#39;ls -latr&amp;#39;&lt;/code&gt; 使你可以方便地执行&lt;code&gt;ls -latr&lt;/code&gt;命令。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 Bash 脚本中，使用 &lt;code&gt;set -x&lt;/code&gt; 去调试输出，尽可能的使用严格模式，使用 &lt;code&gt;set -e&lt;/code&gt; 令脚本在发生错误时退出而不是继续运行，使用 &lt;code&gt;set -u&lt;/code&gt; 来检查是否使用了未赋值的变量，使用 &lt;code&gt;set -o pipefail&lt;/code&gt; 严谨地对待错误（尽管问题可能很微妙）。当牵扯到很多脚本时，使用 &lt;code&gt;trap&lt;/code&gt;。一个好的习惯是在脚本文件开头这样写，这会使它检测一些错误，并在错误发生时中断程序并输出信息：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; -euo pipefail&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;trap&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;echo &#39;error: Script failed: see failed command above&#39;&quot;&lt;/span&gt; ERR&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 Bash 脚本中，子 shell（使用括号 &lt;code&gt;(...)&lt;/code&gt;）是一种组织参数的便捷方式。一个常见的例子是临时地移动工作路径，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# do something in current dir&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; /some/other/dir &amp;amp;&amp;amp; other-command)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# continue in original dir&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 Bash 中，要注意其中有许多形式的扩展。检查变量是否存在：&lt;code&gt;${name:?error message}&lt;/code&gt;。例如，当 Bash 脚本需要一个参数时，可以使用这样的代码 &lt;code&gt;input_file=${1:?usage: $0 input_file}&lt;/code&gt;。数学表达式：&lt;code&gt;i=$(( (i + 1) % 5 ))&lt;/code&gt;。序列：&lt;code&gt;{1..10}&lt;/code&gt;。截断字符串：&lt;code&gt;${var%suffix}&lt;/code&gt; 和 &lt;code&gt;${var#prefix}&lt;/code&gt;。例如，假设 &lt;code&gt;var=foo.pdf&lt;/code&gt;，那么 &lt;code&gt;echo ${var%.pdf}.txt&lt;/code&gt; 将输出 &lt;code&gt;foo.txt&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用括号扩展（&lt;code&gt;{&lt;/code&gt;…&lt;code&gt;}&lt;/code&gt;）来减少输入相似文本，并自动化文本组合。这在某些情况下会很有用，例如 &lt;code&gt;mv foo.{txt,pdf} some-dir&lt;/code&gt;（同时移动两个文件），&lt;code&gt;cp somefile{,.bak}&lt;/code&gt;（会被扩展成 &lt;code&gt;cp somefile somefile.bak&lt;/code&gt;）或者 &lt;code&gt;mkdir -p test-{a,b,c}/subtest-{1,2,3}&lt;/code&gt;（会被扩展成所有可能的组合，并创建一个目录树）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过使用 &lt;code&gt;&amp;lt;(some command)&lt;/code&gt; 可以将输出视为文件。例如，对比本地文件 &lt;code&gt;/etc/hosts&lt;/code&gt; 和一个远程文件：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;diff /etc/hosts &amp;lt;(ssh somehost cat /etc/hosts)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解 Bash 中的“here documents”，例如 &lt;code&gt;cat &amp;lt;&amp;lt;EOF ...&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 Bash 中，同时重定向标准输出和标准错误，&lt;code&gt;some-command &amp;gt;logfile 2&amp;gt;&amp;amp;1&lt;/code&gt;。通常，为了保证命令不会在标准输入里残留一个打开了的文件句柄导致你当前所在的终端无法操作，添加 &lt;code&gt;&amp;lt;/dev/null&lt;/code&gt; 是一个好习惯。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;man ascii&lt;/code&gt; 查看具有十六进制和十进制值的ASCII表。&lt;code&gt;man unicode&lt;/code&gt;，&lt;code&gt;man utf-8&lt;/code&gt;，以及 &lt;code&gt;man latin1&lt;/code&gt; 有助于你去了解通用的编码信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;screen&lt;/code&gt; 或 &lt;a href=&quot;https://tmux.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;tmux&lt;/code&gt;&lt;/a&gt; 来使用多个屏幕，当你在使用 ssh 时（保存 session 信息）将尤为有用。另一个轻量级的解决方案是 &lt;code&gt;dtach&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ssh 中，了解如何使用 &lt;code&gt;-L&lt;/code&gt; 或 &lt;code&gt;-D&lt;/code&gt;（偶尔需要用 &lt;code&gt;-R&lt;/code&gt;）去开启隧道是非常有用的，例如当你需要从一台远程服务器上访问 web。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对 ssh 设置做一些小优化可能是很有用的，例如这个 &lt;code&gt;~/.ssh/config&lt;/code&gt; 文件包含了防止特定环境下断开连接、压缩数据、多通道等选项：&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;TCPKeepAlive=&lt;span class=&quot;literal&quot;&gt;yes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ServerAliveInterval=&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ServerAliveCountMax=&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Compression=&lt;span class=&quot;literal&quot;&gt;yes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ControlMaster auto&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ControlPath &lt;span class=&quot;regexp&quot;&gt;/tmp/&lt;/span&gt;%r@%h:%p&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ControlPersist &lt;span class=&quot;literal&quot;&gt;yes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;部分其他的关于 ssh 的选项是安全敏感且应当小心启用的。例如在可信任的网络中：&lt;code&gt;StrictHostKeyChecking=no&lt;/code&gt;，&lt;code&gt;ForwardAgent=yes&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;考虑使用 &lt;a href=&quot;https://mosh.mit.edu/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;mosh&lt;/code&gt;&lt;/a&gt; 作为 ssh 的替代品，它使用 UDP 协议。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取文件的八进制格式权限，使用类似如下的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;stat&lt;/span&gt; -c &lt;span class=&quot;string&quot;&gt;&#39;%A %a %n&#39;&lt;/span&gt; /etc/timezone&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;a href=&quot;https://github.com/mooz/percol&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;percol&lt;/code&gt;&lt;/a&gt; 或者 &lt;a href=&quot;https://github.com/junegunn/fzf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;fzf&lt;/code&gt;&lt;/a&gt; 可以交互式地从另一个命令输出中选取值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;fpp&lt;/code&gt;（&lt;a href=&quot;https://github.com/facebook/PathPicker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PathPicker&lt;/a&gt;）可以与基于另一个命令(例如 &lt;code&gt;git&lt;/code&gt;）输出的文件交互。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将 web 服务器上当前目录下所有的文件（以及子目录）暴露给你所处网络的所有用户，使用：&lt;br&gt;&lt;code&gt;python -m SimpleHTTPServer 7777&lt;/code&gt; （使用端口 7777 和 Python 2）或&lt;code&gt;python -m http.server 7777&lt;/code&gt; （使用端口 7777 和 Python 3）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以某种权限执行命令，使用&lt;code&gt;sudo&lt;/code&gt;（root 权限）或&lt;code&gt;sudo -u&lt;/code&gt;（其他用户）。使用&lt;code&gt;su&lt;/code&gt;或者&lt;code&gt;sudo bash&lt;/code&gt;来启动一个以对应用户权限运行的 shell。使用&lt;code&gt;su -&lt;/code&gt;模拟其他用户的登录。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;文件及数据处理&quot;&gt;&lt;a href=&quot;#文件及数据处理&quot; class=&quot;headerlink&quot; title=&quot;文件及数据处理&quot;&gt;&lt;/a&gt;文件及数据处理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在当前路径下通过文件名定位一个文件，&lt;code&gt;find . -iname &amp;#39;*something*&amp;#39;&lt;/code&gt;（或类似的）。在所有路径下通过文件名查找文件，使用 &lt;code&gt;locate something&lt;/code&gt; （但请记住 &lt;code&gt;updatedb&lt;/code&gt; 可能没有对最近新建的文件建立索引）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;a href=&quot;https://github.com/ggreer/the_silver_searcher&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;ag&lt;/code&gt;&lt;/a&gt; 在源代码或数据文件里检索（比 &lt;code&gt;grep -r&lt;/code&gt; 更好）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将 HTML 转为文本：&lt;code&gt;lynx -dump -stdin&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Markdown，HTML，以及所有文档格式之间的转换，试试 &lt;a href=&quot;http://pandoc.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;pandoc&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果你不得不处理 XML，&lt;code&gt;xmlstarlet&lt;/code&gt; 宝刀未老。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;a href=&quot;http://stedolan.github.io/jq/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;jq&lt;/code&gt;&lt;/a&gt; 处理 JSON。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;a href=&quot;https://github.com/0k/shyaml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;shyaml&lt;/code&gt;&lt;/a&gt; 处理 YAML。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Excel 或 CSV 文件的处理，&lt;a href=&quot;https://github.com/onyxfish/csvkit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;csvkit&lt;/a&gt; 提供了 &lt;code&gt;in2csv&lt;/code&gt;，&lt;code&gt;csvcut&lt;/code&gt;，&lt;code&gt;csvjoin&lt;/code&gt;，&lt;code&gt;csvgrep&lt;/code&gt; 等工具。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关于 Amazon S3，&lt;a href=&quot;https://github.com/s3tools/s3cmd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;s3cmd&lt;/code&gt;&lt;/a&gt; 很方便而 &lt;a href=&quot;https://github.com/bloomreach/s4cmd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;s4cmd&lt;/code&gt;&lt;/a&gt; 更快。Amazon 官方的 &lt;a href=&quot;https://github.com/aws/aws-cli&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;aws&lt;/code&gt;&lt;/a&gt; 以及  &lt;a href=&quot;https://github.com/donnemartin/saws&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;saws&lt;/code&gt;&lt;/a&gt; 是其他 AWS 相关工作的基础。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解如何使用 &lt;code&gt;sort&lt;/code&gt; 和 &lt;code&gt;uniq&lt;/code&gt;，包括 uniq 的 &lt;code&gt;-u&lt;/code&gt; 参数和 &lt;code&gt;-d&lt;/code&gt; 参数，详见后文单行脚本节。另外可以了解一下 &lt;code&gt;comm&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解如何使用 &lt;code&gt;cut&lt;/code&gt;，&lt;code&gt;paste&lt;/code&gt; 和 &lt;code&gt;join&lt;/code&gt; 来更改文件。很多人都会使用 &lt;code&gt;cut&lt;/code&gt;，但几乎都不会使用 &lt;code&gt;join&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解如何运用 &lt;code&gt;wc&lt;/code&gt; 去计算新行数（&lt;code&gt;-l&lt;/code&gt;），字符数（&lt;code&gt;-m&lt;/code&gt;），单词数（&lt;code&gt;-w&lt;/code&gt;）以及字节数（&lt;code&gt;-c&lt;/code&gt;）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解如何使用 &lt;code&gt;tee&lt;/code&gt; 将标准输入复制到文件甚至标准输出，例如 &lt;code&gt;ls -al | tee file.txt&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解语言环境对许多命令行工具的微妙影响，包括排序的顺序和性能。大多数 Linux 的安装过程会将 &lt;code&gt;LANG&lt;/code&gt; 或其他有关的变量设置为符合本地的设置。意识到当你改变语言环境时，排序的结果可能会改变。明白国际化可能会使 sort 或其他命令运行效率下降&lt;em&gt;许多倍&lt;/em&gt;。某些情况下（例如集合运算）你可以放心的使用 &lt;code&gt;export LC_ALL=C&lt;/code&gt; 来忽略掉国际化并使用基于字节的顺序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解 &lt;code&gt;awk&lt;/code&gt; 和 &lt;code&gt;sed&lt;/code&gt; 关于数据的简单处理的用法。例如，将文本文件中第三列的所有数字求和：&lt;code&gt;awk &amp;#39;{ x += $3 } END { print x }&amp;#39;&lt;/code&gt;. 这可能比同等作用的 Python 代码快三倍且代码量少三倍。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;替换一个或多个文件中出现的字符串：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;perl -pi.bak &lt;span class=&quot;_&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;s/old-string/new-string/g&#39;&lt;/span&gt; my-files-*.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;a href=&quot;https://github.com/jlevy/repren&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;repren&lt;/code&gt;&lt;/a&gt; 来批量重命名，或是在多个文件中搜索替换。（有些时候 &lt;code&gt;rename&lt;/code&gt; 命令也可以批量重命名，但要注意，它在不同 Linux 发行版中的功能并不完全一样。）&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Full rename of filenames, directories, and contents foo -&amp;gt; bar:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;repren --full --preserve-case --from foo --to bar .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Recover backup files whatever.bak -&amp;gt; whatever:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;repren --renames --from &lt;span class=&quot;string&quot;&gt;&#39;(.*)\.bak&#39;&lt;/span&gt; --to &lt;span class=&quot;string&quot;&gt;&#39;\1&#39;&lt;/span&gt; *.bak&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Same as above, using rename, if available:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rename &lt;span class=&quot;string&quot;&gt;&#39;s/\.bak$//&#39;&lt;/span&gt; *.bak&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;根据 man 页面的描述，&lt;code&gt;rsync&lt;/code&gt; 真的是一个快速且非常灵活的文件复制工具。它通常被用于机器间的同步，但在本地也同样有用。它同时也是删除大量文件的&lt;a href=&quot;https://web.archive.org/web/20130929001850/http://linuxnote.net/jianingy/en/linux/a-fast-way-to-remove-huge-number-of-files.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;最快方法&lt;/a&gt;之一：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir empty &amp;amp;&amp;amp; rsync -r --delete empty/ some-dir &amp;amp;&amp;amp; rmdir some-dir&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;shuf&lt;/code&gt; 从一个文件中随机选取多行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解 &lt;code&gt;sort&lt;/code&gt; 的参数。处理数字方面，使用 &lt;code&gt;-n&lt;/code&gt; 或者 &lt;code&gt;-h&lt;/code&gt; 来处理可读性数字（例如 &lt;code&gt;du -h&lt;/code&gt; 的输出）。明白键的工作原理（&lt;code&gt;-t&lt;/code&gt; 和 &lt;code&gt;-k&lt;/code&gt;）。例如，注意到你需要 &lt;code&gt;-k1，1&lt;/code&gt; 来仅按第一个域来排序，而 &lt;code&gt;-k1&lt;/code&gt; 意味着按整行排序。稳定排序（&lt;code&gt;sort -s&lt;/code&gt;）在某些情况下很有用。例如，以第二个域为主关键字，第一个域为次关键字进行排序，你可以使用 &lt;code&gt;sort -k1，1 | sort -s -k2，2&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果你想在 Bash 命令行中写 tab 制表符，按下 &lt;strong&gt;ctrl-v&lt;/strong&gt; &lt;strong&gt;[Tab]&lt;/strong&gt; 或键入 &lt;code&gt;$&amp;#39;\t&amp;#39;&lt;/code&gt; （后者可能更好，因为你可以复制粘贴它）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;标准的源代码对比及合并工具是 &lt;code&gt;diff&lt;/code&gt; 和 &lt;code&gt;patch&lt;/code&gt;。使用 &lt;code&gt;diffstat&lt;/code&gt; 查看变更总览数据。注意到 &lt;code&gt;diff -r&lt;/code&gt; 对整个文件夹有效。使用 &lt;code&gt;diff -r tree1 tree2 | diffstat&lt;/code&gt; 查看变更总览数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于二进制文件，使用 &lt;code&gt;hd&lt;/code&gt; 使其以十六进制显示以及使用 &lt;code&gt;bvi&lt;/code&gt; 来编辑二进制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同样对于二进制文件，&lt;code&gt;strings&lt;/code&gt;（包括 &lt;code&gt;grep&lt;/code&gt; 等等）允许你查找一些文本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;二进制文件对比（Delta 压缩），使用 &lt;code&gt;xdelta3&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;iconv&lt;/code&gt; 更改文本编码。而更高级的用法，可以使用 &lt;code&gt;uconv&lt;/code&gt;，它支持一些高级的 Unicode 功能。例如，这条命令将所有元音字母转为小写并移除了：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;uconv &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; utf-8 -t utf-8 -x &lt;span class=&quot;string&quot;&gt;&#39;::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] &amp;gt;; ::Any-NFC; &#39;&lt;/span&gt; &amp;lt; input.txt &amp;gt; output.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拆分文件，查看 &lt;code&gt;split&lt;/code&gt;（按大小拆分）和 &lt;code&gt;csplit&lt;/code&gt;（按模式拆分）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 &lt;a href=&quot;http://www.fresse.org/dateutils/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;dateutils&lt;/code&gt;&lt;/a&gt; 中的 &lt;code&gt;dateadd&lt;/code&gt;, &lt;code&gt;datediff&lt;/code&gt;, &lt;code&gt;strptime&lt;/code&gt; 等工具操作日期和时间表达式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;zless&lt;/code&gt;，&lt;code&gt;zmore&lt;/code&gt;，&lt;code&gt;zcat&lt;/code&gt; 和 &lt;code&gt;zgrep&lt;/code&gt; 对压缩过的文件进行操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;系统调试&quot;&gt;&lt;a href=&quot;#系统调试&quot; class=&quot;headerlink&quot; title=&quot;系统调试&quot;&gt;&lt;/a&gt;系统调试&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;curl&lt;/code&gt; 和 &lt;code&gt;curl -I&lt;/code&gt; 可以便捷地被应用于 web 调试中，它们的好兄弟 &lt;code&gt;wget&lt;/code&gt; 也可以，或者是更潮的 &lt;a href=&quot;https://github.com/jakubroztocil/httpie&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;httpie&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;iostat&lt;/code&gt;、&lt;code&gt;netstat&lt;/code&gt;、&lt;code&gt;top&lt;/code&gt; （&lt;code&gt;htop&lt;/code&gt; 更佳）和 &lt;code&gt;dstat&lt;/code&gt; 去获取硬盘、cpu 和网络的状态。熟练掌握这些工具可以使你快速的对系统的当前状态有一个大概的认识。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;netstat&lt;/code&gt; 和 &lt;code&gt;ss&lt;/code&gt; 查看网络连接的细节。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若要对系统有一个深度的总体认识，使用 &lt;a href=&quot;https://github.com/nicolargo/glances&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;glances&lt;/code&gt;&lt;/a&gt;。它在一个终端窗口中向你提供一些系统级的数据。这对于快速的检查各个子系统非常有帮助。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若要了解内存状态，运行并理解 &lt;code&gt;free&lt;/code&gt; 和 &lt;code&gt;vmstat&lt;/code&gt; 的输出。尤其注意“cached”的值，它指的是 Linux 内核用来作为文件缓存的内存大小，因此它与空闲内存无关。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Java 系统调试则是一件截然不同的事，一个可以用于 Oracle 的 JVM 或其他 JVM 上的调试的技巧是你可以运行 &lt;code&gt;kill -3 &amp;lt;pid&amp;gt;&lt;/code&gt; 同时一个完整的栈轨迹和堆概述（包括 GC 的细节）会被保存到标准输出/日志文件。JDK 中的 &lt;code&gt;jps&lt;/code&gt;，&lt;code&gt;jstat&lt;/code&gt;，&lt;code&gt;jstack&lt;/code&gt;，&lt;code&gt;jmap&lt;/code&gt; 很有用。&lt;a href=&quot;https://github.com/aragozin/jvm-tools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SJK tools&lt;/a&gt; 更高级.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;mtr&lt;/code&gt; 去跟踪路由，用于确定网络问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 &lt;code&gt;ncdu&lt;/code&gt; 来查看磁盘使用情况，它比常用的命令，如 &lt;code&gt;du -sh *&lt;/code&gt;，更节省时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查找正在使用带宽的套接字连接或进程，使用 &lt;code&gt;iftop&lt;/code&gt; 或 &lt;code&gt;nethogs&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ab&lt;/code&gt; 工具（捆绑于 Apache）可以简单粗暴地检查 web 服务器的性能。对于更复杂的负载测试，使用 &lt;code&gt;siege&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;wireshark&lt;/code&gt;，&lt;code&gt;tshark&lt;/code&gt; 和 &lt;code&gt;ngrep&lt;/code&gt; 可用于复杂的网络调试。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解 &lt;code&gt;strace&lt;/code&gt; 和 &lt;code&gt;ltrace&lt;/code&gt;。这俩工具在你的程序运行失败、挂起甚至崩溃，而你却不知道为什么或你想对性能有个总体的认识的时候是非常有用的。注意 profile 参数（&lt;code&gt;-c&lt;/code&gt;）和附加到一个运行的进程参数 （&lt;code&gt;-p&lt;/code&gt;）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解使用 &lt;code&gt;ldd&lt;/code&gt; 来检查共享库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解如何运用 &lt;code&gt;gdb&lt;/code&gt; 连接到一个运行着的进程并获取它的堆栈轨迹。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学会使用 &lt;code&gt;/proc&lt;/code&gt;。它在调试正在出现的问题的时候有时会效果惊人。比如：&lt;code&gt;/proc/cpuinfo&lt;/code&gt;，&lt;code&gt;/proc/meminfo&lt;/code&gt;，&lt;code&gt;/proc/cmdline&lt;/code&gt;，&lt;code&gt;/proc/xxx/cwd&lt;/code&gt;，&lt;code&gt;/proc/xxx/exe&lt;/code&gt;，&lt;code&gt;/proc/xxx/fd/&lt;/code&gt;，&lt;code&gt;/proc/xxx/smaps&lt;/code&gt;（这里的 &lt;code&gt;xxx&lt;/code&gt; 表示进程的 id 或 pid）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当调试一些之前出现的问题的时候，&lt;code&gt;sar&lt;/code&gt; 非常有用。它展示了 cpu、内存以及网络等的历史数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关于更深层次的系统分析以及性能分析，看看 &lt;code&gt;stap&lt;/code&gt;（&lt;a href=&quot;https://sourceware.org/systemtap/wiki&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SystemTap&lt;/a&gt;），&lt;a href=&quot;http://en.wikipedia.org/wiki/Perf_(Linux&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;perf&lt;/code&gt;&lt;/a&gt;)，以及&lt;a href=&quot;https://github.com/draios/sysdig&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;sysdig&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看你当前使用的系统，使用 &lt;code&gt;uname&lt;/code&gt; ， &lt;code&gt;uname -a&lt;/code&gt; （Unix／kernel 信息） 或者 &lt;code&gt;lsb_release -a&lt;/code&gt; （Linux 发行版信息）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;无论什么东西工作得很欢乐时试试 &lt;code&gt;dmesg&lt;/code&gt;（可能是硬件或驱动问题）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;单行脚本&quot;&gt;&lt;a href=&quot;#单行脚本&quot; class=&quot;headerlink&quot; title=&quot;单行脚本&quot;&gt;&lt;/a&gt;单行脚本&lt;/h2&gt;&lt;p&gt;一些命令组合的例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当你需要对文本文件做集合交、并、差运算时，结合使用 &lt;code&gt;sort&lt;/code&gt;/&lt;code&gt;uniq&lt;/code&gt; 很有帮助。假设 &lt;code&gt;a&lt;/code&gt; 与 &lt;code&gt;b&lt;/code&gt; 是两内容不同的文件。这种方式效率很高，并且在小文件和上G的文件上都能运用 （&lt;code&gt;sort&lt;/code&gt; 不被内存大小约束，尽管在 &lt;code&gt;/tmp&lt;/code&gt; 在一个小的根分区上时你可能需要 &lt;code&gt;-T&lt;/code&gt; 参数），参阅前文中关于 &lt;code&gt;LC_ALL&lt;/code&gt; 和 &lt;code&gt;sort&lt;/code&gt; 的 &lt;code&gt;-u&lt;/code&gt; 参数的部分。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat a b | sort | uniq &amp;gt; c   &lt;span class=&quot;comment&quot;&gt;# c is a union b&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat a b | sort | uniq &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &amp;gt; c   &lt;span class=&quot;comment&quot;&gt;# c is a intersect b&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat a b b | sort | uniq -u &amp;gt; c   &lt;span class=&quot;comment&quot;&gt;# c is set difference a - b&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;grep . *&lt;/code&gt;（每行都会附上文件名）或者 &lt;code&gt;head -100 *&lt;/code&gt;（每个文件有一个标题）来阅读检查目录下所有文件的内容。这在检查一个充满配置文件的目录（如 &lt;code&gt;/sys&lt;/code&gt;、&lt;code&gt;/proc&lt;/code&gt;、&lt;code&gt;/etc&lt;/code&gt;）时特别好用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算文本文件第三列中所有数的和（可能比同等作用的 Python 代码快三倍且代码量少三倍）：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;awk &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123; x += $3 &amp;#125; END &amp;#123; print x &amp;#125;&#39;&lt;/span&gt; myfile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果你想在文件树上查看大小/日期，这可能看起来像递归版的 &lt;code&gt;ls -l&lt;/code&gt; 但比 &lt;code&gt;ls -lR&lt;/code&gt; 更易于理解：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;find . -type f -ls&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;假设你有一个类似于 web 服务器日志文件的文本文件，并且一个确定的值只会出现在某些行上，假设一个 &lt;code&gt;acct_id&lt;/code&gt; 参数在URI中。如果你想计算出每个 &lt;code&gt;acct_id&lt;/code&gt; 值有多少次请求，使用如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat access.log | egrep -o &lt;span class=&quot;string&quot;&gt;&#39;acct_id=[0-9]+&#39;&lt;/span&gt; | cut &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt;= &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt;2 | sort | uniq -c | sort -rn&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运行这个函数从这篇文档中随机获取一条技巧（解析 Markdown 文件并抽取项目）：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;taocl&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  curl &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pandoc &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; markdown -t html |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xmlstarlet fo --html --dropdtd |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xmlstarlet sel -t -v &lt;span class=&quot;string&quot;&gt;&quot;(html/body/ul/li[count(p)&amp;gt;0])[&lt;span class=&quot;variable&quot;&gt;$RANDOM&lt;/span&gt; mod last()+1]&quot;&lt;/span&gt; |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xmlstarlet unesc | fmt -80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;冷门但有用&quot;&gt;&lt;a href=&quot;#冷门但有用&quot; class=&quot;headerlink&quot; title=&quot;冷门但有用&quot;&gt;&lt;/a&gt;冷门但有用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;expr&lt;/code&gt;：计算表达式或正则匹配&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;m4&lt;/code&gt;：简单地宏处理器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;yes&lt;/code&gt;：多次打印字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;cal&lt;/code&gt;：漂亮的日历&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;env&lt;/code&gt;：执行一个命令（脚本文件中很有用）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;printenv&lt;/code&gt;：打印环境变量（调试时或在使用脚本文件时很有用）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;look&lt;/code&gt;：查找以特定字符串开头的单词&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;cut&lt;/code&gt;、&lt;code&gt;paste&lt;/code&gt; 和 &lt;code&gt;join&lt;/code&gt;：数据修改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;fmt&lt;/code&gt;：格式化文本段落&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pr&lt;/code&gt;：将文本格式化成页/列形式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;fold&lt;/code&gt;：包裹文本中的几行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;column&lt;/code&gt;：将文本格式化成多列或表格&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;expand&lt;/code&gt; 和 &lt;code&gt;unexpand&lt;/code&gt;：制表符与空格之间转换&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;nl&lt;/code&gt;：添加行号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;seq&lt;/code&gt;：打印数字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;bc&lt;/code&gt;：计算器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;factor&lt;/code&gt;：分解因数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://gnupg.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;gpg&lt;/code&gt;&lt;/a&gt;：加密并签名文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;toe&lt;/code&gt;：terminfo entries 列表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;nc&lt;/code&gt;：网络调试及数据传输&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;socat&lt;/code&gt;：套接字代理，与 &lt;code&gt;netcat&lt;/code&gt; 类似&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/mattthias/slurm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;slurm&lt;/code&gt;&lt;/a&gt;：网络可视化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;dd&lt;/code&gt;：文件或设备间传输数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;file&lt;/code&gt;：确定文件类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;tree&lt;/code&gt;：以树的形式显示路径和文件，类似于递归的 &lt;code&gt;ls&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;stat&lt;/code&gt;：文件信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;time&lt;/code&gt;：执行命令，并计算执行时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;lockfile&lt;/code&gt;：使文件只能通过 &lt;code&gt;rm -f&lt;/code&gt; 移除&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;logrotate&lt;/code&gt;: 切换、压缩以及发送日志文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;watch&lt;/code&gt;：重复运行同一个命令，展示结果并高亮有更改的部分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;tac&lt;/code&gt;：反向输出文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;shuf&lt;/code&gt;：文件中随机选取几行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;comm&lt;/code&gt;：一行一行的比较排序过的文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pv&lt;/code&gt;：监视通过管道的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hd&lt;/code&gt;，&lt;code&gt;hexdump&lt;/code&gt;，&lt;code&gt;xxd&lt;/code&gt;，&lt;code&gt;biew&lt;/code&gt; 和 &lt;code&gt;bvi&lt;/code&gt;：保存或编辑二进制文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;strings&lt;/code&gt;：从二进制文件中抽取文本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;tr&lt;/code&gt;：转换字母&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;iconv&lt;/code&gt; 或 &lt;code&gt;uconv&lt;/code&gt;：简易的文件编码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;split&lt;/code&gt; 和 &lt;code&gt;csplit&lt;/code&gt;：分割文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sponge&lt;/code&gt;：在写入前读取所有输入，在读取文件后再向同一文件写入时比较有用，例如 &lt;code&gt;grep -v something some-file | sponge some-file&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;units&lt;/code&gt;：将一种计量单位转换为另一种等效的计量单位（参阅 &lt;code&gt;/usr/share/units/definitions.units&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;apg&lt;/code&gt;：随机生成密码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;7z&lt;/code&gt;：高比例的文件压缩&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ldd&lt;/code&gt;：动态库信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;nm&lt;/code&gt;：提取 obj 文件中的符号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ab&lt;/code&gt;：性能分析 web 服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;strace&lt;/code&gt;：系统调用调试&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;mtr&lt;/code&gt;：更好的网络调试跟踪工具&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;cssh&lt;/code&gt;：可视化的并发 shell&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;rsync&lt;/code&gt;：通过 ssh 或本地文件系统同步文件和文件夹&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;wireshark&lt;/code&gt; 和 &lt;code&gt;tshark&lt;/code&gt;：抓包和网络调试工具&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ngrep&lt;/code&gt;：网络层的 grep&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;host&lt;/code&gt; 和 &lt;code&gt;dig&lt;/code&gt;：DNS 查找&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;lsof&lt;/code&gt;：列出当前系统打开文件的工具以及查看端口信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;dstat&lt;/code&gt;：系统状态查看&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/nicolargo/glances&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;glances&lt;/code&gt;&lt;/a&gt;：高层次的多子系统总览&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;iostat&lt;/code&gt;：硬盘使用状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;mpstat&lt;/code&gt;: CPU 使用状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;vmstat&lt;/code&gt;: 内存使用状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;htop&lt;/code&gt;：top 的加强版&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;last&lt;/code&gt;：登入记录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;w&lt;/code&gt;：查看处于登录状态的用户&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;id&lt;/code&gt;：用户/组 ID 信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sar&lt;/code&gt;：系统历史数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;iftop&lt;/code&gt; 或 &lt;code&gt;nethogs&lt;/code&gt;：套接字及进程的网络利用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ss&lt;/code&gt;：套接字数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;dmesg&lt;/code&gt;：引导及系统错误信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sysctl&lt;/code&gt;: 在内核运行时动态地查看和修改内核的运行参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hdparm&lt;/code&gt;：SATA/ATA 磁盘更改及性能分析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;lsb_release&lt;/code&gt;：Linux 发行版信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;lsblk&lt;/code&gt;：列出块设备信息：以树形展示你的磁盘以及磁盘分区信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;lshw&lt;/code&gt;，&lt;code&gt;lscpu&lt;/code&gt;，&lt;code&gt;lspci&lt;/code&gt;，&lt;code&gt;lsusb&lt;/code&gt; 和 &lt;code&gt;dmidecode&lt;/code&gt;：查看硬件信息，包括 CPU、BIOS、RAID、显卡、USB设备等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;lsmod&lt;/code&gt; 和 &lt;code&gt;modinfo&lt;/code&gt;：列出内核模块，并显示其细节&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;fortune&lt;/code&gt;，&lt;code&gt;ddate&lt;/code&gt; 和 &lt;code&gt;sl&lt;/code&gt;：额，这主要取决于你是否认为蒸汽火车和莫名其妙的名人名言是否“有用”&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;仅限-OS-X-系统&quot;&gt;&lt;a href=&quot;#仅限-OS-X-系统&quot; class=&quot;headerlink&quot; title=&quot;仅限 OS X 系统&quot;&gt;&lt;/a&gt;仅限 OS X 系统&lt;/h2&gt;&lt;p&gt;以下是&lt;em&gt;仅限于&lt;/em&gt; MacOS 系统的技巧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;用 &lt;code&gt;brew&lt;/code&gt; （Homebrew）或者 &lt;code&gt;port&lt;/code&gt; （MacPorts）进行包管理。这些可以用来在 Mac 系统上安装以上的大多数命令。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 &lt;code&gt;pbcopy&lt;/code&gt; 复制任何命令的输出到桌面应用，用 &lt;code&gt;pbpaste&lt;/code&gt; 粘贴输入。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若要在 Mac OS 终端中将 Option 键视为 alt 键（例如在上面介绍的 &lt;strong&gt;alt-b&lt;/strong&gt;, &lt;strong&gt;alt-f&lt;/strong&gt; 等命令中用到），打开 偏好设置 -&amp;gt; 描述文件 -&amp;gt; 键盘 并勾选“使用 Option 键作为 Meta 键”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 &lt;code&gt;open&lt;/code&gt; 或者 &lt;code&gt;open -a /Applications/Whatever.app&lt;/code&gt; 使用桌面应用打开文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spotlight： 用 &lt;code&gt;mdfind&lt;/code&gt; 搜索文件，用 &lt;code&gt;mdls&lt;/code&gt; 列出元数据（例如照片的 EXIF 信息）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意 MacOS 系统是基于 BSD UNIX 的，许多命令（例如 &lt;code&gt;ps&lt;/code&gt;，&lt;code&gt;ls&lt;/code&gt;，&lt;code&gt;tail&lt;/code&gt;，&lt;code&gt;awk&lt;/code&gt;，&lt;code&gt;sed&lt;/code&gt;）都和 Linux 中有些微的不同，这些极大的被 System V-style Unix 和 GNU 工具影响。你可以通过标题为 “BSD General Commands Manual” 的 man 页面发现这些不同。在有些情况下 GNU 版本的命令也可能被安装（例如 &lt;code&gt;gawk&lt;/code&gt; 和 &lt;code&gt;gsed&lt;/code&gt; 对应 GNU 中的 awk 和 sed ）。如果要写跨平台的 Bash 脚本，避免使用这些命令（例如，考虑 Python 或者 &lt;code&gt;perl&lt;/code&gt; ）或者经过仔细的测试。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 &lt;code&gt;sw_vers&lt;/code&gt; 获取 MacOS 的版本信息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;更多资源&quot;&gt;&lt;a href=&quot;#更多资源&quot; class=&quot;headerlink&quot; title=&quot;更多资源&quot;&gt;&lt;/a&gt;更多资源&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alebcay/awesome-shell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;awesome-shell&lt;/a&gt;：一份精心组织的命令行工具及资源的列表。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/herrbischoff/awesome-osx-command-line&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;awesome-osx-command-line&lt;/a&gt;：一份针对 Mac OS 命令行的更深入的指南。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://redsymbol.net/articles/unofficial-bash-strict-mode/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Strict mode&lt;/a&gt;：为了编写更好的脚本文件。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/koalaman/shellcheck&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shellcheck&lt;/a&gt;：一个静态 shell 脚本分析工具，本质上是 bash／sh／zsh 的 lint。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.dwheeler.com/essays/filenames-in-shell.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Filenames and Pathnames in Shell&lt;/a&gt;：有关如何在 shell 脚本里正确处理文件名的细枝末节。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;免责声明&quot;&gt;&lt;a href=&quot;#免责声明&quot; class=&quot;headerlink&quot; title=&quot;免责声明&quot;&gt;&lt;/a&gt;免责声明&lt;/h2&gt;&lt;p&gt;除去特别微小的任务，编写代码是出于方便阅读的目的。能力往往伴随着责任。你 &lt;em&gt;可以&lt;/em&gt; 在 Bash 中做一些事并不意味着你应该去做！;)&lt;/p&gt;
&lt;h2 id=&quot;授权条款&quot;&gt;&lt;a href=&quot;#授权条款&quot; class=&quot;headerlink&quot; title=&quot;授权条款&quot;&gt;&lt;/a&gt;授权条款&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://creativecommons.org/licenses/by-sa/4.0/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://i.creativecommons.org/l/by-sa/4.0/88x31.png&quot; alt=&quot;Creative Commons License&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文使用授权协议 &lt;a href=&quot;http://creativecommons.org/licenses/by-sa/4.0/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;摘自： &lt;a href=&quot;https://github.com/jlevy/the-art-of-command-line&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jlevy/the-art-of-command
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.yongyuan.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Angular 如何在一组 checkbox 中选择自己想要的值</title>
    <link href="http://blog.yongyuan.com/post/Angular%20%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%80%E7%BB%84%20checkbox%20%E4%B8%AD%E9%80%89%E6%8B%A9%E8%87%AA%E5%B7%B1%E6%83%B3%E8%A6%81%E7%9A%84%E5%80%BC.html"/>
    <id>http://blog.yongyuan.com/post/Angular 如何在一组 checkbox 中选择自己想要的值.html</id>
    <published>2015-12-19T16:00:00.000Z</published>
    <updated>2016-05-24T16:50:41.000Z</updated>
    
    <content type="html">&lt;p&gt;如何在一组 checkbox 列表了选择自己想要的一个或多个值。我是这么做的：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-repeat&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;id in idArr&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;checkbox&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;selectedId[]&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;&amp;#123;id&amp;#125;&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;ng-checked&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;selection.indexOf(id) &amp;gt; -1&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;ng-click&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;toggleSelection(id)&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;gt;&lt;/span&gt; &amp;#123;&amp;#123;id&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$scope.idArr = [&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 默认不选中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$scope.selection = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$scope.toggleSelection = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;toggleSelection&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;id&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; idx = $scope.selection.indexOf(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (idx &amp;gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 默认选中的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $scope.selection.splice(idx, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $scope.selection.push(&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log($scope.selection)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样就可以选中一组自己想要的 value 值了&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;如何在一组 checkbox 列表了选择自己想要的一个或多个值。我是这么做的：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;
    
    </summary>
    
    
      <category term="angular" scheme="http://blog.yongyuan.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>Angular form valid in action</title>
    <link href="http://blog.yongyuan.com/post/%20Angular%20form%20valid%20in%20action.html"/>
    <id>http://blog.yongyuan.com/post/ Angular form valid in action.html</id>
    <published>2015-12-12T16:00:00.000Z</published>
    <updated>2016-05-24T16:51:35.000Z</updated>
    
    <content type="html">&lt;p&gt;Angular 提供了有关表单的属性来帮助我们验证表单. 他们给我们提供了各种有关一个表单及其输入的信息，并且应用到了表单和输入.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;属性类          描述&lt;br&gt;$valid        ng-valid    Boolean 告诉我们这一项当前基于你设定的规则是否验证通过&lt;br&gt;$invalid    ng-invalid    Boolean 告诉我们这一项当前基于你设定的规则是否验证未通过&lt;br&gt;$pristine    ng-pristine    Boolean 如果表单或者输入框没有使用则为True&lt;br&gt;$dirty        ng-dirty    Boolean 如果表单或者输入框有使用到则为True&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Angular 也提供了有关表单及其输入框的类，以便你能够依据每一个状态设置其样式.下面是一个我用的表单验证,表单名为 userForm, 提交表单的方法有多种，我这里采用 ngSubmit 的方法，方法为 saveUserInfo()。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;form(name=&amp;quot;userForm&amp;quot;,ng-submit=&amp;quot;saveUserInfo(userForm.$valid)&amp;quot;,novalidate)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    label(for=&amp;quot;&amp;quot;,ng-class=&amp;quot;&amp;#123; &amp;apos;has-error&amp;apos; : userForm.telephone.$invalid &amp;amp;&amp;amp; !userForm.telephone.$pristine &amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        | 职位&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        span(ng-show=&amp;quot;userForm.jobTitle.$invalid &amp;amp;&amp;amp; !userForm.jobTitle.$pristine&amp;quot;) 填写正确的手机号码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        input.form-control(type=&amp;quot;text&amp;quot;,name=&amp;quot;jobTitle&amp;quot;,ng-model=&amp;quot;user.jobTitle&amp;quot;,required)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    label(for=&amp;quot;&amp;quot;,ng-class=&amp;quot;&amp;#123; &amp;apos;has-error&amp;apos; : userForm.nick.$invalid &amp;amp;&amp;amp; !userForm.nick.$pristine &amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        | 用户昵称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        span(ng-show=&amp;quot;userForm.nick.$invalid &amp;amp;&amp;amp; !userForm.nick.$pristine&amp;quot;) 填写正确的手机号码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        input.form-control(type=&amp;quot;text&amp;quot;,name=&amp;quot;nick&amp;quot;,ng-model=&amp;quot;user.nick&amp;quot;,required)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    label(for=&amp;quot;&amp;quot;,ng-class=&amp;quot;&amp;#123; &amp;apos;has-error&amp;apos; : userForm.email.$invalid &amp;amp;&amp;amp; !userForm.telephone.$pristine &amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        | 邮箱&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        span(ng-show=&amp;quot;userForm.email.$invalid &amp;amp;&amp;amp; !userForm.email.$pristine&amp;quot;) 填写正确的手机号码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        input.form-control(type=&amp;quot;text&amp;quot;,name=&amp;quot;email&amp;quot;,ng-model=&amp;quot;user.email&amp;quot;,required)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    label(for=&amp;quot;&amp;quot;,ng-class=&amp;quot;&amp;#123; &amp;apos;has-error&amp;apos; : userForm.telephone.$invalid &amp;amp;&amp;amp; !userForm.telephone.$pristine &amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        | 联系电话&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        span(ng-show=&amp;quot;userForm.telephone.$invalid &amp;amp;&amp;amp; !userForm.telephone.$pristine&amp;quot;) 填写正确的手机号码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        input.form-control(type=&amp;quot;text&amp;quot;,name=&amp;quot;telephone&amp;quot;,ng-model=&amp;quot;user.telephone&amp;quot;,ng-pattern=&amp;quot;/1[3|5|7|8|][0-9]&amp;#123;9&amp;#125;/&amp;quot;,required)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    button.btn.btn-primary(type=&amp;quot;submit&amp;quot;,ng-disabled=&amp;quot;userForm.$invalid&amp;quot;) 确认&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    button.btn.btn-default(ng-click=&amp;quot;cancel()&amp;quot;) 取消&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有几点可以分析一下，首先一定要每个 input 要有 name 属性，给每个 input 输入框准备一个错误提醒的消息，就是上面的 span 标签。这里我们只想使用 angular 自带的验证，需要关闭浏览器对 html5 表单的原生验证，所以给表单加上 novalidate 属性.&lt;/p&gt;
&lt;p&gt;如果需要每个表单都必填，那么给 input 添加 required 属性，顺便给提交按钮添加  disabled 属性，当有一个表单的校验没通过，这个按钮都是灰色不可用的。&lt;/p&gt;
&lt;p&gt;还有表单一个常用的 radio 类型没有提到，这里也顺便一起说了，有时候我们需要做一些单项选择，而且可以二次修改，所以如果之前这个 radio 已经选好了某个选项，那么下次修改他的时候，它默认也应该是选中的状态。这个利用双向绑定很容易实现的:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;label(for=&amp;quot;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    | 性别：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    label.radio-inline.c-radio&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        input(type=&amp;apos;radio&amp;apos;,ng-trim=&amp;quot;&amp;quot;,name=&amp;quot;sex&amp;quot;,ng-click=&amp;quot;user.sex=1&amp;quot;,value=&amp;quot;1&amp;quot;,ng-model=&amp;quot;user.sex&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        span.iconfont.icon-check&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        |  男&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    label.radio-inline.c-radio&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        input(type=&amp;apos;radio&amp;apos;,ng-trim=&amp;quot;&amp;quot;,name=&amp;quot;sex&amp;quot;,ng-click=&amp;quot;user.sex=2&amp;quot;,value=&amp;quot;2&amp;quot;,ng-model=&amp;quot;user.sex&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        span.iconfont.icon-check&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        |  女&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;只要给对应的选项添加对应选中的 value 值，绑定 ngModel 即可。&lt;br&gt;上面这些都是一些基本的 angualr 表单的使用。没啥技巧，都是一些死东西，第一次明白后面基本照用就是。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Angular 提供了有关表单的属性来帮助我们验证表单. 他们给我们提供了各种有关一个表单及其输入的信息，并且应用到了表单和输入.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;属性类          描述&lt;br&gt;$valid        ng-valid    Boolea
    
    </summary>
    
    
      <category term="angular" scheme="http://blog.yongyuan.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>乱谈</title>
    <link href="http://blog.yongyuan.com/post/2015-12-02%20%E4%B9%B1%E8%B0%88.html"/>
    <id>http://blog.yongyuan.com/post/2015-12-02 乱谈.html</id>
    <published>2015-12-01T16:00:00.000Z</published>
    <updated>2016-06-19T13:36:25.000Z</updated>
    
    <content type="html">&lt;p&gt;今天不写技术文，随便写点东西吧，一些随想，记录。&lt;/p&gt;
&lt;p&gt;最近公司一前技术大牛现在忽悠吹牛的前辈给我级几个新人讲了些程序员之道的东西，虽然很多东西我都已经看过或听过了，不过听身边的人和自己说感觉还是不一样的。&lt;/p&gt;
&lt;p&gt;我比较深刻也比较同意的几句话，一句是：有事写代码，没事删代码。&lt;br&gt;的确是这样的，一开始来公司做项目的时候，基本上都是埋头写代码，堆业务逻辑，就是随着自己感觉写，没有仔细去优化代码的质量等，毕竟都是想着先把功能做出来，但是功能完了，不代表你这代码就写完了，没事的时候看看你之前写的那些代码是不是可以写的更优雅更简单，能删的就删掉，能用一个 for 循环就不要用两个，这样反复删除重构之前写的代码，会让你得到更快的提高。&lt;/p&gt;
&lt;p&gt;还有一句是：技能不等于能力。&lt;br&gt;这个我非常同意，作为程序员，程序员的基本能力是很重要的，在开始这两年尤其需要注意提高，能力和所谓的技能是不一样的。能力就是你作为一个程序员的基础素养，解决问题的能力和思路等。只要你的能力过关，什么技能都能轻松掌握的。比如前端现在变化这么快，框架这么多，是不是你比别人多会一个框架就觉得好屌呢，狗屁！人家能力比你强的人，花几天看个文档分分钟教你做人。所以我说你们这些前端啊，不要天天吵着追这个那个框架，先把自己的事情干好，有兴趣有时间去看看其他的新框架也可以，但切忌为了学习框架而学习，只要你自身的能力上来了，到需要用到新技能的时候，花点点时间看看文档 google 一下基本就可以做项目了呀。所以，在写代码最开始的这段时间，我们应当首先提升自己的能力再去抽空提升一点其他方面的技能。&lt;/p&gt;
&lt;p&gt;未完…&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天不写技术文，随便写点东西吧，一些随想，记录。&lt;/p&gt;
&lt;p&gt;最近公司一前技术大牛现在忽悠吹牛的前辈给我级几个新人讲了些程序员之道的东西，虽然很多东西我都已经看过或听过了，不过听身边的人和自己说感觉还是不一样的。&lt;/p&gt;
&lt;p&gt;我比较深刻也比较同意的几句话，一句是：有事写
    
    </summary>
    
    
      <category term="杂谈" scheme="http://blog.yongyuan.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Angular add custom style and input auto focus</title>
    <link href="http://blog.yongyuan.com/post/Angular%20add%20custom%20style%20and%20input%20auto%20focus.html"/>
    <id>http://blog.yongyuan.com/post/Angular add custom style and input auto focus.html</id>
    <published>2015-11-19T03:21:04.000Z</published>
    <updated>2016-05-24T16:51:53.000Z</updated>
    
    <content type="html">&lt;p&gt;首先我本人並不是很喜歡 angular 1.X 的，但是項目既然用了，還是要用心去做的。所以從零基礎到直接獨自上手開發肯定會遇到很多坑的，在這裏只是記錄一些遇到的坑，相信很多新人會遇到的。&lt;br&gt;一：ui.bootstrap 的模態框 modal 組件添加自定義樣式&lt;/p&gt;
&lt;p&gt;modal 官方示例的模板是这样的&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/ng-template&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;myModalContent.html&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;handlebars&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;modal-header&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;modal-title&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;I&#39;m a modal!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;modal-body&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-repeat&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;item in items&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-click&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;selected.item = item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123;&amp;#123; item &amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       Selected: &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;b&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123;&amp;#123; selected.item &amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;b&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;modal-footer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;btn btn-primary&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-click&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ok()&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;OK&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;btn btn-warning&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-click&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;cancel()&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Cancel&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$scope.open = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(size)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; modalInstance = $modal.open(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      templateUrl: &lt;span class=&quot;string&quot;&gt;&#39;myModalContent.html&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      controller: &lt;span class=&quot;string&quot;&gt;&#39;ModalInstanceCtrl&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      size: size,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      resolve: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        items: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $scope.items;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    modalInstance.result.then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(selectedItem)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      $scope.selected = selectedItem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      $log.info(&lt;span class=&quot;string&quot;&gt;&#39;Modal dismissed at: &#39;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Date());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;他只支持 lg,sm 两种大小的弹框，有时候需要定制弹框的大小就有点麻烦了，因为这个 modal 的宽度通过 lg，sm 参数都是在 modal 内容最外层生成的，在 modal-header 的外层，你不可能自己定义 modal-header/body 等宽度样子来设置，当然你不能直接设置 modal-dialog/content 的样式，因为不是这一个地方要用弹窗的，所以我今天看了下，发现是有个解决办法的。那就是，你继续给 open 传参数，但是不是传 lg,sm，传一个你自己定义的一个参数即可，发现这个参数是会在外层 modal 元素标签属性里显示的，也就是说你可以通过属性选择器来设置这个弹框的样式，是不是很巧。比如我传了一个 open(‘blog’)。最终在页面上可以看到最外层弹框里多了一个属性 siz=”blog”。那么我们就可以通过 .modal[size=”blog”]来单独设置这个弹窗的样式了。&lt;/p&gt;
&lt;p&gt;二.自动触发 focus 焦点&lt;br&gt;angular 实现这个比较简单，写一个通用的指令即可&lt;br&gt;Demo:&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-app&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;sampleapp&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-controller&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;samplecontoller&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;focusexample&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Auto Focus : &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        With Out Focus : &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Auto Focus : &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;focus&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myapp = angular.module(&lt;span class=&quot;string&quot;&gt;&#39;sampleapp&#39;&lt;/span&gt;, [ ]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myapp.controller(&lt;span class=&quot;string&quot;&gt;&#39;samplecontoller&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;($scope)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;angular.module(&lt;span class=&quot;string&quot;&gt;&#39;sampleapp&#39;&lt;/span&gt;).directive(&lt;span class=&quot;string&quot;&gt;&#39;focus&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($timeout)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			scope : &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				trigger : &lt;span class=&quot;string&quot;&gt;&#39;@focus&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			link : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(scope, element)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				scope.$watch(&lt;span class=&quot;string&quot;&gt;&#39;trigger&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(value)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (value === &lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						$timeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;							element[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].focus();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;首先我本人並不是很喜歡 angular 1.X 的，但是項目既然用了，還是要用心去做的。所以從零基礎到直接獨自上手開發肯定會遇到很多坑的，在這裏只是記錄一些遇到的坑，相信很多新人會遇到的。&lt;br&gt;一：ui.bootstrap 的模態框 modal 組件添加自定義樣式&lt;/p&gt;
    
    </summary>
    
    
      <category term="angular" scheme="http://blog.yongyuan.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>Angular ng-click 與 ng-blur 混用導致 ng-click 無效的解決辦法</title>
    <link href="http://blog.yongyuan.com/post/Angular%20ng-click%20%E8%88%87%20ng-blur%20%E6%B7%B7%E7%94%A8%E5%B0%8E%E8%87%B4%20ng-click%20%E7%84%A1%E6%95%88%E7%9A%84%E8%A7%A3%E6%B1%BA%E8%BE%A6%E6%B3%95.html"/>
    <id>http://blog.yongyuan.com/post/Angular ng-click 與 ng-blur 混用導致 ng-click 無效的解決辦法.html</id>
    <published>2015-11-18T15:21:04.000Z</published>
    <updated>2016-05-24T01:52:57.000Z</updated>
    
    <content type="html">&lt;p&gt;首先聲明我只是一個 angular 菜鳥，api 都不熟。今天在項目裏遇到一個問題，就是我在實現一個類似 input autocomplete 的功能的時候。當我在點擊下拉列表的時候選中元素之後，想通過 ng-click 事件把選中的元素賦值到輸入框裏。然而在實習這個功能的時候，我還利用通過 ng-blur 的方法隱藏下拉顯示的帶選擇元素。&lt;/p&gt;
&lt;p&gt;所以这个时候就会出问题了，因为 ng-blur 事件比 ng-click 先执行的，导致你的 ng-click 事件是无效的。解决办法有几个，我这里记录一个最简单的办法，就是把 ng-click 事件改成 ng-mousedown。其实就和 jquery 里一样的嘛。&lt;/p&gt;
&lt;p&gt;下面可以看个简单的列子：&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;首先聲明我只是一個 angular 菜鳥，api 都不熟。今天在項目裏遇到一個問題，就是我在實現一個類似 input autocomplete 的功能的時候。當我在點擊下拉列表的時候選中元素之後，想通過 ng-click 事件把選中的元素賦值到輸入框裏。然而在實習這個功能的
    
    </summary>
    
    
      <category term="angular" scheme="http://blog.yongyuan.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>Angular 在低版本 chrome 内核浏览器无法记住密码的坑</title>
    <link href="http://blog.yongyuan.com/post/Angular%20%E5%9C%A8%E4%BD%8E%E7%89%88%E6%9C%AC%20chrome%20%E5%86%85%E6%A0%B8%E6%B5%8F%E8%A7%88%E5%99%A8%E6%97%A0%E6%B3%95%E8%AE%B0%E4%BD%8F%E5%AF%86%E7%A0%81%E7%9A%84%E5%9D%91.html"/>
    <id>http://blog.yongyuan.com/post/Angular 在低版本 chrome 内核浏览器无法记住密码的坑.html</id>
    <published>2015-10-25T03:21:04.000Z</published>
    <updated>2016-05-24T01:52:57.000Z</updated>
    
    <content type="html">&lt;p&gt;又是一个坑，今天有人反应我们刚上的项目在 360浏览器极速模式下面记住密码无效，看起来虽然浏览器记住了，里面也有值，但是提交登录的时候提示没有账户名和密码。可是在我的最新版 chrome 浏览器里是可以记住的，也是可以登录的。咋就在你这国产 chrome 里面就没效呢，在 360 浏览器下调试了一下，发现提价的时候果然账户密码的数据没有绑定上。WTF,这是啥坑，是 angular 还是 chrome  的呢，遇 bug 别急，先 google 和 栈爆找一下。&lt;/p&gt;
&lt;p&gt;找了一下，很少有这个问题的，但还是被窝找到了，看这 &lt;a href=&quot;https://github.com/angular/angular.js/issues/1460&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/angular/angular.js/issues/1460&lt;/a&gt; 或者 &lt;a href=&quot;https://github.com/fnakstad/angular-client-side-auth/issues/58#issuecomment-147861575&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/fnakstad/angular-client-side-auth/issues/58#issuecomment-147861575&lt;/a&gt; 。可以看到好像是旧版 chrome 的和 angular 的一个 bug。就是说你不用 angular 在低版本 chrome 是没有这个问题的，但是你在低版本的 chrome 里用 angular 是有这个问题的。好了，问题找到了，接下来就是修复了，我看到网上有修复这个 bug 的一个 angular 指令。但是在我调试的时候，发现这个登录框实际上是有记住的账户和密码值的，只是数据绑定没有给帮上，所以，这个地方，我们可以不用数据绑定呀，直接用 &lt;code&gt;angular.elemnt(&amp;#39;.account-input&amp;#39;).val()&lt;/code&gt; 这样就可以获取里面的值呀，多方便是吧。&lt;/p&gt;
&lt;p&gt;一开始我们是这样写的&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;form.form-validate(role=&amp;quot;form&amp;quot;, ng-submit=&amp;quot;login()&amp;quot;, name=&amp;quot;loginForm&amp;quot;, novalidate=&amp;quot;&amp;quot;).mb-lg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .form-group.has-feedback&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        input.form-control.login-name(type=&amp;quot;text&amp;quot;, ng-trim=&amp;quot;&amp;quot; name=&amp;quot;account_username&amp;quot; placeholder=&amp;quot;请输入用户名&amp;quot;, autocomplete=&amp;quot;off&amp;quot;, ng-model=&amp;quot;account.username&amp;quot;, required=&amp;quot;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        span.fa.fa-user.form-control-feedback.text-muted&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        span.text-danger(ng-show=&amp;quot;loginForm.account_username.$dirty &amp;amp;&amp;amp; loginForm.account_username.$error.required&amp;quot;) 请输入用户名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        span.text-danger(ng-show=&amp;quot;loginForm.account_username.$dirty &amp;amp;&amp;amp; loginForm.account_username.$error.email&amp;quot;) 用户名无效&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .form-group.has-feedback&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        input.form-control.login-password(type=&amp;quot;password&amp;quot;, name=&amp;quot;account_password&amp;quot; placeholder=&amp;quot;请输入密码&amp;quot;, ng-model=&amp;quot;account.password&amp;quot;, required=&amp;quot;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        span.fa.fa-lock.form-control-feedback.text-muted&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        span.text-danger(ng-show=&amp;quot;loginForm.account_password.$dirty &amp;amp;&amp;amp; loginForm.account_password.$error.required&amp;quot;) 请输入密码&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$scope.account = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    username: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    password: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$scope.login = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ($scope.account.password !== &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; &amp;amp;&amp;amp; $scope.account.username !== &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        AuthService.login(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            username: $scope.account.username,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            password: $scope.account.password&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 登录成功后需要进一步获取管理员信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            AdminService.get(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $rootScope.$broadcast(AUTH_EVENTS.loginSuccess);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(error)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $scope.authMsg = error.message;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $rootScope.$broadcast(AUTH_EVENTS.loginFailed, error.code);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $scope.loginForm.account_username.$dirty = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $scope.loginForm.account_password.$dirty = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码在新的 chrome 历史没问题的，可以获取绑定的帐号密码，但是低版本有问题，我们可以直接通过获取 dom 的值来获取。修改后这样：&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$scope.login = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$scope.account = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    username: angular.element(&lt;span class=&quot;string&quot;&gt;&#39;.login-name&#39;&lt;/span&gt;).val(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    password: angular.element(&lt;span class=&quot;string&quot;&gt;&#39;.login-password&#39;&lt;/span&gt;).val()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ($scope.account.password !== &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; &amp;amp;&amp;amp; $scope.account.username !== &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        AuthService.login(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            username: $scope.account.username,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            password: $scope.account.password&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 登录成功后需要进一步获取管理员信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            AdminService.get(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $rootScope.$broadcast(AUTH_EVENTS.loginSuccess);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(error)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $scope.authMsg = error.message;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $rootScope.$broadcast(AUTH_EVENTS.loginFailed, error.code);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $scope.loginForm.account_username.$dirty = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $scope.loginForm.account_password.$dirty = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然还有其他的方法，比如新建一个隐藏表单，还有封装一个指令，但那些太麻烦了，增加一些没意义的代码。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;又是一个坑，今天有人反应我们刚上的项目在 360浏览器极速模式下面记住密码无效，看起来虽然浏览器记住了，里面也有值，但是提交登录的时候提示没有账户名和密码。可是在我的最新版 chrome 浏览器里是可以记住的，也是可以登录的。咋就在你这国产 chrome 里面就没效呢，在 
    
    </summary>
    
    
      <category term="angular" scheme="http://blog.yongyuan.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>乱象</title>
    <link href="http://blog.yongyuan.com/post/%E4%B9%B1%E8%B1%A1.html"/>
    <id>http://blog.yongyuan.com/post/乱象.html</id>
    <published>2015-10-25T03:21:04.000Z</published>
    <updated>2016-05-24T01:52:57.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h4&gt;&lt;p&gt;接触前端已经不短了，在微薄以及一些社区上也一直在参与关注前端圈子，但是我一直没去参加过什么前端会议。在一个圈子久了就会发现这个圈子有很多毛病，有的毛病是很多圈子都有的，有的则是特有的，不过本质都是人的问题。&lt;br&gt;前端这两年的随着市场的需求越来越多，薪水也越来越高，虽然最近 bat 什么的 winter is coming，但是中小公司还是很难招到一枚合适的前端。归根到底还是前端这个圈太浮躁了，人们在就业的时候太物质了，很多人啊看到前端这么火，看到什么培训三个月工资 18k的广告，就眼红的不要不要的，不管三七二一我也要去做前端，有的随便培训一下简历忽悠一下就开始去面试找工作，也有的人想通过自己学习去做前端，然后去社区问一些问题，比如我这能转行做前端嘛？我想转行做前端，自学一个月可以找到工作嘛？我想转行做前端，能推荐一些入门的资料嘛？等等一些问题，看到这些问题真的不知道说什么好，因为每个人都有自己选择的权利，你不能去说也没资格说别人不能做前端，所以你只能看到越来越多的这样的人加入前端圈，进入一个恶性循环的结果。导致一种这样的假象「很多前端找不到工作，很多企业招不到前端」。&lt;br&gt;前端是一门技术工程工作，而技术的学习提高更多的是靠自己，一个真正优秀的黑客他之前绝对不会去问别人怎么入门黑客的。&lt;/p&gt;
&lt;h4 id=&quot;安全&quot;&gt;&lt;a href=&quot;#安全&quot; class=&quot;headerlink&quot; title=&quot;安全&quot;&gt;&lt;/a&gt;安全&lt;/h4&gt;&lt;p&gt;其实在前端圈之前我一直在安全圈里混，但是自己先天后天都比那些优秀的同龄人差很多，所以后来才加入前端码农这一行业的。&lt;br&gt;安全圈的门槛比前端要高，所以不会出现像前端那种一些什么学习一个月能不能找到工作的的问题，因为就算一些小白或者其他行业的人真的想从事安全行业都是事先知道这行很难这么快就能找到工作的，说到底还是对安全技术有一种敬畏，然而前端却不是那样，因为很多人不管是不是做前端的都说前端还不简单，随便看一下资料就能去找个实习，所以导致很多人真的就转过来做前端。安全圈不会有那个问题，更多的是问黑客怎么入门啊，求个师傅带啊，然而有的人问了几年还没入门，还在找师傅。&lt;br&gt;安全圈也有一些值得称赞的地方，企业越来越重视安全问题，越来越重视用户的安全问题，虽然做的还远不够，但这都是一些好消息，但是也有一些老司机啊就是对用户不那么友好，又或者为了面子工程不承认自己的安全问题，但是自己又偷偷修复，当然修复是最后，就怕修都不修复。&lt;br&gt;然而安全圈和前端圈都有一个相同的问题，资源泛滥且同质化，资源分享永远是两个圈子里最受欢迎的帖子，或许其他行业圈子也一样，因为人嘛都喜欢免费的，而且都有贪婪欲。但是说真的，前端现在真的资源泛滥同质化了，没啥自己创新有思考的东西分享出来。&lt;/p&gt;
&lt;h4 id=&quot;比特币&quot;&gt;&lt;a href=&quot;#比特币&quot; class=&quot;headerlink&quot; title=&quot;比特币&quot;&gt;&lt;/a&gt;比特币&lt;/h4&gt;&lt;p&gt;其实接触比特币不算很久，在前两年比特币最疯狂的那段时间，我只是一个穷学生，没钱投资购买 btc 玩，只能看着那些人吹什么靠比特币暴富的新闻。但是自己也有一直在关注比特币方面的消息，然后几个月前 1200 开始购买比特币，虽然对那些几十万几百万的投资我这是过家家玩的，但是我会坚持长期玩下去的，无关信仰只是好玩。&lt;/p&gt;
&lt;p&gt;首先我本人是很支持比特币的，第一是技术上的实现，然后就是他背后的思想我也很赞同，自由主义，无政府主义，中本聪真是太厉害了。&lt;/p&gt;
&lt;p&gt;「1）任何在我出生时已经有的科技都是稀松平常的世界本来秩序的一部分。2）任何在我15-35岁之间诞生的科技都是将会改变世界的革命性产物。3）任何在我35岁之后诞生的科技都是违反自然规律要遭天谴的。」&lt;br&gt;引用一段英国科幻作家的话，不管如何比特币绝对是互联网很长一段时间来最伟大的发明，比特币的创始人中本聪也曾经如此预言：比特币要么一文不值，要么价值不可估量。&lt;/p&gt;
&lt;p&gt;人类对于未来永远不可预知，比特币或许不能让人暴富，但是它毕竟承载了希望，而人世间最美好的东西，不也就是所谓的希望！正所谓「万物之中，希望至美；至美之物永不凋零」&lt;/p&gt;
&lt;p&gt;在如今余额宝利率越来越低股票越来越低，股票都要由中央来操控的背景下，我选择投资自由，去中心化，点对点的比特币。&lt;/p&gt;
&lt;p&gt;八卦一下，最近比特币一直缓慢在增长，有人说是因为全球传销组织 MMM 影响的，因为比特币是他们的交易工具，这让我想起前端的一个梗，色情行业推动了 html5 video 的普及，哈哈，懂得自然懂，如果有一天比特币在中国的普及是中国大妈的功劳大家千万别觉得奇怪。比特币社区的氛围还是不错的，也许现在还只是小众的人玩，素质还比较高，今天还在上面得到一个 1024 的邀请码，虽然 1024 已经过了！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h4&gt;&lt;p&gt;接触前端已经不短了，在微薄以及一些社区上也一直在参与关注前端圈子，但是我一直没去参加过什么前端会议。在一个圈子久了就会发现这个圈子有很多毛病
    
    </summary>
    
    
      <category term="比特币" scheme="http://blog.yongyuan.com/tags/%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>又一些 CSS Tips</title>
    <link href="http://blog.yongyuan.com/post/%E5%8F%88%E4%B8%80%E4%BA%9B%20CSS%20Tips%20.html"/>
    <id>http://blog.yongyuan.com/post/又一些 CSS Tips .html</id>
    <published>2015-10-23T03:21:04.000Z</published>
    <updated>2016-06-20T16:07:41.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;CSS-Tips&quot;&gt;&lt;a href=&quot;#CSS-Tips&quot; class=&quot;headerlink&quot; title=&quot;CSS Tips&quot;&gt;&lt;/a&gt;CSS Tips&lt;/h1&gt;&lt;p&gt;原文地址： &lt;a href=&quot;https://github.com/AllThingsSmitty/css-protips&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/AllThingsSmitty/css-protips&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#protips&quot;&gt;专业的技巧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#support&quot;&gt;支持情况&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;专业的技巧&quot;&gt;&lt;a href=&quot;#专业的技巧&quot; class=&quot;headerlink&quot; title=&quot;专业的技巧&quot;&gt;&lt;/a&gt;专业的技巧&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#use-not-to-applyunapply-borders-on-navigation&quot;&gt;使用 &lt;code&gt;:not()&lt;/code&gt; 选择器来决定导航是否显示边框&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#add-line-height-to-body&quot;&gt;为 body 元素添加行高&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#vertically-center-anything&quot;&gt;垂直居中任何元素&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#comma-separated-lists&quot;&gt;逗号分隔的列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#select-items-using-negative-nth-child&quot;&gt;使用负的 &lt;code&gt;nth-child&lt;/code&gt; 来选择元素&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#use-svg-for-icons&quot;&gt;使用 SVG 图标&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#use-the-lobotomized-owl-selector&quot;&gt;使用 “形似猫头鹰” 的选择器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#use-max-height-for-pure-css-sliders&quot;&gt;使用 &lt;code&gt;max-height&lt;/code&gt; 来建立纯 CSS 的滑块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#inherit-box-sizing&quot;&gt;继承 &lt;code&gt;box-sizing&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#equal-width-table-cells&quot;&gt;创造格子等宽的表格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#get-rid-of-margin-hacks-with-flexbox&quot;&gt;利用 Flexbox 去除多余的外边距&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#use-attribute-selectors-with-empty-links&quot;&gt;利用属性选择器来选择空链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#style-default-links&quot;&gt;给 “预设” 链接定义样式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#consistent-vertical-rhythm&quot;&gt;一致的垂直节奏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#intrinsic-ratio-boxes&quot;&gt;内在比例盒&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#style-broken-images&quot;&gt;为破碎图象定义样式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#use-rem-for-global-sizing-use-em-for-local-sizing&quot;&gt;用 rem 来调整全局大小；用 em 来调整局部大小&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#hide-autoplay-videos-that-arent-muted&quot;&gt;隐藏没有静音、自动播放的影片&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#use-root-for-flexible-type&quot;&gt;使用选择器 &lt;code&gt;:root&lt;/code&gt; 来控制字体弹性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#set-font-size-on-form-elements-for-a-better-mobile-experience&quot;&gt;将&lt;code&gt;font-size&lt;/code&gt;关于表单元素为更好的移动体验&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;使用-not-选择器来决定导航是否显示边框&quot;&gt;&lt;a href=&quot;#使用-not-选择器来决定导航是否显示边框&quot; class=&quot;headerlink&quot; title=&quot;使用 :not() 选择器来决定导航是否显示边框&quot;&gt;&lt;/a&gt;使用 &lt;code&gt;:not()&lt;/code&gt; 选择器来决定导航是否显示边框&lt;/h3&gt;&lt;p&gt;与其加上边框……&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 添加边框 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.nav&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;li&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border-right&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; solid &lt;span class=&quot;number&quot;&gt;#666&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;……然后去掉最后一个元素的边框……&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 去掉边框 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.nav&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:last-child&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border-right&lt;/span&gt;: none;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;……不如使用 &lt;code&gt;:not()&lt;/code&gt; 伪类来达成同样的效果：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.nav&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:not(&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:last-child)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border-right&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; solid &lt;span class=&quot;number&quot;&gt;#666&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，也可以使用 &lt;code&gt;.nav li + li&lt;/code&gt; 或者 &lt;code&gt;.nav li:first-child ~ li&lt;/code&gt; 来达成，但是 &lt;code&gt;:not()&lt;/code&gt; 选择器的方式更清晰明了，一目了然。&lt;/p&gt;
&lt;h3 id=&quot;为-body-元素添加行高&quot;&gt;&lt;a href=&quot;#为-body-元素添加行高&quot; class=&quot;headerlink&quot; title=&quot;为 body 元素添加行高&quot;&gt;&lt;/a&gt;为 &lt;code&gt;body&lt;/code&gt; 元素添加行高&lt;/h3&gt;&lt;p&gt;不必为每一个 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;，&lt;code&gt;&amp;lt;h*&amp;gt;&lt;/code&gt;，等元素逐一添加 &lt;code&gt;line-height&lt;/code&gt;，为 &lt;code&gt;body&lt;/code&gt; 元素添加就好了：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;文本元素可以很自然地继承 &lt;code&gt;body&lt;/code&gt; 的样式。&lt;/p&gt;
&lt;h3 id=&quot;垂直居中任何元素&quot;&gt;&lt;a href=&quot;#垂直居中任何元素&quot; class=&quot;headerlink&quot; title=&quot;垂直居中任何元素&quot;&gt;&lt;/a&gt;垂直居中任何元素&lt;/h3&gt;&lt;p&gt;这不是黑魔法，真的可以垂直居中任何元素：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;html&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;-webkit-align-items&lt;/span&gt;: center;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;-ms-flex-align&lt;/span&gt;: center;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;align-items&lt;/span&gt;: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: -webkit-flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这还不够？垂直方向，水平方向……任何元素，任何时间，任何地方？CSS-Tricks &lt;a href=&quot;https://css-tricks.com/centering-css-complete-guide/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;有篇好文&lt;/a&gt; 讲到了各种居中的技巧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; IE11 对 flexbox 的支持&lt;a href=&quot;https://github.com/philipwalton/flexbugs#3-min-height-on-a-flex-container-wont-apply-to-its-flex-items&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;有点 bug&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;逗号分隔的列表&quot;&gt;&lt;a href=&quot;#逗号分隔的列表&quot; class=&quot;headerlink&quot; title=&quot;逗号分隔的列表&quot;&gt;&lt;/a&gt;逗号分隔的列表&lt;/h3&gt;&lt;p&gt;列表的每项都由逗号分隔：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;ul&lt;/span&gt; &amp;gt; &lt;span class=&quot;selector-tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:not(&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:last-child)&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;::after&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用了 &lt;code&gt;:not()&lt;/code&gt; 伪类，因此最后一项没加逗号。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;这一技巧对于无障碍，屏幕阅读器而言并不理想，需要注意。&lt;/p&gt;
&lt;h3 id=&quot;使用负的-nth-child-来选择元素&quot;&gt;&lt;a href=&quot;#使用负的-nth-child-来选择元素&quot; class=&quot;headerlink&quot; title=&quot;使用负的 nth-child 来选择元素&quot;&gt;&lt;/a&gt;使用负的 &lt;code&gt;nth-child&lt;/code&gt; 来选择元素&lt;/h3&gt;&lt;p&gt;使用负的 &lt;code&gt;nth-child&lt;/code&gt; 可以选择 1 至 n 个元素。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;li&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: none;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 选择第 1 至第 3 个元素并显示出来 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:nth-child(-n+3)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或许你已经掌握了&lt;a href=&quot;#use-not-to-applyunapply-borders-on-navigation&quot;&gt;如何使用 &lt;code&gt;:not()&lt;/code&gt;&lt;/a&gt;，试下这个：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 选择第 1 至第 3 个元素并显示出来 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:not(&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:nth-child(-n+3))&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: none;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就是这么简单。&lt;/p&gt;
&lt;h3 id=&quot;使用-SVG-图标&quot;&gt;&lt;a href=&quot;#使用-SVG-图标&quot; class=&quot;headerlink&quot; title=&quot;使用 SVG 图标&quot;&gt;&lt;/a&gt;使用 SVG 图标&lt;/h3&gt;&lt;p&gt;没有理由不使用 SVG 图标：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.logo&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;logo.svg&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;SVG 在所有分辨率下都可以良好缩放，IE9+ 及其它所有浏览器都支持，丢掉你的 .png, .jpg, 或 .gif-jif-whatev 文件吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 针对仅有图标的按钮，如果 SVG 没有加载成功的话，以下样式对无障碍有所帮助：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.no-svg&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.icon-only&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:after&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;attr&lt;/span&gt;(aria-label);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;使用-“形似猫头鹰”-的选择器&quot;&gt;&lt;a href=&quot;#使用-“形似猫头鹰”-的选择器&quot; class=&quot;headerlink&quot; title=&quot;使用 “形似猫头鹰” 的选择器&quot;&gt;&lt;/a&gt;使用 “形似猫头鹰” 的选择器&lt;/h3&gt;&lt;p&gt;这个名字可能比较陌生，不过全局选择器 (&lt;code&gt;*&lt;/code&gt;) 和 相邻兄弟选择器 (&lt;code&gt;+&lt;/code&gt;) 一起使用，效果非凡：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;* + * &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;margin-top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1.5em&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在此示例中，遵循其他元素的文档流中的所有元素将都接收上边距 &lt;code&gt;margin-top: 1.5em&lt;/code&gt; 的样式。&lt;/p&gt;
&lt;p&gt;更多 “形似猫头鹰”  的选择器，可参考 &lt;em&gt;A List Apart&lt;/em&gt; 上面 &lt;a href=&quot;http://alistapart.com/article/axiomatic-css-and-lobotomized-owls&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Heydon Pickering 的文章&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用-max-height-来建立纯-CSS-的滑块&quot;&gt;&lt;a href=&quot;#使用-max-height-来建立纯-CSS-的滑块&quot; class=&quot;headerlink&quot; title=&quot;使用 max-height 来建立纯 CSS 的滑块&quot;&gt;&lt;/a&gt;使用 &lt;code&gt;max-height&lt;/code&gt; 来建立纯 CSS 的滑块&lt;/h3&gt;&lt;p&gt;&lt;code&gt;max-height&lt;/code&gt; 与 overflow hidden 一起来建立纯 CSS 的滑块：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.slider&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;max-height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;overflow-y&lt;/span&gt;: hidden;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;300px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.slider&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:hover&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;max-height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;600px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;overflow-y&lt;/span&gt;: scroll;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;移入滑块元素时增大它的 &lt;code&gt;max-height&lt;/code&gt; 的值，便可以显示溢出部分。&lt;/p&gt;
&lt;h3 id=&quot;继承-box-sizing&quot;&gt;&lt;a href=&quot;#继承-box-sizing&quot; class=&quot;headerlink&quot; title=&quot;继承 box-sizing&quot;&gt;&lt;/a&gt;继承 &lt;code&gt;box-sizing&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;从 &lt;code&gt;html&lt;/code&gt; 元素继承 &lt;code&gt;box-sizing&lt;/code&gt; 就好：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;html&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;box-sizing&lt;/span&gt;: border-box;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*, *&lt;span class=&quot;selector-pseudo&quot;&gt;:before&lt;/span&gt;, *&lt;span class=&quot;selector-pseudo&quot;&gt;:after&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;box-sizing&lt;/span&gt;: inherit;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如此在插件或其它组件里改变 &lt;code&gt;box-sizing&lt;/code&gt; 变得简单。&lt;/p&gt;
&lt;h3 id=&quot;创造格子等宽的表格&quot;&gt;&lt;a href=&quot;#创造格子等宽的表格&quot; class=&quot;headerlink&quot; title=&quot;创造格子等宽的表格&quot;&gt;&lt;/a&gt;创造格子等宽的表格&lt;/h3&gt;&lt;p&gt;&lt;code&gt;table-layout: fixed&lt;/code&gt; 可以让每个格子保持等宽：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.calendar&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;table-layout&lt;/span&gt;: fixed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;无痛的 table 布局。&lt;/p&gt;
&lt;h3 id=&quot;利用-Flexbox-去除多余的外边距&quot;&gt;&lt;a href=&quot;#利用-Flexbox-去除多余的外边距&quot; class=&quot;headerlink&quot; title=&quot;利用 Flexbox 去除多余的外边距&quot;&gt;&lt;/a&gt;利用 Flexbox 去除多余的外边距&lt;/h3&gt;&lt;p&gt;与其使用 &lt;code&gt;nth-&lt;/code&gt;， &lt;code&gt;first-&lt;/code&gt;， 和 &lt;code&gt;last-child&lt;/code&gt; 去除列之间多余的间隙，不如使用 flexbox 的 &lt;code&gt;space-between&lt;/code&gt; 属性：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.list&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;justify-content&lt;/span&gt;: space-between;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.list&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.person&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;flex-basis&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;23%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;列之间的间隙相等，并且首尾没有多余的间隙。&lt;/p&gt;
&lt;h3 id=&quot;利用属性选择器来选择空链接&quot;&gt;&lt;a href=&quot;#利用属性选择器来选择空链接&quot; class=&quot;headerlink&quot; title=&quot;利用属性选择器来选择空链接&quot;&gt;&lt;/a&gt;利用属性选择器来选择空链接&lt;/h3&gt;&lt;p&gt;当 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 元素没有文本内容，但是有 &lt;code&gt;href&lt;/code&gt; 属性的时候，可以显示它的 &lt;code&gt;href&lt;/code&gt; 链接：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[href^=&quot;http&quot;]&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:empty&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;::before&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;attr&lt;/span&gt;(href);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;相当简便。&lt;/p&gt;
&lt;h3 id=&quot;给-“预设”-链接定义样式&quot;&gt;&lt;a href=&quot;#给-“预设”-链接定义样式&quot; class=&quot;headerlink&quot; title=&quot;给 “预设” 链接定义样式&quot;&gt;&lt;/a&gt;给 “预设” 链接定义样式&lt;/h3&gt;&lt;p&gt;给 “预设” 链接定义样式：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[href]&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:not(&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[class]&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#008000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;text-decoration&lt;/span&gt;: underline;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过 CMS 系统插入的链接，通常没有 &lt;code&gt;class&lt;/code&gt; 属性，以上样式可以甄别它们，而且不会影响其它样式。&lt;/p&gt;
&lt;h3 id=&quot;一致的垂直节奏&quot;&gt;&lt;a href=&quot;#一致的垂直节奏&quot; class=&quot;headerlink&quot; title=&quot;一致的垂直节奏&quot;&gt;&lt;/a&gt;一致的垂直节奏&lt;/h3&gt;&lt;p&gt;通用选择器 (&lt;code&gt;*&lt;/code&gt;) 跟元素一起使用，可以保持一致的垂直节奏：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.intro&lt;/span&gt; &amp;gt; * &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;margin-bottom&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1.25rem&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一致的垂直节奏可以提供视觉美感，增强内容的可读性。&lt;/p&gt;
&lt;h3 id=&quot;内在比例盒&quot;&gt;&lt;a href=&quot;#内在比例盒&quot; class=&quot;headerlink&quot; title=&quot;内在比例盒&quot;&gt;&lt;/a&gt;内在比例盒&lt;/h3&gt;&lt;p&gt;要创建具有内在比一个盒子，所有你需要做的就是应用顶部或底部填充，从一个div：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.container&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;padding-bottom&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;20%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: relative;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2px&lt;/span&gt; dashed &lt;span class=&quot;number&quot;&gt;#ddd&lt;/span&gt;;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用20％的填充使得框等于其宽度的20％的高度。不管视口的宽度，子元素的div将保持其宽高比（100％/ 20％= 5:1）。&lt;/p&gt;
&lt;h3 id=&quot;为破碎图象定义样式&quot;&gt;&lt;a href=&quot;#为破碎图象定义样式&quot; class=&quot;headerlink&quot; title=&quot;为破碎图象定义样式&quot;&gt;&lt;/a&gt;为破碎图象定义样式&lt;/h3&gt;&lt;p&gt;只要一点CSS就可以美化破碎的图象：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;img&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;: Helvetica, Arial, sans-serif;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-weight&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: relative;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以添加伪元素的法则来显示使用者信息和虚线图像URL的引用：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:before&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;We&#39;re sorry, the image below is broken :(&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;margin-bottom&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:after&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;(url: &quot;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;attr&lt;/span&gt;(src) &lt;span class=&quot;string&quot;&gt;&quot;)&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;12px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;了解更多关于这类样式的技巧 &lt;a href=&quot;https://github.com/ireade/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ire Aderinokun&lt;/a&gt;的 &lt;a href=&quot;http://bitsofco.de/styling-broken-images/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原帖&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;用-rem-来调整全局大小；用-em-来调整局部大小&quot;&gt;&lt;a href=&quot;#用-rem-来调整全局大小；用-em-来调整局部大小&quot; class=&quot;headerlink&quot; title=&quot;用 rem 来调整全局大小；用 em 来调整局部大小&quot;&gt;&lt;/a&gt;用 &lt;code&gt;rem&lt;/code&gt; 来调整全局大小；用 &lt;code&gt;em&lt;/code&gt; 来调整局部大小&lt;/h3&gt;&lt;p&gt;在根设置基本字体大小后 (&lt;code&gt;html { font-size: 16px; }&lt;/code&gt;), 请设置为文本元素的字体大小 &lt;code&gt;em&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;h2&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2em&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1em&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后设置字体大小的模块 &lt;code&gt;rem&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;article&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1.25rem&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;aside&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.module&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: .&lt;span class=&quot;number&quot;&gt;9rem&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在，每个模块变得条块分割，更容易、灵活的样式，以便于维护。&lt;/p&gt;
&lt;h3 id=&quot;隐藏没有静音、自动播放的影片&quot;&gt;&lt;a href=&quot;#隐藏没有静音、自动播放的影片&quot; class=&quot;headerlink&quot; title=&quot;隐藏没有静音、自动播放的影片&quot;&gt;&lt;/a&gt;隐藏没有静音、自动播放的影片&lt;/h3&gt;&lt;p&gt;这是一个自定义的使用者样式表一个伟大的把戏。避免在加载页面时自动播放。如果没有静音，则不显示视频：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;video&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[autoplay]&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:not(&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[muted]&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: none;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再次，我們趁著使用的 &lt;a href=&quot;#use-not-to-applyunapply-borders-on-navigation&quot;&gt;&lt;code&gt;:not()&lt;/code&gt;&lt;/a&gt; 偽類。&lt;/p&gt;
&lt;h3 id=&quot;使用选择器-root来控制字体弹性&quot;&gt;&lt;a href=&quot;#使用选择器-root来控制字体弹性&quot; class=&quot;headerlink&quot; title=&quot;使用选择器:root来控制字体弹性&quot;&gt;&lt;/a&gt;使用选择器&lt;code&gt;:root&lt;/code&gt;来控制字体弹性&lt;/h3&gt;&lt;p&gt;在响应式布局的类型字体大小应能与每个视区进行调整。你可以计算的基础上视区高度的字体大小和宽度，使用&lt;code&gt;:root&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:root&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;calc&lt;/span&gt;(1vw + 1vh + .5vmin);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在，您可以利用基于计算的值&lt;code&gt;root em&lt;/code&gt;单位：&lt;code&gt;root&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1em&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;1.6&lt;/span&gt; sans-serif;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;将font-size关于表单元素为更好的移动体验&quot;&gt;&lt;a href=&quot;#将font-size关于表单元素为更好的移动体验&quot; class=&quot;headerlink&quot; title=&quot;将font-size关于表单元素为更好的移动体验&quot;&gt;&lt;/a&gt;将&lt;code&gt;font-size&lt;/code&gt;关于表单元素为更好的移动体验&lt;/h3&gt;&lt;p&gt;为了避免在HTML表单元素缩放移动浏览器（Safari浏览器的iOS，&lt;em&gt;et AL&lt;/em&gt;。）当一个&lt;code&gt;&amp;lt;选择&amp;gt;&lt;/code&gt;下拉被窃听，加上&lt;code&gt;字体size&lt;/code&gt;的选择规则：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[type=&quot;text&quot;]&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[type=&quot;number&quot;]&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;select&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;textarea&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;16px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;支持情况&quot;&gt;&lt;a href=&quot;#支持情况&quot; class=&quot;headerlink&quot; title=&quot;支持情况&quot;&gt;&lt;/a&gt;支持情况&lt;/h3&gt;&lt;p&gt;这些技巧适用于最新版的 Chrome, Firefox, Safari, Opera, Edge, 以及 IE11。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS-Tips&quot;&gt;&lt;a href=&quot;#CSS-Tips&quot; class=&quot;headerlink&quot; title=&quot;CSS Tips&quot;&gt;&lt;/a&gt;CSS Tips&lt;/h1&gt;&lt;p&gt;原文地址： &lt;a href=&quot;https://github.com/AllThingsSmi
    
    </summary>
    
    
      <category term="CSS" scheme="http://blog.yongyuan.com/tags/CSS/"/>
    
  </entry>
  
</feed>
